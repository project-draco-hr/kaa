{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 0:
      if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
          org.apache.thrift.protocol.TList _list96=iprot.readListBegin();
          struct.success=new ArrayList<org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct>(_list96.size);
          for (int _i97=0; _i97 < _list96.size; ++_i97) {
            org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct _elem98;
            _elem98=new org.kaaproject.kaa.server.common.thrift.gen.shared.DataStruct();
            _elem98.read(iprot);
            struct.success.add(_elem98);
          }
          iprot.readListEnd();
        }
        struct.setSuccessIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 1:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
    struct.ControlException=new ControlThriftException();
    struct.ControlException.read(iprot);
    struct.setControlExceptionIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
