{
  StringBuffer name=new StringBuffer();
  String intName="";
  String ports="";
  for (  BootstrapSupportedChannel ch : nodeInfo.getSupportedChannelsArray()) {
    IpComunicationParameters params;
    if (ch.getZkChannel().getChannelType() == ZkChannelType.HTTP) {
      ZkHttpComunicationParameters httpParams=(ZkHttpComunicationParameters)ch.getZkChannel().getCommunicationParameters();
      params=httpParams.getZkComunicationParameters();
    }
 else     if (ch.getZkChannel().getChannelType() == ZkChannelType.HTTP_LP) {
      ZkHttpLpComunicationParameters httpParams=(ZkHttpLpComunicationParameters)ch.getZkChannel().getCommunicationParameters();
      params=httpParams.getZkComunicationParameters();
    }
 else     if (ch.getZkChannel().getChannelType() == ZkChannelType.KAATCP) {
      ZkKaaTcpComunicationParameters httpParams=(ZkKaaTcpComunicationParameters)ch.getZkChannel().getCommunicationParameters();
      params=httpParams.getZkComunicationParameters();
    }
 else {
      continue;
    }
    if (!params.getHostName().equals(intName)) {
      if (!"".equals(intName)) {
        intName+="-";
      }
      intName+=params.getHostName();
    }
    if (!"".equals(ports)) {
      ports+=".";
    }
    ports+=params.getPort();
  }
  name.append(intName);
  name.append(HOST_PORT_DELIMITER);
  name.append(ports);
  return name.toString();
}
