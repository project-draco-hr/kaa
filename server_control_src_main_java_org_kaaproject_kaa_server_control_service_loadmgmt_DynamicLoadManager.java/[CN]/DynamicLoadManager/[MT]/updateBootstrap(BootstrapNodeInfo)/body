{
  final String dnsName=getNameFromConnectionInfo(nodeInfo.getConnectionInfo());
  LOG.debug("Update bootstrap server: {}",dnsName);
  try {
    ThriftClient<BootstrapThriftService.Client> client=new ThriftClient<BootstrapThriftService.Client>(nodeInfo.getConnectionInfo().getThriftHost().toString(),nodeInfo.getConnectionInfo().getThriftPort(),BootstrapThriftService.Client.class);
    client.setThriftActivity(new ThriftActivity<BootstrapThriftService.Client>(){
      @Override public void isSuccess(      boolean activitySuccess){
        lastBootstrapServersUpdateFailed=!activitySuccess;
        LOG.info("Bootstrap {}: Operations servers list updated {}",dnsName,activitySuccess ? "successfully" : "unsuccessfully");
      }
      @Override public void doInTemplate(      Client t){
        try {
          List<ThriftOperationsServer> operationsServersList=new ArrayList<>();
          for (          String dnsName : opsServersMap.keySet()) {
            operationsServersList.add(opsServersMap.get(dnsName).opsServer);
            LOG.trace("Bootstrap {} server: {}",dnsName,opsServersMap.get(dnsName).opsServer.toString());
          }
          LOG.trace("Bootstrap {} Operations servers list size {} ready to updates",dnsName,operationsServersList.size());
          t.onOperationsServerListUpdate(operationsServersList);
          LOG.info("Bootstrap " + dnsName + " Operations servers list updated.");
        }
 catch (        TException e) {
          lastBootstrapServersUpdateFailed=true;
          LOG.error("Bootstrap " + dnsName + " Operations servers list updated failed: "+ e.toString());
        }
      }
    }
);
    ThriftExecutor.execute(client);
  }
 catch (  NoSuchMethodException|SecurityException|InstantiationException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
    lastBootstrapServersUpdateFailed=true;
    LOG.error("Bootstrap " + dnsName + " Operations servers list execute updated failed: "+ e.toString());
  }
}
