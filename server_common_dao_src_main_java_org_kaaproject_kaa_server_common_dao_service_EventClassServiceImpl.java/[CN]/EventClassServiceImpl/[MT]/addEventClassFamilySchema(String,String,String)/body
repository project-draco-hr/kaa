{
  EventClassFamilyDto eventClassFamily=findEventClassFamilyById(eventClassFamilyId);
  if (eventClassFamily != null) {
    List<EventSchemaMetadata> eventSchemas;
    try {
      eventSchemas=eventSchemaProcessor.processSchema(eventClassFamilySchema);
    }
 catch (    EventSchemaException e) {
      LOG.warn("Can't process event class family schema.",e);
      throw new IncorrectParameterException("Incorrect event class family schema.");
    }
    List<String> fqns=new ArrayList<>(eventSchemas.size());
    for (    EventSchemaMetadata eventSchema : eventSchemas) {
      fqns.add(eventSchema.getFqn());
    }
    if (validateEventClassFamilyFqns(eventClassFamily,fqns)) {
      List<EventSchemaVersionDto> schemas=eventClassFamily.getSchemas();
      int version=1;
      if (schemas != null && !schemas.isEmpty()) {
        Collections.sort(schemas,new Comparator<EventSchemaVersionDto>(){
          @Override public int compare(          EventSchemaVersionDto o1,          EventSchemaVersionDto o2){
            return o1.getVersion() - o2.getVersion();
          }
        }
);
        version=schemas.get(schemas.size() - 1).getVersion() + 1;
      }
 else       if (schemas == null) {
        schemas=new ArrayList<>();
        eventClassFamily.setSchemas(schemas);
      }
      EventSchemaVersionDto eventSchemaVersion=new EventSchemaVersionDto();
      eventSchemaVersion.setVersion(version);
      eventSchemaVersion.setSchema(eventClassFamilySchema);
      eventSchemaVersion.setCreatedTime(System.currentTimeMillis());
      eventSchemaVersion.setCreatedUsername(createdUsername);
      schemas.add(eventSchemaVersion);
      eventClassFamilyDao.save(new EventClassFamily(eventClassFamily));
      for (      EventSchemaMetadata eventSchema : eventSchemas) {
        saveEventClassSchema(eventClassFamily,eventSchema,version);
      }
    }
 else {
      LOG.debug("Can't process event class family schema.");
      throw new IncorrectParameterException("Incorrect event class family schema. FQNs should be unique within the tenant.");
    }
  }
 else {
    LOG.debug("Can't find related event class family.");
    throw new IncorrectParameterException("Event class family not found, id:" + eventClassFamilyId);
  }
}
