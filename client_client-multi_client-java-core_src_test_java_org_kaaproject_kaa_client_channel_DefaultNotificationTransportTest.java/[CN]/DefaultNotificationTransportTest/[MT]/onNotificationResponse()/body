{
  KaaClientState clientState=Mockito.mock(KaaClientState.class);
  NotificationProcessor notificationProcessor=Mockito.mock(NotificationProcessor.class);
  NotificationManager notificationManager=Mockito.mock(NotificationManager.class);
  Mockito.when(clientState.getNotificationSeqNumber()).thenReturn(new Integer(5));
  NotificationSyncResponse response=new NotificationSyncResponse();
  response.setAppStateSeqNumber(5);
  response.setResponseStatus(SyncResponseStatus.DELTA);
  NotificationTransport transport=new DefaultNotificationTransport();
  transport.setNotificationManager(notificationManager);
  transport.onNotificationResponse(response);
  transport.setNotificationProcessor(notificationProcessor);
  transport.onNotificationResponse(response);
  transport.setClientState(clientState);
  transport.onNotificationResponse(response);
  List<Topic> topicList=new ArrayList<>(1);
  topicList.add(new Topic());
  response.setAvailableTopics(topicList);
  List<Notification> notifications=new ArrayList<>(2);
  notifications.add(new Notification("topicId1",NotificationType.CUSTOM,null,3,ByteBuffer.wrap(new byte[]{1,2,3})));
  notifications.add(new Notification("topicId2",NotificationType.CUSTOM,"uid",5,ByteBuffer.wrap(new byte[]{1,2,3})));
  response.setNotifications(notifications);
  transport.onNotificationResponse(response);
  Mockito.verify(notificationProcessor,Mockito.times(1)).notificationReceived(notifications);
  Mockito.verify(notificationProcessor,Mockito.times(1)).topicsListUpdated(topicList);
  Mockito.verify(clientState,Mockito.times(1)).updateTopicSubscriptionInfo(Mockito.eq("topicId1"),Mockito.eq(3));
  Assert.assertEquals("uid",transport.createNotificationRequest().getAcceptedUnicastNotifications().get(0));
}
