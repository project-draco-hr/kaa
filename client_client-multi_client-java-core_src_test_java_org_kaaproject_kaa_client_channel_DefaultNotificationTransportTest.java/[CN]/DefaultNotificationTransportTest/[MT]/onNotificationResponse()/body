{
  KaaClientState clientState=Mockito.mock(KaaClientState.class);
  NotificationProcessor notificationProcessor=Mockito.mock(NotificationProcessor.class);
  Mockito.when(clientState.getNotificationSeqNumber()).thenReturn(new Integer(2));
  Mockito.when(clientState.updateTopicSubscriptionInfo(Mockito.anyString(),Mockito.anyInt())).thenReturn(Boolean.TRUE);
  NotificationSyncResponse response=new NotificationSyncResponse();
  response.setAppStateSeqNumber(3);
  response.setResponseStatus(SyncResponseStatus.DELTA);
  String topicId1="topicId1";
  String topicId2="topicId2";
  KaaChannelManager channelManagerMock=Mockito.mock(KaaChannelManager.class);
  KaaDataChannel channelMock=Mockito.mock(KaaDataChannel.class);
  Mockito.when(channelManagerMock.getChannelByTransportType(TransportType.NOTIFICATION)).thenReturn(channelMock);
  NotificationTransport transport=new DefaultNotificationTransport();
  transport.setChannelManager(channelManagerMock);
  transport.onNotificationResponse(response);
  transport.onNotificationResponse(response);
  transport.setNotificationProcessor(notificationProcessor);
  transport.onNotificationResponse(response);
  transport.setClientState(clientState);
  transport.onNotificationResponse(response);
  List<Topic> topicList=new ArrayList<>(1);
  topicList.add(new Topic(topicId1,null,SubscriptionType.MANDATORY));
  topicList.add(new Topic(topicId2,null,SubscriptionType.OPTIONAL));
  response.setAvailableTopics(topicList);
  Notification nf1=new Notification(topicId2,NotificationType.CUSTOM,"uid",5,ByteBuffer.wrap(new byte[]{1,2,3}));
  Notification nf2=new Notification(topicId1,NotificationType.CUSTOM,null,3,ByteBuffer.wrap(new byte[]{1,2,3}));
  Notification nf3=new Notification(topicId1,NotificationType.CUSTOM,null,6,ByteBuffer.wrap(new byte[]{1,2,3}));
  response.setNotifications(Arrays.asList(nf3,nf1,nf2));
  List<Notification> expectedNotifications=Arrays.asList(nf1,nf2,nf3);
  transport.onNotificationResponse(response);
  Mockito.verify(notificationProcessor,Mockito.times(1)).notificationReceived(expectedNotifications);
  Mockito.verify(notificationProcessor,Mockito.times(1)).topicsListUpdated(topicList);
  Mockito.verify(clientState,Mockito.times(1)).updateTopicSubscriptionInfo(Mockito.eq(topicId1),Mockito.eq(3));
  Mockito.verify(clientState,Mockito.times(1)).updateTopicSubscriptionInfo(Mockito.eq(topicId1),Mockito.eq(6));
  Assert.assertEquals("uid",transport.createNotificationRequest().getAcceptedUnicastNotifications().get(0));
}
