{
  KaaClientPropertiesState state=new KaaClientPropertiesState(new FilePersistentStorage(),KaaClientPropertiesStateTest.getProperties());
  NotificationTransport transport=mock(NotificationTransport.class);
  DefaultNotificationManager notificationManager=new DefaultNotificationManager(state,transport);
  List<Topic> topicsUpdate=Arrays.asList(new Topic("id1","topic_name1",SubscriptionType.MANDATORY),new Topic("id2","topic_name1",SubscriptionType.MANDATORY));
  ByteBuffer notificationBody=ByteBuffer.wrap(new AvroByteArrayConverter<>(Topic.class).toByteArray(new Topic("id","name",SubscriptionType.MANDATORY)));
  notificationManager.topicsListUpdated(topicsUpdate);
  List<Notification> notificationUpdate=Arrays.asList(new Notification("id1",NotificationType.CUSTOM,null,1,notificationBody),new Notification("id2",NotificationType.CUSTOM,null,1,notificationBody));
  NotificationListener globalListener=Mockito.mock(NotificationListener.class);
  NotificationListener topicListener=Mockito.mock(NotificationListener.class);
  notificationManager.addNotificationListener(globalListener);
  notificationManager.addNotificationListener("id2",topicListener);
  notificationManager.notificationReceived(notificationUpdate);
  notificationManager.removeNotificationListener("id2",topicListener);
  notificationManager.notificationReceived(notificationUpdate);
  Mockito.verify(globalListener,Mockito.times(notificationUpdate.size() * 2 - 1)).onNotificationRaw(Mockito.anyString(),Mockito.any(ByteBuffer.class));
  Mockito.verify(topicListener,Mockito.times(1)).onNotificationRaw(Mockito.anyString(),Mockito.any(ByteBuffer.class));
}
