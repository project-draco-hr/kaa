{
  KaaClientPropertiesState state=new KaaClientPropertiesState(new FilePersistentStorage(),CommonsBase64.getInstance(),KaaClientPropertiesStateTest.getProperties());
  NotificationTransport transport=mock(NotificationTransport.class);
  DefaultNotificationManager notificationManager=new DefaultNotificationManager(state,executorContext,transport);
  List<Topic> topicsUpdate=Arrays.asList(new Topic(1l,"topic_name1",SubscriptionType.MANDATORY_SUBSCRIPTION),new Topic(2l,"topic_name1",SubscriptionType.MANDATORY_SUBSCRIPTION));
  ByteBuffer notificationBody=ByteBuffer.wrap(new AvroByteArrayConverter<>(Topic.class).toByteArray(new Topic(3l,"name",SubscriptionType.MANDATORY_SUBSCRIPTION)));
  notificationManager.topicsListUpdated(topicsUpdate);
  List<Notification> notificationUpdate=Arrays.asList(new Notification(1l,NotificationType.CUSTOM,null,1,notificationBody),new Notification(2l,NotificationType.CUSTOM,null,1,notificationBody));
  NotificationListener globalListener=Mockito.mock(NotificationListener.class);
  NotificationListener topicListener=Mockito.mock(NotificationListener.class);
  notificationManager.addNotificationListener(globalListener);
  notificationManager.addNotificationListener(2l,topicListener);
  notificationManager.notificationReceived(notificationUpdate);
  notificationManager.removeNotificationListener(2l,topicListener);
  notificationManager.notificationReceived(notificationUpdate);
  Mockito.verify(globalListener,Mockito.timeout(1000).times(notificationUpdate.size() * 2 - 1)).onNotification(Mockito.anyLong(),Mockito.any(org.kaaproject.kaa.schema.base.Notification.class));
  Mockito.verify(topicListener,Mockito.timeout(1000).times(1)).onNotification(Mockito.anyLong(),Mockito.any(org.kaaproject.kaa.schema.base.Notification.class));
}
