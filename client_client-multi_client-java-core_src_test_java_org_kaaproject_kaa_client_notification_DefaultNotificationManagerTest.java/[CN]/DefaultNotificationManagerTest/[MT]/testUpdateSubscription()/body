{
  KaaClientPropertiesState state=new KaaClientPropertiesState(new FilePersistentStorage(),KaaClientPropertiesStateTest.getProperties());
  NotificationTransport transport=mock(NotificationTransport.class);
  DefaultNotificationManager notificationManager=new DefaultNotificationManager(state,transport);
  List<Topic> topicsUpdate=Arrays.asList(new Topic("id1","topic_name1",SubscriptionType.OPTIONAL),new Topic("id2","topic_name1",SubscriptionType.OPTIONAL),new Topic("id3","topic_name1",SubscriptionType.OPTIONAL));
  notificationManager.topicsListUpdated(topicsUpdate);
  NotificationListener listener1=Mockito.mock(NotificationListener.class);
  NotificationListener listener2=Mockito.mock(NotificationListener.class);
  Map<String,List<NotificationListenerInfo>> subscribers1=new HashMap<>();
  subscribers1.put("id1",Arrays.asList(new NotificationListenerInfo(listener1,NotificationListenerInfo.Action.ADD)));
  subscribers1.put("id2",Arrays.asList(new NotificationListenerInfo(listener2,NotificationListenerInfo.Action.ADD)));
  notificationManager.updateTopicSubscriptions(subscribers1);
  List<Notification> notificationUpdate=Arrays.asList(new Notification("id1",NotificationType.CUSTOM,null,1,null),new Notification("id2",NotificationType.CUSTOM,null,1,null));
  notificationManager.notificationReceived(notificationUpdate);
  Map<String,List<NotificationListenerInfo>> subscribers2=new HashMap<>();
  subscribers2.put("id2",Arrays.asList(new NotificationListenerInfo(listener2,NotificationListenerInfo.Action.REMOVE)));
  notificationManager.updateTopicSubscriptions(subscribers2);
  notificationManager.notificationReceived(notificationUpdate);
  Mockito.verify(listener1,Mockito.times(2)).onNotificationRaw(Mockito.anyString(),Mockito.any(ByteBuffer.class));
  Mockito.verify(listener2,Mockito.times(1)).onNotificationRaw(Mockito.anyString(),Mockito.any(ByteBuffer.class));
}
