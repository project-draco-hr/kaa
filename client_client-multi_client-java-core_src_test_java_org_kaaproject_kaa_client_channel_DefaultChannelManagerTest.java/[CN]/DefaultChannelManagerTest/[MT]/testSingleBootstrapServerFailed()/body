{
  Map<TransportProtocolId,List<TransportConnectionInfo>> bootststrapServers=new HashMap<>();
  bootststrapServers.put(TransportProtocolIdConstants.HTTP_TRANSPORT_ID,Arrays.asList(IPTransportInfoTest.createTestServerInfo(ServerType.BOOTSTRAP,TransportProtocolIdConstants.HTTP_TRANSPORT_ID,"localhost",9889,KeyUtil.generateKeyPair().getPublic())));
  BootstrapManager bootstrapManager=Mockito.mock(BootstrapManager.class);
  KaaDataChannel channel=Mockito.mock(KaaDataChannel.class);
  Mockito.when(channel.getSupportedTransportTypes()).thenReturn(SUPPORTED_TYPES);
  Mockito.when(channel.getTransportProtocolId()).thenReturn(TransportProtocolIdConstants.HTTP_TRANSPORT_ID);
  Mockito.when(channel.getServerType()).thenReturn(ServerType.BOOTSTRAP);
  Mockito.when(channel.getId()).thenReturn("mock_channel");
  KaaChannelManager channelManager=new DefaultChannelManager(bootstrapManager,bootststrapServers,CONTEXT,null);
  FailoverManager failoverManager=Mockito.spy(new DefaultFailoverManager(channelManager,CONTEXT));
  channelManager.setFailoverManager(failoverManager);
  channelManager.addChannel(channel);
  Mockito.verify(failoverManager,Mockito.times(1)).onServerChanged(Mockito.any(TransportConnectionInfo.class));
  channelManager.onServerFailed(bootststrapServers.get(TransportProtocolIdConstants.HTTP_TRANSPORT_ID).get(0));
}
