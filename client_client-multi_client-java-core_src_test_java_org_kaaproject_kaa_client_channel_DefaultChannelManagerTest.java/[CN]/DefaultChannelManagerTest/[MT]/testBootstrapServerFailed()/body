{
  final Map<TransportProtocolId,List<TransportConnectionInfo>> bootststrapServers=new HashMap<>();
  bootststrapServers.put(TransportProtocolIdConstants.HTTP_TRANSPORT_ID,Arrays.asList(IPTransportInfoTest.createTestServerInfo(ServerType.BOOTSTRAP,TransportProtocolIdConstants.HTTP_TRANSPORT_ID,"localhost",9889,KeyUtil.generateKeyPair().getPublic()),IPTransportInfoTest.createTestServerInfo(ServerType.BOOTSTRAP,TransportProtocolIdConstants.HTTP_TRANSPORT_ID,"localhost2",9889,KeyUtil.generateKeyPair().getPublic())));
  BootstrapManager bootstrapManager=Mockito.mock(BootstrapManager.class);
  final KaaDataChannel channel=Mockito.mock(KaaDataChannel.class);
  Mockito.when(channel.getSupportedTransportTypes()).thenReturn(SUPPORTED_TYPES);
  Mockito.when(channel.getTransportProtocolId()).thenReturn(TransportProtocolIdConstants.HTTP_TRANSPORT_ID);
  Mockito.when(channel.getServerType()).thenReturn(ServerType.BOOTSTRAP);
  Mockito.when(channel.getId()).thenReturn("mock_channel");
  ExecutorContext context=Mockito.mock(ExecutorContext.class);
  Mockito.when(context.getScheduledExecutor()).thenReturn(Executors.newScheduledThreadPool(1));
  KaaChannelManager channelManager=new DefaultChannelManager(bootstrapManager,bootststrapServers,context);
  FailoverStrategy failoverStrategy=new DefaultFailoverStrategy(1,1,1,TimeUnit.MILLISECONDS);
  FailoverManager failoverManager=Mockito.spy(new DefaultFailoverManager(channelManager,CONTEXT,failoverStrategy,1,TimeUnit.MILLISECONDS));
  channelManager.setFailoverManager(failoverManager);
  channelManager.addChannel(channel);
  Mockito.verify(failoverManager,Mockito.times(1)).onServerChanged(Mockito.any(TransportConnectionInfo.class));
  channelManager.onServerFailed(bootststrapServers.get(TransportProtocolIdConstants.HTTP_TRANSPORT_ID).get(0));
  new Thread(new Runnable(){
    @Override public void run(){
      Mockito.verify(channel,Mockito.timeout(100).times(1)).setServer(bootststrapServers.get(TransportProtocolIdConstants.HTTP_TRANSPORT_ID).get(1));
    }
  }
);
  Mockito.verify(failoverManager,Mockito.times(1)).onFailover(FailoverStatus.CURRENT_BOOTSTRAP_SERVER_NA);
}
