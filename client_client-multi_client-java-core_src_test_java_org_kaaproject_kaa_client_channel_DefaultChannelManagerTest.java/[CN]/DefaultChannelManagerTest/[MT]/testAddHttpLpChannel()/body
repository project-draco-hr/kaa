{
  List<BootstrapServerInfo> bootststrapServers=new LinkedList<>();
  bootststrapServers.add(new BootstrapServerInfo("localhost",9889,KeyUtil.generateKeyPair().getPublic()));
  BootstrapManager bootstrapManager=Mockito.mock(BootstrapManager.class);
  KaaDataChannel channel=Mockito.mock(KaaDataChannel.class);
  Mockito.when(channel.getSupportedTransportTypes()).thenReturn(SUPPORTED_TYPES);
  Mockito.when(channel.getType()).thenReturn(ChannelType.HTTP_LP);
  Mockito.when(channel.getId()).thenReturn("mock_channel");
  KaaChannelManager channelManager=new DefaultChannelManager(bootstrapManager,bootststrapServers);
  channelManager.addChannel(channel);
  channelManager.addChannel(channel);
  ServerInfo opServer=new HttpLongPollServerInfo("localhost",9999,KeyUtil.generateKeyPair().getPublic());
  channelManager.onServerUpdated(opServer);
  assertEquals(channel,channelManager.getChannelByTransportType(TransportType.PROFILE));
  assertEquals(channel,channelManager.getChannel("mock_channel"));
  assertEquals(channel,channelManager.getChannels().get(0));
  assertEquals(channel,channelManager.getChannelsByType(ChannelType.HTTP_LP).get(0));
  channelManager.removeChannel(channel);
  assertNull(channelManager.getChannelByTransportType(TransportType.PROFILE));
  assertNull(channelManager.getChannel("mock_channel"));
  assertTrue(channelManager.getChannels().isEmpty());
  assertTrue(channelManager.getChannelsByType(ChannelType.HTTP_LP).isEmpty());
  channelManager.addChannel(channel);
  Mockito.verify(channel,Mockito.times(2)).setServer(opServer);
  channelManager.clearChannelList();
  assertTrue(channelManager.getChannels().isEmpty());
}
