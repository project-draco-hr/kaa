{
  Map<TransportProtocolId,List<TransportConnectionInfo>> bootststrapServers=new HashMap<>();
  bootststrapServers.put(TransportProtocolIdConstants.HTTP_TRANSPORT_ID,Collections.singletonList(IPTransportInfoTest.createTestServerInfo(ServerType.BOOTSTRAP,TransportProtocolIdConstants.HTTP_TRANSPORT_ID,"localhost",9889,KeyUtil.generateKeyPair().getPublic())));
  BootstrapManager bootstrapManager=Mockito.mock(BootstrapManager.class);
  KaaDataChannel channel=Mockito.mock(KaaDataChannel.class);
  Mockito.when(channel.getSupportedTransportTypes()).thenReturn(SUPPORTED_TYPES);
  Mockito.when(channel.getTransportProtocolId()).thenReturn(TransportProtocolIdConstants.HTTP_TRANSPORT_ID);
  Mockito.when(channel.getServerType()).thenReturn(ServerType.OPERATIONS);
  Mockito.when(channel.getId()).thenReturn("mock_channel");
  KaaInternalChannelManager channelManager=new DefaultChannelManager(bootstrapManager,bootststrapServers,null);
  FailoverManager failoverManager=Mockito.spy(new DefaultFailoverManager(channelManager,CONTEXT));
  channelManager.setFailoverManager(failoverManager);
  channelManager.addChannel(channel);
  channelManager.addChannel(channel);
  TransportConnectionInfo server=IPTransportInfoTest.createTestServerInfo(ServerType.OPERATIONS,TransportProtocolIdConstants.HTTP_TRANSPORT_ID,"localhost",9999,KeyUtil.generateKeyPair().getPublic());
  channelManager.onTransportConnectionInfoUpdated(server);
  Mockito.verify(failoverManager,Mockito.times(1)).onServerChanged(Mockito.any(TransportConnectionInfo.class));
  assertEquals(channel,channelManager.getChannel("mock_channel"));
  assertEquals(channel,channelManager.getChannels().get(0));
  channelManager.removeChannel(channel);
  assertNull(channelManager.getChannel("mock_channel"));
  assertTrue(channelManager.getChannels().isEmpty());
  channelManager.addChannel(channel);
  Mockito.verify(failoverManager,Mockito.times(2)).onServerChanged(Mockito.any(TransportConnectionInfo.class));
  Mockito.verify(channel,Mockito.times(2)).setServer(server);
  channelManager.clearChannelList();
  assertTrue(channelManager.getChannels().isEmpty());
}
