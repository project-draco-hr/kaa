{
  Map<ChannelType,List<ServerInfo>> bootststrapServers=new HashMap<>();
  bootststrapServers.put(ChannelType.HTTP,Arrays.asList((ServerInfo)new HttpServerInfo(ServerType.BOOTSTRAP,"localhost",9889,KeyUtil.generateKeyPair().getPublic())));
  BootstrapManager bootstrapManager=Mockito.mock(BootstrapManager.class);
  Map<TransportType,ChannelDirection> typesForChannel2=new HashMap<>(SUPPORTED_TYPES);
  typesForChannel2.remove(TransportType.USER);
  KaaDataChannel channel1=Mockito.mock(KaaDataChannel.class);
  Mockito.when(channel1.getSupportedTransportTypes()).thenReturn(typesForChannel2);
  Mockito.when(channel1.getType()).thenReturn(ChannelType.HTTP_LP);
  Mockito.when(channel1.getServerType()).thenReturn(ServerType.OPERATIONS);
  Mockito.when(channel1.getId()).thenReturn("mock_channel");
  KaaDataChannel channel2=Mockito.mock(KaaDataChannel.class);
  Mockito.when(channel2.getSupportedTransportTypes()).thenReturn(SUPPORTED_TYPES);
  Mockito.when(channel2.getType()).thenReturn(ChannelType.HTTP);
  Mockito.when(channel2.getServerType()).thenReturn(ServerType.OPERATIONS);
  Mockito.when(channel2.getId()).thenReturn("mock_channel2");
  KaaDataChannel channel3=Mockito.mock(KaaDataChannel.class);
  Mockito.when(channel3.getSupportedTransportTypes()).thenReturn(typesForChannel2);
  Mockito.when(channel3.getType()).thenReturn(ChannelType.KAATCP);
  Mockito.when(channel3.getServerType()).thenReturn(ServerType.OPERATIONS);
  Mockito.when(channel3.getId()).thenReturn("mock_tcp_channel3");
  KaaChannelManager channelManager=new DefaultChannelManager(bootstrapManager,bootststrapServers);
  channelManager.addChannel(channel1);
  channelManager.addChannel(channel2);
  ServerInfo opServer=new HttpLongPollServerInfo(ServerType.OPERATIONS,"localhost",9999,KeyUtil.generateKeyPair().getPublic());
  channelManager.onServerUpdated(opServer);
  ServerInfo opServer2=new HttpServerInfo(ServerType.OPERATIONS,"localhost",9889,KeyUtil.generateKeyPair().getPublic());
  channelManager.onServerUpdated(opServer2);
  Mockito.verify(channel1,Mockito.times(1)).setServer(opServer);
  Mockito.verify(channel2,Mockito.times(1)).setServer(opServer2);
  assertEquals(channel2,channelManager.getChannelByTransportType(TransportType.PROFILE));
  channelManager.removeChannel(channel2);
  ServerInfo opServer3=new KaaTcpServerInfo(ServerType.OPERATIONS,"localhost",9009,KeyUtil.generateKeyPair().getPublic());
  channelManager.addChannel(channel3);
  channelManager.onServerUpdated(opServer3);
  Mockito.verify(channel3,Mockito.times(1)).setServer(opServer3);
  assertEquals(channel3,channelManager.getChannelByTransportType(TransportType.PROFILE));
  assertNull(channelManager.getChannelByTransportType(TransportType.USER));
}
