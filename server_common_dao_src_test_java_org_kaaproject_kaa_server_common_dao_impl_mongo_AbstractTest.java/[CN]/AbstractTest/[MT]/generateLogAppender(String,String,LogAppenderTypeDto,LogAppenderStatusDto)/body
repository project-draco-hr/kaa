{
  LogAppenderDto logAppender=null;
  ApplicationDto app=null;
  LogSchemaDto schema=null;
  if (isBlank(appId)) {
    app=generateApplication();
    appId=app.getId();
  }
 else {
    app=applicationDao.findById(appId).toDto();
  }
  if (isBlank(schemaId)) {
    schema=generateLogSchema(appId,1).get(0);
    schemaId=schema.getId();
  }
  logAppender=new LogAppenderDto();
  logAppender.setApplicationId(appId);
  logAppender.setName("Generated Appender");
  logAppender.setSchema(new SchemaDto(schemaId,schema.getMajorVersion(),schema.getMinorVersion()));
  logAppender.setTenantId(app.getTenantId());
  logAppender.setStatus(status != null ? status : LogAppenderStatusDto.REGISTERED);
  logAppender.setType(type != null ? type : LogAppenderTypeDto.FILE);
  LogAppenderParametersDto parameters=new LogAppenderParametersDto();
switch (logAppender.getType()) {
case FILE:
    parameters.setParameters(new FileAppenderParametersDto("testPath"));
  break;
case FLUME:
FlumeAppenderParametersDto flumeProp=new FlumeAppenderParametersDto();
flumeProp.setBalancingType(FlumeBalancingTypeDto.PRIORITIZED);
HostInfoDto host=new HostInfoDto(DEFAULT_FLUME_HOST,DEFAULT_FLUME_PORT,DEFAULT_FLUME_PRIORITY);
flumeProp.setHosts(Arrays.asList(host));
parameters.setParameters(flumeProp);
break;
case MONGO:
parameters.setParameters(new MongoAppenderParametersDto("testCollections"));
break;
}
logAppender.setProperties(parameters);
return logAppendersService.saveLogAppender(logAppender);
}
