{
  float prefWidth=0;
  prefWidth+=constructStringColumn(table,Utils.constants.fqn(),new StringValueProvider<CTLSchemaMetaInfoDto>(){
    @Override public String getValue(    CTLSchemaMetaInfoDto item){
      return item.getFqn();
    }
  }
,new Comparator<CTLSchemaMetaInfoDto>(){
    @Override public int compare(    CTLSchemaMetaInfoDto o1,    CTLSchemaMetaInfoDto o2){
      return o1.getFqn().compareTo(o2.getFqn());
    }
  }
,Boolean.TRUE,true,200);
  prefWidth+=constructStringColumn(table,Utils.constants.scope(),new StringValueProvider<CTLSchemaMetaInfoDto>(){
    @Override public String getValue(    CTLSchemaMetaInfoDto item){
      return Utils.getCtlScopeString(item.getScope());
    }
  }
,new Comparator<CTLSchemaMetaInfoDto>(){
    @Override public int compare(    CTLSchemaMetaInfoDto o1,    CTLSchemaMetaInfoDto o2){
      return Utils.getCtlScopeString(o1.getScope()).compareTo(Utils.getCtlScopeString(o2.getScope()));
    }
  }
,Boolean.TRUE,true,40);
  prefWidth+=constructStringColumn(table,Utils.constants.versionsCount(),new StringValueProvider<CTLSchemaMetaInfoDto>(){
    @Override public String getValue(    CTLSchemaMetaInfoDto item){
      return item.getVersions().size() + "";
    }
  }
,new Comparator<CTLSchemaMetaInfoDto>(){
    @Override public int compare(    CTLSchemaMetaInfoDto o1,    CTLSchemaMetaInfoDto o2){
      return o1.getVersions().size() - o2.getVersions().size();
    }
  }
,Boolean.TRUE,false,40);
  prefWidth+=constructStringColumn(table,Utils.constants.maxVersion(),new StringValueProvider<CTLSchemaMetaInfoDto>(){
    @Override public String getValue(    CTLSchemaMetaInfoDto item){
      return Collections.max(item.getVersions()) + "";
    }
  }
,new Comparator<CTLSchemaMetaInfoDto>(){
    @Override public int compare(    CTLSchemaMetaInfoDto o1,    CTLSchemaMetaInfoDto o2){
      return Collections.max(o1.getVersions()) - Collections.max(o2.getVersions());
    }
  }
,Boolean.TRUE,false,40);
  return prefWidth;
}
