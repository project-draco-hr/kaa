{
  super(false,true);
  this.applicationId=applicationId;
  this.aefMaps=aefMaps;
  setWidth("500px");
  setTitle(Utils.constants.generate_sdk());
  VerticalPanel dialogContents=new VerticalPanel();
  dialogContents.setSpacing(4);
  setWidget(dialogContents);
  errorPanel=new AlertPanel(AlertPanel.Type.ERROR);
  errorPanel.setVisible(false);
  dialogContents.add(errorPanel);
  FlexTable table=new FlexTable();
  table.setCellSpacing(6);
  int row=0;
  ValueChangeHandler<SchemaDto> schemaValueChangeHandler=new ValueChangeHandler<SchemaDto>(){
    @Override public void onValueChange(    ValueChangeEvent<SchemaDto> event){
      fireChanged();
    }
  }
;
  Widget label=new Label(Utils.constants.configurationSchemaVersion());
  label.addStyleName("required");
  configurationSchemaVersion=new SchemaListBox();
  configurationSchemaVersion.setWidth("80px");
  configurationSchemaVersion.setAcceptableValues(schemaVersions.getConfigurationSchemaVersions());
  configurationSchemaVersion.addValueChangeHandler(schemaValueChangeHandler);
  table.setWidget(row,0,label);
  table.setWidget(row,1,configurationSchemaVersion);
  table.getCellFormatter().setHorizontalAlignment(row,0,HasHorizontalAlignment.ALIGN_RIGHT);
  row++;
  label=new Label(Utils.constants.profileSchemaVersion());
  label.addStyleName("required");
  profileSchemaVersion=new SchemaListBox();
  profileSchemaVersion.setWidth("80px");
  profileSchemaVersion.setAcceptableValues(schemaVersions.getProfileSchemaVersions());
  profileSchemaVersion.addValueChangeHandler(schemaValueChangeHandler);
  table.setWidget(row,0,label);
  table.setWidget(row,1,profileSchemaVersion);
  table.getCellFormatter().setHorizontalAlignment(row,0,HasHorizontalAlignment.ALIGN_RIGHT);
  row++;
  label=new Label(Utils.constants.notificationSchemaVersion());
  label.addStyleName("required");
  notificationSchemaVersion=new SchemaListBox();
  notificationSchemaVersion.setWidth("80px");
  notificationSchemaVersion.setAcceptableValues(schemaVersions.getNotificationSchemaVersions());
  notificationSchemaVersion.addValueChangeHandler(schemaValueChangeHandler);
  table.setWidget(row,0,label);
  table.setWidget(row,1,notificationSchemaVersion);
  table.getCellFormatter().setHorizontalAlignment(row,0,HasHorizontalAlignment.ALIGN_RIGHT);
  row++;
  label=new Label(Utils.constants.logSchemaVersion());
  label.addStyleName("required");
  logSchemaVersion=new SchemaListBox();
  logSchemaVersion.setWidth("80px");
  logSchemaVersion.setAcceptableValues(schemaVersions.getLogSchemaVersions());
  logSchemaVersion.addValueChangeHandler(schemaValueChangeHandler);
  table.setWidget(row,0,label);
  table.setWidget(row,1,logSchemaVersion);
  table.getCellFormatter().setHorizontalAlignment(row,0,HasHorizontalAlignment.ALIGN_RIGHT);
  row++;
  label=new Label(Utils.constants.targetPlatform());
  label.addStyleName("required");
  Renderer<SdkPlatform> targetPlatformRenderer=new Renderer<SdkPlatform>(){
    @Override public String render(    SdkPlatform object){
      if (object != null) {
        return Utils.constants.getString(object.getResourceKey());
      }
 else {
        return "";
      }
    }
    @Override public void render(    SdkPlatform object,    Appendable appendable) throws IOException {
      appendable.append(render(object));
    }
  }
;
  targetPlatform=new ValueListBox<>(targetPlatformRenderer);
  targetPlatform.setWidth("80px");
  targetPlatform.setAcceptableValues(Arrays.asList(SdkPlatform.values()));
  targetPlatform.addValueChangeHandler(new ValueChangeHandler<SdkPlatform>(){
    @Override public void onValueChange(    ValueChangeEvent<SdkPlatform> event){
      fireChanged();
    }
  }
);
  table.setWidget(row,0,label);
  table.setWidget(row,1,targetPlatform);
  table.getCellFormatter().setHorizontalAlignment(row,0,HasHorizontalAlignment.ALIGN_RIGHT);
  row++;
  FlexTable ecfsTable=new FlexTable();
  ecfsTable.setCellSpacing(6);
  availableAefMaps=new MultiAefMapListBox();
  selectedAefMaps=new MultiAefMapListBox();
  addAefMapButton=new Button(Utils.constants.add());
  removeAefMapButton=new Button(Utils.constants.remove());
  VerticalPanel availableEcfsPanel=new VerticalPanel();
  availableEcfsPanel.setSpacing(6);
  Label availableLabel=new Label(Utils.constants.available());
  availableEcfsPanel.add(availableLabel);
  availableEcfsPanel.add(availableAefMaps);
  VerticalPanel ecfButtonsPanel=new VerticalPanel();
  ecfButtonsPanel.setSpacing(6);
  ecfButtonsPanel.setVerticalAlignment(HasVerticalAlignment.ALIGN_MIDDLE);
  ecfButtonsPanel.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
  ecfButtonsPanel.add(addAefMapButton);
  ecfButtonsPanel.add(removeAefMapButton);
  VerticalPanel selectedEcfsPanel=new VerticalPanel();
  selectedEcfsPanel.setSpacing(6);
  Label selectedLabel=new Label(Utils.constants.selected());
  selectedEcfsPanel.add(selectedLabel);
  selectedEcfsPanel.add(selectedAefMaps);
  ecfsTable.setWidget(0,0,availableEcfsPanel);
  ecfsTable.setWidget(0,1,ecfButtonsPanel);
  ecfsTable.setWidget(0,2,selectedEcfsPanel);
  DisclosurePanel ecfsDisclosure=new DisclosurePanel(Utils.constants.ecfs());
  ecfsDisclosure.setAnimationEnabled(true);
  ecfsDisclosure.setContent(ecfsTable);
  aefMapComparator=new AefMapInfoDtoComparator();
  Collections.sort(aefMaps,aefMapComparator);
  availableAefMaps.setAcceptableValues(aefMaps);
  addAefMapButton.addStyleName("b-app-button-small");
  removeAefMapButton.addStyleName("b-app-button-small");
  addAefMapButton.setEnabled(false);
  removeAefMapButton.setEnabled(false);
  addAefMapButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      addAefMap();
    }
  }
);
  removeAefMapButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      removeAefMap();
    }
  }
);
  availableAefMaps.setSize("150px","100px");
  selectedAefMaps.setSize("150px","100px");
  availableAefMaps.addValueChangeHandler(new ValueChangeHandler<List<AefMapInfoDto>>(){
    @Override public void onValueChange(    ValueChangeEvent<List<AefMapInfoDto>> event){
      updateAefMapButtons();
    }
  }
);
  selectedAefMaps.addValueChangeHandler(new ValueChangeHandler<List<AefMapInfoDto>>(){
    @Override public void onValueChange(    ValueChangeEvent<List<AefMapInfoDto>> event){
      updateAefMapButtons();
    }
  }
);
  dialogContents.add(table);
  dialogContents.add(ecfsDisclosure);
  generateSdkButton=new Button(Utils.constants.generate_sdk(),new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      performGenerateSdk();
    }
  }
);
  Button closeButton=new Button(Utils.constants.close(),new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      hide();
    }
  }
);
  addButton(generateSdkButton);
  addButton(closeButton);
  generateSdkButton.setEnabled(false);
}
