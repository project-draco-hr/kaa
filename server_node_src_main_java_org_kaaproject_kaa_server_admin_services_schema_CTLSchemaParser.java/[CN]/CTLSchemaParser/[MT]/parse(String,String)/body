{
  CTLSchemaDto schema=new CTLSchemaDto();
  CTLSchemaMetaInfoDto metaInfo=new CTLSchemaMetaInfoDto();
  String fqn=null;
  ObjectNode object=new ObjectMapper().readValue(body,ObjectNode.class);
  if (!object.has(TYPE) || !object.get(TYPE).isTextual() || !object.get(TYPE).getTextValue().equals("record")) {
    throw new IllegalArgumentException("The data provided is not a record!");
  }
  if (!object.has(NAMESPACE) || !object.get(NAMESPACE).isTextual()) {
    throw new IllegalArgumentException("No namespace specified!");
  }
 else   if (!object.has(NAME) || !object.get(NAME).isTextual()) {
    throw new IllegalArgumentException("No name specified!");
  }
 else {
    fqn=object.get(NAMESPACE).getTextValue() + "." + object.get(NAME).getTextValue();
  }
  metaInfo=new CTLSchemaMetaInfoDto(fqn,tenantId,applicationId);
  schema.setMetaInfo(metaInfo);
  if (!object.has(VERSION) || !object.get(VERSION).isInt()) {
    object.put(VERSION,1);
  }
  schema.setVersion(object.get(VERSION).asInt());
  Set<CTLSchemaDto> dependencies=new HashSet<>();
  List<FqnVersion> missingDependencies=new ArrayList<>();
  if (!object.has(DEPENDENCIES)) {
    schema.setDependencySet(dependencies);
  }
 else   if (!object.get(DEPENDENCIES).isArray()) {
    throw new IllegalArgumentException("Illegal dependencies format!");
  }
 else {
    for (    JsonNode child : object.get(DEPENDENCIES)) {
      if (!child.isObject() || !child.has(FQN) || !child.get(FQN).isTextual()|| !child.has(VERSION)|| !child.get(VERSION).isInt()) {
        throw new IllegalArgumentException("Illegal dependency format!");
      }
 else {
        String dependencyFqn=child.get(FQN).asText();
        int dependencyVersion=child.get(VERSION).asInt();
        CTLSchemaDto dependency=controlService.getAnyCTLSchemaByFqnVersionTenantIdAndApplicationId(dependencyFqn,dependencyVersion,tenantId,applicationId);
        if (dependency != null) {
          dependencies.add(dependency);
        }
 else {
          missingDependencies.add(new FqnVersion(dependencyFqn,dependencyVersion));
        }
      }
    }
    if (!missingDependencies.isEmpty()) {
      String message="The following dependencies are missing from the database: " + Arrays.toString(missingDependencies.toArray());
      throw new IllegalArgumentException(message);
    }
    schema.setDependencySet(dependencies);
  }
  body=new ObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(object);
  schema.setBody(body);
  return schema;
}
