{
  CTLSchemaInfoDto schema=new CTLSchemaInfoDto();
  schema.setTenantId(tenantId);
  schema.setApplicationId(applicationId);
  schema.setScope(detectScope(scope,applicationId));
  ObjectNode object=new ObjectMapper().readValue(body,ObjectNode.class);
  if (!object.has("type") || !object.get("type").isTextual() || !object.get("type").getTextValue().equals("record")) {
    throw new IllegalArgumentException("The data provided is not a record!");
  }
  if (!object.has("namespace") || !object.get("namespace").isTextual()) {
    throw new IllegalArgumentException("No namespace specified!");
  }
 else   if (!object.has("name") || !object.get("name").isTextual()) {
    throw new IllegalArgumentException("No name specified!");
  }
 else {
    schema.setFqn(object.get("namespace").getTextValue() + "." + object.get("name").getTextValue());
  }
  if (!object.has("version") || !object.get("version").isInt()) {
    object.put("version",1);
  }
  schema.setVersion(object.get("version").asInt());
  Set<CTLSchemaMetaInfoDto> dependencies=new HashSet<>();
  if (!object.has("dependencies")) {
    schema.setDependencies(dependencies);
  }
 else   if (!object.get("dependencies").isArray()) {
    throw new IllegalArgumentException("Illegal dependencies format!");
  }
 else {
    for (    JsonNode child : object.get("dependencies")) {
      if (!child.isObject() || !child.has("fqn") || !child.get("fqn").isTextual()|| !child.has("version")|| !child.get("version").isInt()) {
        throw new IllegalArgumentException("Illegal dependency format!");
      }
 else {
        dependencies.add(new CTLSchemaMetaInfoDto(child.get("fqn").asText(),child.get("version").asInt()));
      }
      schema.setDependencies(dependencies);
    }
  }
  body=new ObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(object);
  schema.setBody(body);
  return schema;
}
