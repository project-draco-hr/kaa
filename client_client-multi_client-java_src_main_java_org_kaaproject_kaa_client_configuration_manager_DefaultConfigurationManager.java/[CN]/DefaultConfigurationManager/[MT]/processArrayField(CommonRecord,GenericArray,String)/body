{
  List<CommonValue> currentArray;
  CommonValue arrayValue=record.getField(fieldName);
  if (arrayValue != null && arrayValue.isArray()) {
    currentArray=arrayValue.getArray().getList();
  }
 else {
    currentArray=new LinkedList<CommonValue>();
    record.setField(fieldName,commonFactory.createCommonValue(commonFactory.createCommonArray(array.getSchema(),currentArray)));
  }
  if (!array.isEmpty()) {
    Object rawItem=array.get(0);
    if (AvroGenericUtils.isRecord(rawItem)) {
      GenericArray<GenericRecord> recordItems=(GenericArray<GenericRecord>)array;
      for (      GenericRecord item : recordItems) {
        CommonRecord newRecord=createCommonRecord(item);
        updateRecord(newRecord,item);
        currentArray.add(commonFactory.createCommonValue(newRecord));
      }
    }
 else     if (AvroGenericUtils.isFixed(rawItem)) {
      GenericArray<GenericFixed> fixedItems=(GenericArray<GenericFixed>)array;
      if (AvroGenericUtils.isUuid(rawItem)) {
        for (        GenericFixed item : fixedItems) {
          UUID currentUuid=AvroGenericUtils.createUuidFromFixed(item);
          Iterator<CommonValue> valueIt=currentArray.iterator();
          while (valueIt.hasNext()) {
            CommonRecord currentRecord=valueIt.next().getRecord();
            if (currentRecord.getUuid().equals(currentUuid)) {
              valueIt.remove();
              records.remove(currentUuid);
              break;
            }
          }
        }
      }
 else {
        for (        GenericFixed item : fixedItems) {
          currentArray.add(commonFactory.createCommonValue(commonFactory.createCommonFixed(item.getSchema(),item.bytes())));
        }
      }
    }
 else {
      for (      Object item : array) {
        currentArray.add(commonFactory.createCommonValue(item));
      }
    }
  }
}
