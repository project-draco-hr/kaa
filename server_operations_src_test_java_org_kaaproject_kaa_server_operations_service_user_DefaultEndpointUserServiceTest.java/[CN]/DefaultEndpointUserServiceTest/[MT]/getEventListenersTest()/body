{
  EventListenersRequest request=new EventListenersRequest();
  request.setEventClassFQNs(Arrays.asList("fqn2","fqn3"));
  request.setRequestId(REQUEST_ID);
  EndpointProfileDto profileMock=mock(EndpointProfileDto.class);
  EndpointProfileDto listener1Mock=mock(EndpointProfileDto.class);
  EndpointProfileDto listener2Mock=mock(EndpointProfileDto.class);
  EndpointProfileDto listener3Mock=mock(EndpointProfileDto.class);
  EventClassFamilyVersionStateDto ecfVdto=new EventClassFamilyVersionStateDto();
  ecfVdto.setEcfId(ECF1_ID);
  ecfVdto.setVersion(ECF1_VERSION);
  when(profileMock.getId()).thenReturn("A");
  when(profileMock.getEndpointUserId()).thenReturn(USER_ID);
  when(profileMock.getEndpointKeyHash()).thenReturn(ENDPOINT_KEY_HASH);
  when(profileMock.getEcfVersionStates()).thenReturn(Arrays.asList(ecfVdto));
  when(listener1Mock.getId()).thenReturn("B");
  when(listener1Mock.getEndpointKeyHash()).thenReturn(ENDPOINT_KEY_HASH1);
  when(listener1Mock.getEcfVersionStates()).thenReturn(Arrays.asList(ecfVdto));
  when(listener1Mock.getApplicationId()).thenReturn(TEST_APP_ID);
  when(listener2Mock.getId()).thenReturn("C");
  when(listener2Mock.getEndpointKeyHash()).thenReturn(ENDPOINT_KEY_HASH2);
  when(listener2Mock.getEcfVersionStates()).thenReturn(Arrays.asList(ecfVdto));
  when(listener2Mock.getApplicationId()).thenReturn(TEST_APP_ID2);
  when(listener3Mock.getId()).thenReturn("D");
  when(listener3Mock.getEndpointKeyHash()).thenReturn(ENDPOINT_KEY_HASH3);
  when(listener3Mock.getEcfVersionStates()).thenReturn(Arrays.asList(ecfVdto));
  when(listener3Mock.getApplicationId()).thenReturn(TEST_APP_ID3);
  when(endpointService.findEndpointProfilesByUserId(USER_ID)).thenReturn(Arrays.asList(profileMock,listener1Mock,listener2Mock,listener3Mock));
  when(cacheService.getTenantIdByAppToken(TEST_APP_TOKEN)).thenReturn(TEST_TENANT_ID);
  when(cacheService.getEventClassFamilyIdByEventClassFqn(new EventClassFqnKey(TEST_TENANT_ID,"fqn2"))).thenReturn(ECF1_ID);
  when(cacheService.getEventClassFamilyIdByEventClassFqn(new EventClassFqnKey(TEST_TENANT_ID,"fqn3"))).thenReturn(ECF1_ID);
  when(cacheService.getAppSeqNumber(TEST_APP_TOKEN)).thenReturn(new AppSeqNumber(TEST_TENANT_ID,TEST_APP_ID,TEST_APP_TOKEN,TEST_APP_SEQ_NUM));
  when(cacheService.getAppSeqNumber(TEST_APP_TOKEN2)).thenReturn(new AppSeqNumber(TEST_TENANT_ID,TEST_APP_ID2,TEST_APP_TOKEN2,TEST_APP_SEQ_NUM));
  when(cacheService.getAppSeqNumber(TEST_APP_TOKEN3)).thenReturn(new AppSeqNumber(TEST_TENANT_ID,TEST_APP_ID3,TEST_APP_TOKEN3,TEST_APP_SEQ_NUM));
  RouteTableKey key1=new RouteTableKey(TEST_APP_TOKEN,new EventClassFamilyVersion(ECF1_ID,ECF1_VERSION));
  RouteTableKey key2=new RouteTableKey(TEST_APP_TOKEN2,new EventClassFamilyVersion(ECF1_ID,ECF1_VERSION));
  RouteTableKey key3=new RouteTableKey(TEST_APP_TOKEN3,new EventClassFamilyVersion(ECF1_ID,ECF1_VERSION));
  HashSet<RouteTableKey> fqn2Keys=new HashSet<>();
  fqn2Keys.add(key1);
  fqn2Keys.add(key2);
  fqn2Keys.add(key3);
  HashSet<RouteTableKey> fqn3Keys=new HashSet<>();
  fqn3Keys.add(key1);
  fqn3Keys.add(key2);
  when(cacheService.getRouteKeys(new EventClassFqnVersion(TEST_TENANT_ID,"fqn2",ECF1_VERSION))).thenReturn(fqn2Keys);
  when(cacheService.getRouteKeys(new EventClassFqnVersion(TEST_TENANT_ID,"fqn3",ECF1_VERSION))).thenReturn(fqn3Keys);
  EventListenersResponse response=endpointUserService.findListeners(profileMock,new AppSeqNumber(TEST_TENANT_ID,TEST_APP_ID,TEST_APP_TOKEN,TEST_APP_SEQ_NUM),request);
  assertNotNull(response);
  assertEquals(SyncResponseResultType.SUCCESS,response.getResult());
  assertEquals(REQUEST_ID,response.getRequestId());
  assertEquals(2,response.getListeners().size());
  assertTrue(response.getListeners().contains(Base64Util.encode(ENDPOINT_KEY_HASH1)));
  assertTrue(response.getListeners().contains(Base64Util.encode(ENDPOINT_KEY_HASH2)));
  assertFalse(response.getListeners().contains(Base64Util.encode(ENDPOINT_KEY_HASH3)));
  assertFalse(response.getListeners().contains(Base64Util.encode(ENDPOINT_KEY_HASH)));
}
