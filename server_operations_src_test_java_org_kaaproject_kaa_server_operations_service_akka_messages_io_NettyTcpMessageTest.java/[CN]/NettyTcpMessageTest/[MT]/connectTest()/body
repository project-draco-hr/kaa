{
  UUID channelId=UUID.randomUUID();
  ChannelHandlerContext ctx=Mockito.mock(ChannelHandlerContext.class);
  ChannelType channelType=ChannelType.TCP;
  CipherPair sessionKey=Mockito.mock(CipherPair.class);
  EndpointObjectHash key=EndpointObjectHash.fromSHA1("key");
  String applicationToken="AppToken";
  int keepAlive=100;
  NettySessionInfo session=new NettySessionInfo(channelId,AvroEncDec.AVRO_ENC_DEC_ID,ctx,channelType,sessionKey,key,applicationToken,keepAlive,true);
  Connect command=new Connect(keepAlive,Constants.KAA_PLATFORM_PROTOCOL_AVRO_ID,"aesSessionKey".getBytes(),"syncRequest".getBytes(),"signature".getBytes());
  SessionCreateListener listener=Mockito.mock(SessionCreateListener.class);
  ResponseBuilder responseBuilder=Mockito.mock(ResponseBuilder.class);
  ErrorBuilder errorBuilder=Mockito.mock(ErrorBuilder.class);
  SyncStatistics stats=Mockito.mock(SyncStatistics.class);
  NettyTcpConnectMessage message=new NettyTcpConnectMessage(channelId,AvroEncDec.AVRO_ENC_DEC_ID,ctx,command,channelType,listener,responseBuilder,errorBuilder,stats);
  Assert.assertEquals(channelId,message.getChannelUuid());
  Assert.assertEquals(channelType,message.getChannelType());
  Assert.assertEquals(ctx,message.getChannelContext());
  Assert.assertEquals(responseBuilder,message.getResponseBuilder());
  Assert.assertEquals(errorBuilder,message.getErrorBuilder());
  Assert.assertEquals(stats,message.getSyncStatistics());
  Assert.assertArrayEquals("syncRequest".getBytes(),message.getEncodedRequestData());
  Assert.assertArrayEquals("aesSessionKey".getBytes(),message.getEncodedSessionKey());
  Assert.assertArrayEquals("signature".getBytes(),message.getSessionKeySignature());
  message.onSessionCreated(session);
  Mockito.verify(listener).onSessionCreated(session);
  Assert.assertNotNull(message.toString());
}
