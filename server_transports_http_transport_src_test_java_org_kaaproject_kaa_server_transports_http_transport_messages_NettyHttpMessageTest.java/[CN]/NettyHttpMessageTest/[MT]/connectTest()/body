{
  UUID channelId=UUID.randomUUID();
  ChannelContext ctx=Mockito.mock(ChannelContext.class);
  ChannelType channelType=ChannelType.TCP;
  SyncCommand command=Mockito.mock(SyncCommand.class);
  Mockito.when(command.getRequestData()).thenReturn("syncRequest".getBytes());
  Mockito.when(command.getRequestkey()).thenReturn("aesSessionKey".getBytes());
  Mockito.when(command.getRequestSignature()).thenReturn("signature".getBytes());
  MessageBuilder responseBuilder=Mockito.mock(MessageBuilder.class);
  ErrorBuilder errorBuilder=Mockito.mock(ErrorBuilder.class);
  NettyHttpSyncMessage message=new NettyHttpSyncMessage(channelId,Constants.KAA_PLATFORM_PROTOCOL_AVRO_ID,ctx,channelType,command,responseBuilder,errorBuilder);
  Assert.assertEquals(channelId,message.getChannelUuid());
  Assert.assertEquals(channelType,message.getChannelType());
  Assert.assertEquals(ctx,message.getChannelContext());
  Assert.assertEquals(responseBuilder,message.getMessageBuilder());
  Assert.assertEquals(errorBuilder,message.getErrorBuilder());
  Assert.assertArrayEquals("syncRequest".getBytes(),message.getEncodedMessageData());
  Assert.assertArrayEquals("aesSessionKey".getBytes(),message.getEncodedSessionKey());
  Assert.assertArrayEquals("signature".getBytes(),message.getSessionKeySignature());
  Assert.assertNotNull(message.toString());
}
