{
  if (logger.isLoggable(Level.FINE)) {
    logger.fine("startConsole");
  }
  RPCSerializer rpc_serializer=GWT.create(RPCSerializer.class);
  if (atmosphere == null) {
    atmosphere=Atmosphere.create();
  }
  atmosphere.unsubscribe();
  AtmosphereRequestConfig rpcRequestConfig=AtmosphereRequestConfig.create(rpc_serializer);
  rpcRequestConfig.setUrl(GWT.getModuleBaseURL() + "atmosphere/rpc");
  rpcRequestConfig.setTransport(AtmosphereRequestConfig.Transport.WEBSOCKET);
  rpcRequestConfig.setFallbackTransport(AtmosphereRequestConfig.Transport.LONG_POLLING);
  rpcRequestConfig.setErrorHandler(new AtmosphereErrorHandler(){
    @Override public void onError(    AtmosphereResponse response){
      consoleSessionSucceded=false;
      ConsoleDialog.this.onError("Sorry, but there's some problem with your " + "socket or the server is down!\n");
    }
  }
);
  rpcRequestConfig.setMessageHandler(new AtmosphereMessageHandler(){
    @Override public void onMessage(    AtmosphereResponse response){
      if (logger.isLoggable(Level.FINE)) {
        logger.fine("onMessage, count: " + response.getMessages().size());
        if (response.getMessages().size() > 0) {
          Object message=response.getMessages().get(0);
          logger.fine("onMessage, class: " + message.getClass().getName());
        }
      }
      List<RPCEvent> messages=response.getMessages();
      for (      RPCEvent message : messages) {
        GWT.log("onMessage: " + message.getMessage());
        if (logger.isLoggable(Level.FINE)) {
          logger.fine("onMessage: " + message.getMessage());
        }
        if (consoleUuid == null || consoleUuid.length() == 0) {
          consoleUuid=message.getMessage();
          listener.onStart(consoleUuid,ConsoleDialog.this,new AsyncCallback<Void>(){
            @Override public void onFailure(            Throwable caught){
              rpcCallSucceded=false;
              onError(Utils.getErrorMessage(caught) + "\nFailed!");
            }
            @Override public void onSuccess(            Void result){
              rpcCallSucceded=true;
              appendToConsoleAtFinish("Finished!");
              ConsoleDialog.this.onSuccess();
            }
          }
);
        }
 else         if (message.getMessage().equals(consoleUuid + " finished")) {
          consoleSessionSucceded=true;
          atmosphere.unsubscribe();
          onSuccess();
        }
 else {
          appendToConsole(message.getMessage());
        }
      }
    }
  }
);
  rpcRequestConfig.setFlags(AtmosphereRequestConfig.Flags.enableProtocol);
  rpcRequestConfig.setFlags(AtmosphereRequestConfig.Flags.trackMessageLength);
  rpcRequestConfig.clearFlags(AtmosphereRequestConfig.Flags.dropAtmosphereHeaders);
  if (logger.isLoggable(Level.FINE)) {
    logger.fine("atmosphere.subscribe ...");
  }
  appendToConsole(initialMessage + "\n");
  atmosphere.subscribe(rpcRequestConfig);
  if (logger.isLoggable(Level.FINE)) {
    logger.fine("atmosphere.subscribed");
  }
}
