{
  List<LogEvent> events=new ArrayList<>();
  LogEvent event1=new LogEvent();
  event1.setLogData(LOG_DATA.getBytes(UTF_8));
  LogEvent event2=new LogEvent();
  event1.setLogData(LOG_DATA.getBytes(UTF_8));
  LogEvent event3=new LogEvent();
  event1.setLogData(LOG_DATA.getBytes(UTF_8));
  events.add(event1);
  events.add(event2);
  events.add(event3);
  List<LogSchemaDto> schemas=logSchemaService.findLogSchemasByAppId(applicationDto.getId());
  LogSchemaDto dto=schemas.get(0);
  LogSchema schema=new LogSchema(dto);
  int version=dto.getMajorVersion();
  LogEventPack logEventPack=new LogEventPack(ENDPOINT_KEY,DATE_CREATED,schema,events);
  logEventPack.setLogSchemaVersion(version);
  Map<String,ThreadLocal<GenericAvroConverter<GenericRecord>>> converters=new HashMap<>();
  GenericAvroConverter<GenericRecord> converter=new GenericAvroConverter<GenericRecord>(dto.getSchema()){
    @Override public GenericRecord decodeBinary(    byte[] bytes){
      return null;
    }
    @Override public String endcodeToJson(    GenericRecord record){
      return LOG_DATA;
    }
  }
;
  ThreadLocal<GenericAvroConverter<GenericRecord>> threadLocal=new ThreadLocal<GenericAvroConverter<GenericRecord>>();
  threadLocal.set(converter);
  converters.put(dto.getSchema(),threadLocal);
  ReflectionTestUtils.setField(logAppender,"converters",converters);
  Assert.assertEquals(0,MongoDBTestRunner.getDB().getCollection((String)ReflectionTestUtils.getField(logAppender,"collectionName")).count());
  logAppender.doAppend(logEventPack);
  Assert.assertEquals(3,MongoDBTestRunner.getDB().getCollection((String)ReflectionTestUtils.getField(logAppender,"collectionName")).count());
}
