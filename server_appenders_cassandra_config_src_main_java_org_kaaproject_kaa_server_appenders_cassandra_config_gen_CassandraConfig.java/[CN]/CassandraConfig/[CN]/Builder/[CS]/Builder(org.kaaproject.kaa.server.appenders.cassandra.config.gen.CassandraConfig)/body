{
  super(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.SCHEMA$);
  if (isValidValue(fields()[0],other.cassandraServers)) {
    this.cassandraServers=data().deepCopy(fields()[0].schema(),other.cassandraServers);
    fieldSetFlags()[0]=true;
  }
  if (isValidValue(fields()[1],other.keySpace)) {
    this.keySpace=data().deepCopy(fields()[1].schema(),other.keySpace);
    fieldSetFlags()[1]=true;
  }
  if (isValidValue(fields()[2],other.CassandraCredential)) {
    this.CassandraCredential=data().deepCopy(fields()[2].schema(),other.CassandraCredential);
    fieldSetFlags()[2]=true;
  }
  if (isValidValue(fields()[3],other.CassandraBatchType)) {
    this.CassandraBatchType=data().deepCopy(fields()[3].schema(),other.CassandraBatchType);
    fieldSetFlags()[3]=true;
  }
  if (isValidValue(fields()[4],other.CassandraSocketOption)) {
    this.CassandraSocketOption=data().deepCopy(fields()[4].schema(),other.CassandraSocketOption);
    fieldSetFlags()[4]=true;
  }
  if (isValidValue(fields()[5],other.CassandraWriteConsistencyLevel)) {
    this.CassandraWriteConsistencyLevel=data().deepCopy(fields()[5].schema(),other.CassandraWriteConsistencyLevel);
    fieldSetFlags()[5]=true;
  }
  if (isValidValue(fields()[6],other.CassandraCompression)) {
    this.CassandraCompression=data().deepCopy(fields()[6].schema(),other.CassandraCompression);
    fieldSetFlags()[6]=true;
  }
  if (isValidValue(fields()[7],other.CassandraExecuteRequestType)) {
    this.CassandraExecuteRequestType=data().deepCopy(fields()[7].schema(),other.CassandraExecuteRequestType);
    fieldSetFlags()[7]=true;
  }
}
