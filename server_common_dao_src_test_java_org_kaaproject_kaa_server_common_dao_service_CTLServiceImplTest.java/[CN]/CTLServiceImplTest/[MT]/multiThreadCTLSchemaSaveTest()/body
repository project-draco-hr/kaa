{
  List<Future<CTLSchemaDto>> list=new ArrayList<>();
  for (int i=0; i < 100; i++) {
    list.add(executorService.submit(new Callable<CTLSchemaDto>(){
      @Override public CTLSchemaDto call(){
        CTLSchemaDto sch=null;
        try {
          sch=ctlService.saveCTLSchema(generateCTLSchemaDto(generateTenantDto().getId()));
        }
 catch (        Throwable t) {
          throw t;
        }
        return sch;
      }
    }
));
  }
  Iterator<Future<CTLSchemaDto>> iterator=list.iterator();
  List<CTLSchemaDto> schemas=new ArrayList<>();
  while (iterator.hasNext()) {
    Future<CTLSchemaDto> f=iterator.next();
    while (!f.isDone()) {
    }
    schemas.add(f.get());
    iterator.remove();
  }
  Assert.assertEquals(100,schemas.size());
  for (  CTLSchemaDto schema : schemas) {
    CTLSchemaDto savedSchema=ctlService.findCTLSchemaByFqnAndVerAndTenantIdAndApplicationId(DEFAULT_FQN,100,schema.getMetaInfo().getTenantId(),null);
    Assert.assertNotNull(savedSchema);
    Assert.assertEquals(schema,savedSchema);
  }
}
