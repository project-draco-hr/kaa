{
  clearDBData();
  if (tenant == null) {
    tenant=userService.findTenantByName(SUPER_TENANT);
    if (tenant == null) {
      TenantDto tn=new TenantDto();
      tn.setName(SUPER_TENANT);
      tenant=userService.saveTenant(tn);
      appDto=generateApplicationDto(tenant.getId(),"The app 1");
      appDto2=generateApplicationDto(tenant.getId(),"The app 2");
      List<CTLSchemaDto> ctlSchemas=ctlService.findSystemCTLSchemas();
      defaultSystemSchema=ctlSchemas.get(0);
    }
  }
  Set<CTLSchemaDto> dependency=new HashSet<>();
  firstSchema=ctlService.saveCTLSchema(generateCTLSchemaDto(DEFAULT_FQN + 1,tenant.getId(),null,1));
  dependency.add(firstSchema);
  secondSchema=ctlService.saveCTLSchema(generateCTLSchemaDto(DEFAULT_FQN + 2,tenant.getId(),null,2));
  dependency.add(secondSchema);
  thirdSchema=ctlService.saveCTLSchema(generateCTLSchemaDto(DEFAULT_FQN + 3,tenant.getId(),null,3));
  dependency.add(thirdSchema);
  fourthSchema=ctlService.saveCTLSchema(generateCTLSchemaDto(DEFAULT_FQN + 4,tenant.getId(),null,4));
  dependency.add(fourthSchema);
  mainSchema=generateCTLSchemaDto(DEFAULT_FQN + 5,tenant.getId(),null,7);
  mainSchema.setDependencySet(dependency);
  mainSchema=ctlService.saveCTLSchema(mainSchema);
  systemSchema=ctlService.saveCTLSchema(generateCTLSchemaDto(DEFAULT_FQN + 6,null,null,50));
  tenantSchema=ctlService.saveCTLSchema(generateCTLSchemaDto(DEFAULT_FQN + 7,tenant.getId(),null,77));
  tenantSchema2=ctlService.saveCTLSchema(generateCTLSchemaDto(DEFAULT_FQN + 7,tenant.getId(),null,78));
  CTLSchemaDto unsaved=generateCTLSchemaDto(DEFAULT_FQN + 8,tenant.getId(),appDto.getId(),80);
  appSchema=ctlService.saveCTLSchema(unsaved);
  unsaved=generateCTLSchemaDto(DEFAULT_FQN + 8,tenant.getId(),appDto.getId(),81);
  appSchema2=ctlService.saveCTLSchema(unsaved);
  unsaved=generateCTLSchemaDto(DEFAULT_FQN + 9,tenant.getId(),appDto.getId(),2);
  appSchema3=ctlService.saveCTLSchema(unsaved);
  unsaved=generateCTLSchemaDto(DEFAULT_FQN + 8,tenant.getId(),appDto2.getId(),11);
  app2Schema=ctlService.saveCTLSchema(unsaved);
  gamma=new CTLSchemaDto();
  CTLSchemaMetaInfoDto gammaMetaInfo=new CTLSchemaMetaInfoDto("org.kaaproject.kaa.Gamma",tenant.getId());
  gamma.setMetaInfo(gammaMetaInfo);
  gamma.setVersion(1);
  gamma.setBody(readSchemaFileAsString(TEST_CTL_SCHEMA_GAMMA));
  gamma=ctlService.saveCTLSchema(gamma);
  gamma=ctlService.findCTLSchemaById(gamma.getId());
  beta=new CTLSchemaDto();
  CTLSchemaMetaInfoDto betaMetaInfo=new CTLSchemaMetaInfoDto("org.kaaproject.kaa.Beta",tenant.getId());
  beta.setMetaInfo(betaMetaInfo);
  beta.setVersion(1);
  Set<CTLSchemaDto> betaDependencies=new HashSet<>();
  betaDependencies.add(gamma);
  beta.setDependencySet(betaDependencies);
  beta.setBody(readSchemaFileAsString(TEST_CTL_SCHEMA_BETA));
  beta=ctlService.saveCTLSchema(beta);
  beta=ctlService.findCTLSchemaById(beta.getId());
  alpha=new CTLSchemaDto();
  CTLSchemaMetaInfoDto alphaMetaInfo=new CTLSchemaMetaInfoDto("org.kaaproject.kaa.Alpha",tenant.getId());
  alpha.setMetaInfo(alphaMetaInfo);
  alpha.setVersion(1);
  Set<CTLSchemaDto> alphaDependencies=new HashSet<>();
  alphaDependencies.add(beta);
  alpha.setDependencySet(alphaDependencies);
  alpha.setBody(readSchemaFileAsString(TEST_CTL_SCHEMA_ALPHA));
  alpha=ctlService.saveCTLSchema(alpha);
  alpha=ctlService.findCTLSchemaById(alpha.getId());
}
