{
  try {
    state.setLastActivityTime(System.currentTimeMillis());
    long start=state.getLastActivityTime();
    ChannelMetaData channel=initChannel(context,requestMessage);
    ClientSync request=buildRequestForChannel(requestMessage,channel);
    ChannelType channelType=channel.getType();
    LOG.debug("[{}][{}] Processing sync request {} from {} channel [{}]",endpointKey,actorKey,request,channelType,requestMessage.getChannelUuid());
    SyncContext responseHolder=sync(request);
    state.setProfile(responseHolder.getEndpointProfile());
    if (state.getProfile() != null) {
      processLogUpload(context,request,responseHolder);
      processUserAttachRequest(context,request,responseHolder);
      processEvents(context,request,responseHolder);
      notifyAffectedEndpoints(context,request,responseHolder);
    }
 else {
      LOG.warn("[{}][{}] Endpoint profile is not set after request processing!",endpointKey,actorKey);
    }
    LOG.debug("[{}][{}] SyncResponseHolder {}",endpointKey,actorKey,responseHolder);
    if (channelType.isAsync()) {
      LOG.debug("[{}][{}] Adding async request from channel [{}] to map ",endpointKey,actorKey,requestMessage.getChannelUuid());
      channel.update(responseHolder);
      updateSubscriptionsToTopics(context,responseHolder);
      sendReply(context,requestMessage,responseHolder.getResponse());
    }
 else {
      if (channelType.isLongPoll() && !responseHolder.requireImmediateReply()) {
        LOG.debug("[{}][{}] Adding long poll request from channel [{}] to map ",endpointKey,actorKey,requestMessage.getChannelUuid());
        channel.update(responseHolder);
        updateSubscriptionsToTopics(context,responseHolder);
        scheduleTimeoutMessage(context,requestMessage.getChannelUuid(),getDelay(requestMessage,start));
      }
 else {
        sendReply(context,requestMessage,responseHolder.getResponse());
        state.removeChannel(channel);
      }
    }
  }
 catch (  GetDeltaException e) {
    LOG.error("[{}][{}] processEndpointRequest",endpointKey,actorKey,e);
    sendReply(context,requestMessage,e);
  }
}
