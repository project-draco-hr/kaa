{
  try {
    lastActivityTime=System.currentTimeMillis();
    long start=lastActivityTime;
    ChannelMetaData channel=initChannel(context,requestMessage);
    SyncRequest request=channel.getRequest().getRequest();
    ChannelType channelType=channel.getType();
    LOG.debug("[{}][{}] Processing sync request {} from channel [{}]",endpointKey,actorKey,request,requestMessage.getChannelUuid());
    SyncResponseHolder responseHolder=operationsService.sync(request);
    EndpointProfileDto endpointProfile=responseHolder.getEndpointProfile();
    if (endpointProfile != null) {
      LogSyncResponse logUploadResponse=sendLogs(context,endpointProfile,request.getLogSyncRequest());
      if (logUploadResponse != null) {
        responseHolder.getResponse().setLogSyncResponse(logUploadResponse);
      }
      if (isValidForEvents(endpointProfile)) {
        if (userId != null && !userId.equals(endpointProfile.getEndpointUserId())) {
          sendDisconnectFromOldUser(context,endpointProfile);
          userRegistrationRequestSent=false;
        }
        if (!userRegistrationRequestSent) {
          userId=endpointProfile.getEndpointUserId();
          sendConnectToNewUser(context,endpointProfile);
          userRegistrationRequestSent=true;
        }
 else {
          LOG.trace("[{}][{}] User registration request is already sent.",endpointKey,actorKey);
        }
        sendEventsIfPresent(context,request.getEventSyncRequest());
      }
 else {
        LOG.debug("[{}][{}] Endpoint profile is not valid for send/receive events. Either no assigned user or no event families in sdk",endpointKey,actorKey);
      }
      processUserAttachDetachResults(context,request,responseHolder);
    }
 else {
      LOG.warn("[{}][{}] Endpoint profile is not set after request processing!",endpointKey,actorKey);
    }
    this.syncTime+=System.currentTimeMillis() - start;
    LOG.debug("[{}][{}] SyncResponseHolder {}",endpointKey,actorKey,responseHolder);
    if (channelType.isAsync()) {
      LOG.debug("[{}][{}] Adding async request from channel [{}] to map ",endpointKey,actorKey,requestMessage.getChannelUuid());
      channel.updateReqResp(responseHolder);
      subscribeToTopics(context,responseHolder);
      sendReply(context,requestMessage,responseHolder.getResponse());
    }
 else {
      if (channelType.isLongPoll() && !responseHolder.requireImmediateReply()) {
        LOG.debug("[{}][{}] Adding long poll request from channel [{}] to map ",endpointKey,actorKey,requestMessage.getChannelUuid());
        channel.updateReqResp(responseHolder);
        subscribeToTopics(context,responseHolder);
        scheduleTimeoutMessage(context,requestMessage.getChannelUuid(),getDelay(requestMessage,start));
      }
 else {
        sendReply(context,requestMessage,responseHolder.getResponse());
        channelMap.removeChannel(channel);
      }
    }
  }
 catch (  GetDeltaException e) {
    LOG.error("[{}][{}] processEndpointRequest",endpointKey,actorKey,e);
    sendReply(context,requestMessage,e);
  }
}
