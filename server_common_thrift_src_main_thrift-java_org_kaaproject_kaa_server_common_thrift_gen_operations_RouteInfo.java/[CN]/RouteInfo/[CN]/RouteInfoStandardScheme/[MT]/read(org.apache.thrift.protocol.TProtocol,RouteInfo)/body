{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
        struct.updateType=EventRouteUpdateType.findByValue(iprot.readI32());
        struct.setUpdateTypeIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
      org.apache.thrift.protocol.TList _list0=iprot.readListBegin();
      struct.eventClassFamilyVersion=new ArrayList<EventClassFamilyVersion>(_list0.size);
      for (int _i1=0; _i1 < _list0.size; ++_i1) {
        EventClassFamilyVersion _elem2;
        _elem2=new EventClassFamilyVersion();
        _elem2.read(iprot);
        struct.eventClassFamilyVersion.add(_elem2);
      }
      iprot.readListEnd();
    }
    struct.setEventClassFamilyVersionIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.applicationToken=iprot.readString();
struct.setApplicationTokenIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.endpointId=iprot.readBinary();
struct.setEndpointIdIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
