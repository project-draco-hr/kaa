{
  CommonValue value=new DefaultCommonValue(null);
  assertTrue(value.isNull());
  assertNull(value.getInteger());
  assertEquals("null",value.toString());
  assertNull(value.getNumber());
  value=new DefaultCommonValue(new Integer(5));
  assertTrue(value.isNumber());
  assertEquals(new Integer(5),value.getNumber());
  assertNull(value.getBytes());
  ByteBuffer expectedBytes=ByteBuffer.wrap(new byte[]{1,2,3});
  value=new DefaultCommonValue(expectedBytes);
  assertTrue(value.isBytes());
  assertEquals(expectedBytes,value.getBytes());
  assertNull(value.getBoolean());
  value=new DefaultCommonValue(new Boolean(true));
  assertTrue(value.isBoolean());
  assertTrue(value.getBoolean());
  assertNull(value.getDouble());
  value=new DefaultCommonValue(new Double(5.0));
  assertTrue(value.isDouble());
  assertEquals(new Double(5.0),value.getDouble());
  assertNull(value.getLong());
  value=new DefaultCommonValue(new Long(123));
  assertTrue(value.isLong());
  assertEquals(new Long(123),value.getLong());
  assertNull(value.getFloat());
  value=new DefaultCommonValue(new Float(5.0));
  assertTrue(value.isFloat());
  assertEquals(new Float(5.0),value.getFloat());
  assertNull(value.getEnum());
  Schema schema=mock(Schema.class);
  value=new DefaultCommonValue(new DefaultCommonEnum(schema,"enum"));
  assertTrue(value.isEnum());
  assertEquals("enum",value.getEnum().getSymbol());
  assertEquals("enum",value.toString());
  assertNull(value.getString());
  assertNull(value.getRecord());
  assertNull(value.getArray());
  assertNull(value.getFixed());
  EqualsVerifier.forClass(DefaultCommonValue.class).verify();
}
