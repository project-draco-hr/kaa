{
  registerMocks();
  final ApplicationDto appDto=new ApplicationDto();
  appDto.setSequenceNumber(TEST_APP_SEQ_NUMBER);
  appDto.setId(APP_ID);
  when(appService.findAppByApplicationToken(TEST_APP_TOKEN)).then(new Answer<ApplicationDto>(){
    @Override public ApplicationDto answer(    InvocationOnMock invocation){
      sleepABit();
      return appDto;
    }
  }
);
  final List<ConfigurationDto> configurations=new ArrayList<ConfigurationDto>();
  ConfigurationDto theConf=new ConfigurationDto();
  theConf.setId(CF1_ID);
  theConf.setMajorVersion(CONF1_SCHEMA_VERSION);
  configurations.add(theConf);
  when(configurationService.findConfigurationsByEndpointGroupId(ENDPOINT_GROUP1_ID)).then(new Answer<List<ConfigurationDto>>(){
    @Override public List<ConfigurationDto> answer(    InvocationOnMock invocation) throws Throwable {
      sleepABit();
      return configurations;
    }
  }
);
  final List<HistoryDto> historyList=new ArrayList<HistoryDto>();
  historyList.add(buildMatchingHistoryDto(ChangeType.ADD_CONF));
  historyList.add(buildNotMatchingHistoryDto(ChangeType.ADD_CONF));
  historyList.add(buildMatchingHistoryDto(ChangeType.REMOVE_CONF));
  historyList.add(buildNotMatchingHistoryDto(ChangeType.REMOVE_CONF));
  historyList.add(buildMatchingHistoryDto(ChangeType.ADD_PROF));
  historyList.add(buildNotMatchingHistoryDto(ChangeType.ADD_PROF));
  historyList.add(buildMatchingHistoryDto(ChangeType.REMOVE_PROF));
  historyList.add(buildNotMatchingHistoryDto(ChangeType.REMOVE_PROF));
  historyList.add(buildMatchingHistoryDto(ChangeType.ADD_TOPIC));
  historyList.add(buildMatchingHistoryDto(ChangeType.REMOVE_TOPIC));
  historyList.add(buildMatchingHistoryDto(ChangeType.REMOVE_GROUP));
  when(historyService.findHistoriesBySeqNumberRange(APP_ID,TEST_APP_SEQ_NUMBER,TEST_APP_SEQ_NUMBER_NEW)).then(new Answer<List<HistoryDto>>(){
    @Override public List<HistoryDto> answer(    InvocationOnMock invocation) throws Throwable {
      sleepABit();
      return historyList;
    }
  }
);
  when(profileService.findProfileFilterByAppIdAndVersion(APP_ID,TEST_GET_PROFILES_KEY.getVersion())).then(new Answer<List<ProfileFilterDto>>(){
    @Override public List<ProfileFilterDto> answer(    InvocationOnMock invocation) throws Throwable {
      sleepABit();
      return TEST_PROFILE_FILTER_LIST;
    }
  }
);
  when(profileService.findProfileFilterById(PF1_ID)).then(new Answer<ProfileFilterDto>(){
    @Override public ProfileFilterDto answer(    InvocationOnMock invocation) throws Throwable {
      sleepABit();
      return TEST_PROFILE_FILTER;
    }
  }
);
  when(endpointService.findEndpointConfigurationByHash(CF1_HASH.getData())).then(new Answer<EndpointConfigurationDto>(){
    @Override public EndpointConfigurationDto answer(    InvocationOnMock invocation) throws Throwable {
      sleepABit();
      return CF1;
    }
  }
);
  when(configurationService.findConfSchemaByAppIdAndVersion(APP_ID,CF_SCHEMA_KEY.getVersion())).then(new Answer<ConfigurationSchemaDto>(){
    @Override public ConfigurationSchemaDto answer(    InvocationOnMock invocation) throws Throwable {
      sleepABit();
      return CF1_SCHEMA;
    }
  }
);
  when(profileService.findProfileSchemaByAppIdAndVersion(APP_ID,PF_SCHEMA_KEY.getVersion())).then(new Answer<ProfileSchemaDto>(){
    @Override public ProfileSchemaDto answer(    InvocationOnMock invocation) throws Throwable {
      sleepABit();
      return PF1_SCHEMA;
    }
  }
);
  KeyPairGenerator keyGen=KeyPairGenerator.getInstance("RSA");
  SecureRandom random=SecureRandom.getInstance("SHA1PRNG","SUN");
  keyGen.initialize(512,random);
  publicKey=keyGen.genKeyPair().getPublic();
  byte[] key=publicKey.getEncoded();
  publicKeyHash=EndpointObjectHash.fromSHA1(key);
  final EndpointProfileDto ep=new EndpointProfileDto();
  ep.setEndpointKey(key);
  when(endpointService.findEndpointProfileByKeyHash(publicKeyHash.getData())).then(new Answer<EndpointProfileDto>(){
    @Override public EndpointProfileDto answer(    InvocationOnMock invocation) throws Throwable {
      sleepABit();
      return ep;
    }
  }
);
}
