{
  if (baseSchema == null) {
    baseSchema=getBaseSchema(configuration);
    bordersSchema=baseSchema.getField("hBorders").schema().getTypes().get(1);
    borderSchema=bordersSchema.getElementType();
    borderTypeSchema=borderSchema.getField("type").schema().getTypes().get(1);
    datumWriter=new GenericDatumWriter<GenericRecord>(baseSchema);
  }
  GenericRecord labyrinthRecord=new GenericData.Record(baseSchema);
  GenericArray<GenericRecord> hBordersArray=new GenericData.Array<>((height + 1) * width,bordersSchema);
  for (int y=0; y < height + 1; y++) {
    for (int x=0; x < width; x++) {
      GenericRecord borderRecord=new GenericData.Record(borderSchema);
      borderRecord.put("x",x);
      borderRecord.put("y",y);
      EnumSymbol borderTypeEnum=new GenericData.EnumSymbol(borderTypeSchema,BorderType.UNKNOWN.name());
      borderRecord.put("type",borderTypeEnum);
      hBordersArray.add(borderRecord);
    }
  }
  GenericArray<GenericRecord> vBordersArray=new GenericData.Array<>(height * (width + 1),bordersSchema);
  for (int y=0; y < height; y++) {
    for (int x=0; x < width + 1; x++) {
      GenericRecord borderRecord=new GenericData.Record(borderSchema);
      borderRecord.put("x",x);
      borderRecord.put("y",y);
      EnumSymbol borderTypeEnum=new GenericData.EnumSymbol(borderTypeSchema,BorderType.UNKNOWN.name());
      borderRecord.put("type",borderTypeEnum);
      vBordersArray.add(borderRecord);
    }
  }
  labyrinthRecord.put("hBorders",hBordersArray);
  labyrinthRecord.put("vBorders",vBordersArray);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  jsonEncoder=EncoderFactory.get().jsonEncoder(baseSchema,baos);
  datumWriter.write(labyrinthRecord,jsonEncoder);
  jsonEncoder.flush();
  baos.flush();
  return new String(baos.toByteArray(),UTF8);
}
