{
  platformContext=Mockito.mock(KaaClientPlatformContext.class);
  clientProperties=Mockito.mock(KaaClientProperties.class);
  stateListener=Mockito.mock(KaaClientStateListener.class);
  storage=Mockito.mock(PersistentStorage.class);
  Mockito.when(platformContext.getBase64()).thenReturn(CommonsBase64.getInstance());
  Mockito.when(platformContext.getProperties()).thenReturn(clientProperties);
  Mockito.when(platformContext.createPersistentStorage()).thenReturn(storage);
  ExecutorContext executorContext=new SimpleExecutorContext();
  Mockito.when(platformContext.getExecutorContext()).thenReturn(executorContext);
  Mockito.when(clientProperties.getBootstrapServers()).thenReturn(buildDummyConnectionInfo());
  Mockito.when(clientProperties.getPropertiesHash()).thenReturn("test".getBytes());
  initStorageMock(storage);
  bsManagerMock=Mockito.mock(DefaultBootstrapManager.class);
  client=new AbstractKaaClient(platformContext,stateListener){
    @Override protected DefaultBootstrapManager buildBootstrapManager(    KaaClientProperties properties,    KaaClientState kaaClientState,    TransportContext transportContext){
      return bsManagerMock;
    }
  }
;
  client.setProfileContainer(new ProfileContainer(){
    @Override public EmptyData getProfile(){
      return new EmptyData();
    }
  }
);
}
