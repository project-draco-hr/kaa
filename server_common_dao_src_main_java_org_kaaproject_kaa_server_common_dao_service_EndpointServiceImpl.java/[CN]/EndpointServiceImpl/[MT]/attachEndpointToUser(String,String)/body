{
  LOG.info("Try to attach endpoint with access token {} to user with {}",endpointAccessToken,endpointUserId);
  validateString(endpointUserId,"Incorrect endpointUserId " + endpointUserId);
  EndpointUser endpointUser=endpointUserDao.findById(endpointUserId);
  LOG.trace("[{}] Found endpoint user with id {} ",endpointUserId,endpointUser);
  if (endpointUser != null) {
    EndpointProfile endpoint=endpointProfileDao.findByAccessToken(endpointAccessToken);
    LOG.trace("[{}] Found endpoint profile by with access token {} ",endpointAccessToken,endpoint);
    if (endpoint != null) {
      if (endpoint.getEndpointUserId() == null || endpointUserId.equals(endpoint.getEndpointUserId())) {
        LOG.debug("Attach endpoint profile with id {} to endpoint user with id {} ",endpoint.getId(),endpointUser.getId());
        List<String> endpointIds=endpointUser.getEndpointIds();
        if (endpointIds != null && endpointIds.contains(endpoint.getId())) {
          LOG.warn("Endpoint is already assigned to current user {}. Unassign it first!.",endpoint.getEndpointUserId());
        }
        if (endpointIds == null) {
          endpointIds=new ArrayList<>();
          endpointUser.setEndpointIds(endpointIds);
        }
        endpointIds.add(endpoint.getId());
        endpointUser=endpointUserDao.save(endpointUser);
        while (true) {
          try {
            endpoint.setEndpointUserId(endpointUser.getId());
            LOG.trace("Save endpoint user {} and endpoint profile {}",endpointUser,endpoint);
            endpoint=endpointProfileDao.save(endpoint);
            break;
          }
 catch (          KaaOptimisticLockingFailureException ex) {
            LOG.warn("Optimistic lock detected in endpoint profile ",Arrays.toString(endpoint.getEndpointKey()),ex);
            endpoint=endpointProfileDao.findByKeyHash(SHA1HashUtils.hashToBytes(endpoint.getEndpointKey()));
          }
        }
        return getDto(endpoint);
      }
 else {
        LOG.warn("Endpoint is already assigned to different user {}. Unassign it first!.",endpoint.getEndpointUserId());
        throw new DatabaseProcessingException("Endpoint is already assigned to different user.");
      }
    }
 else {
      LOG.warn("Endpoint with accessToken {} is not present in db.",endpointAccessToken);
      throw new DatabaseProcessingException("No endpoint found for specified accessToken.");
    }
  }
 else {
    LOG.warn("Endpoint user with id {} is not present in db.",endpointUserId);
    throw new DatabaseProcessingException("Endpoint user is not present in db.");
  }
}
