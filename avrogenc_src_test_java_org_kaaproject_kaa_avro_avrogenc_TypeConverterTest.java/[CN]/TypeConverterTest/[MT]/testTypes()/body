{
  Assert.assertTrue(TypeConverter.isAvroBytes(Schema.create(Type.BYTES)));
  Assert.assertFalse(TypeConverter.isAvroBytes(Schema.create(Type.STRING)));
  Assert.assertTrue(TypeConverter.isAvroArray(Schema.createArray(Schema.create(Type.BYTES))));
  Assert.assertFalse(TypeConverter.isAvroArray(Schema.create(Type.BYTES)));
  Assert.assertTrue(TypeConverter.isAvroString(Schema.create(Type.STRING)));
  Assert.assertFalse(TypeConverter.isAvroString(Schema.create(Type.BOOLEAN)));
  Assert.assertTrue(TypeConverter.isAvroEnum(Schema.createEnum("name","doc","namespace",Arrays.asList("node"))));
  Assert.assertFalse(TypeConverter.isAvroEnum(Schema.create(Type.BOOLEAN)));
  Assert.assertTrue(TypeConverter.isAvroNull(Schema.create(Type.NULL)));
  Assert.assertFalse(TypeConverter.isAvroNull(Schema.create(Type.BOOLEAN)));
  Assert.assertTrue(TypeConverter.isAvroPrimitive(Schema.create(Type.BOOLEAN)));
  Assert.assertTrue(TypeConverter.isAvroPrimitive(Schema.create(Type.INT)));
  Assert.assertTrue(TypeConverter.isAvroPrimitive(Schema.create(Type.LONG)));
  Assert.assertTrue(TypeConverter.isAvroPrimitive(Schema.createEnum("name","doc","namespace",Arrays.asList("node"))));
  Assert.assertFalse(TypeConverter.isAvroPrimitive(Schema.create(Type.STRING)));
  Assert.assertFalse(TypeConverter.isAvroPrimitive(Schema.create(Type.BYTES)));
  Assert.assertTrue(TypeConverter.isAvroUnion(Schema.createUnion(Arrays.asList(Schema.create(Type.BYTES),Schema.create(Type.STRING)))));
  Assert.assertFalse(TypeConverter.isAvroUnion(Schema.create(Type.STRING)));
  Assert.assertTrue(TypeConverter.isAvroRecord(Schema.createRecord("name","doc","namespace",false)));
  Assert.assertFalse(TypeConverter.isAvroRecord(Schema.create(Type.STRING)));
  Assert.assertTrue(TypeConverter.isAvroUnion(Schema.createUnion(Arrays.asList(Schema.create(Type.BYTES),Schema.create(Type.STRING)))));
  Assert.assertFalse(TypeConverter.isAvroUnion(Schema.create(Type.STRING)));
  Assert.assertTrue(TypeConverter.isAvroString(Schema.create(Type.STRING)));
  Assert.assertFalse(TypeConverter.isAvroString(Schema.create(Type.INT)));
}
