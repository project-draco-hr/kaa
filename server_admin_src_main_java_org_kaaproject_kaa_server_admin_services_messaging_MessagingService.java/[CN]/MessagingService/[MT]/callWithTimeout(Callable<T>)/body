{
  Future<T> future=sendPool.submit(callable);
  try {
    if (sendTimeout > 0) {
      return future.get(sendTimeout,TimeUnit.SECONDS);
    }
 else {
      return future.get();
    }
  }
 catch (  TimeoutException eT) {
    future.cancel(true);
    throw new IOException("Callable timed out after " + sendTimeout + " sec",eT);
  }
catch (  ExecutionException e1) {
    Throwable cause=e1.getCause();
    if (cause instanceof IOException) {
      throw (IOException)cause;
    }
 else     if (cause instanceof InterruptedException) {
      throw (InterruptedException)cause;
    }
 else     if (cause instanceof RuntimeException) {
      throw (RuntimeException)cause;
    }
 else     if (cause instanceof Error) {
      throw (Error)cause;
    }
 else {
      throw new RuntimeException(e1);
    }
  }
catch (  CancellationException ce) {
    throw new InterruptedException("Blocked callable interrupted by rotation event");
  }
catch (  InterruptedException ex) {
    LOG.warn("Unexpected Exception {}",ex.getMessage(),ex);
    throw ex;
  }
}
