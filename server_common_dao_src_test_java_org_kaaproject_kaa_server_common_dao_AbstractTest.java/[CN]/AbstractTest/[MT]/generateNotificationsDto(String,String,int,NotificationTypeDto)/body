{
  List<NotificationDto> notifications=new ArrayList<>(count);
  NotificationDto notification=null;
  NotificationSchemaDto schema;
  for (int i=0; i < count; i++) {
    notification=new NotificationDto();
    if (isBlank(schemaId)) {
      schema=generateNotificationSchemaDto(null,NotificationTypeDto.USER);
    }
 else {
      schema=notificationService.findNotificationSchemaById(schemaId);
    }
    notification.setApplicationId(schema.getApplicationId());
    notification.setSchemaId(schema.getId());
    if (isBlank(topicId)) {
      topicId=generateTopicDto(schema.getApplicationId(),null).getId();
    }
    notification.setTopicId(topicId);
    notification.setType(type != null ? type : NotificationTypeDto.USER);
    byte[] body=null;
    try {
      body=readSchemaFileAsString("dao/schema/testBaseData.json").getBytes(Charset.forName("UTF-8"));
    }
 catch (    IOException e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    notification.setBody(body);
    UpdateNotificationDto<NotificationDto> update=notificationService.saveNotification(notification);
    notifications.add(update.getPayload());
  }
  return notifications;
}
