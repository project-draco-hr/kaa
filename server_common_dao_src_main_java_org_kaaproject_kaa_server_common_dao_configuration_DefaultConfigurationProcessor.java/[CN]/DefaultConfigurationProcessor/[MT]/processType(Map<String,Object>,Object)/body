{
  Object typeField=rawSchemaNode.get(TYPE_FIELD);
  if (List.class.isAssignableFrom(typeField.getClass())) {
    typeField=((List)typeField).get(0);
  }
  if (NULL_FIELD_VALUE.equals(typeField)) {
    return null;
  }
 else   if (ARRAY_FIELD_VALUE.equals(typeField)) {
    return processArray(rawSchemaNode);
  }
 else   if (RECORD_FIELD_VALUE.equals(typeField)) {
    return processRecord(rawSchemaNode);
  }
 else   if (MAP_FIELD_VALUE.equals(typeField)) {
    throw new ConfigurationProcessingException("Map is not supported.");
  }
 else   if (FIXED_FIELD_VALUE.equals(typeField)) {
    return processFixed(rawSchemaNode);
  }
 else   if (ENUM_FIELD_VALUE.equals(typeField)) {
    return processEnum(rawSchemaNode);
  }
 else   if (String.class.isAssignableFrom(typeField.getClass())) {
    String typeFieldString=String.class.cast(typeField);
    if (BYTES_FIELD_VALUE.equals(typeFieldString) && byDefault != null) {
      List<Integer> bytesArray=(List<Integer>)byDefault;
      ByteBuffer byteBuffer=ByteBuffer.allocate(bytesArray.size());
      for (      Integer oneByte : bytesArray) {
        byteBuffer.put(oneByte.byteValue());
      }
      byteBuffer.flip();
      return byteBuffer;
    }
 else     if (processedTypes.containsKey(typeFieldString)) {
      return processedTypes.get(typeFieldString);
    }
  }
 else   if (Map.class.isAssignableFrom(typeField.getClass())) {
    Map typeFieldMap=Map.class.cast(typeField);
    return processType(typeFieldMap,byDefault);
  }
  return byDefault;
}
