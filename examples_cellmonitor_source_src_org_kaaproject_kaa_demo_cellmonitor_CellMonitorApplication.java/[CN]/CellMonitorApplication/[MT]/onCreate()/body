{
  super.onCreate();
  mEventBus=new EventBus();
  mTelephonyManager=(TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE);
  mCellMonitorPhoneStateListener=new CellMonitorPhoneStateListener();
  mLocationManager=(LocationManager)getSystemService(LOCATION_SERVICE);
  Criteria criteria=new Criteria();
  String bestProvider=mLocationManager.getBestProvider(criteria,false);
  mGpsLocation=mLocationManager.getLastKnownLocation(bestProvider);
  mGpsLocationListener=new GpsLocationListener();
  KaaClientPlatformContext kaaClientContext=new AndroidKaaPlatformContext(this);
  mClient=Kaa.newClient(kaaClientContext,new SimpleKaaClientStateListener(){
    @Override public void onStarted(){
      mKaaStarted=true;
      LOG.info("Kaa client started");
    }
  }
);
  mClient.setLogUploadStrategy(new LogUploadStrategy(){
    @Override public void onTimeout(    LogFailoverCommand logFailoverCommand){
      LOG.error("Unable to send logs within defined timeout!");
    }
    @Override public void onFailure(    LogFailoverCommand logFailoverCommand,    LogDeliveryErrorCode logDeliveryErrorCode){
      LOG.error("Unable to send logs, error code: " + logDeliveryErrorCode);
      logFailoverCommand.retryLogUpload(10);
    }
    @Override public LogUploadStrategyDecision isUploadNeeded(    LogStorageStatus logStorageStatus){
      return logStorageStatus.getRecordCount() > 0 ? LogUploadStrategyDecision.UPLOAD : LogUploadStrategyDecision.NOOP;
    }
    @Override public int getTimeout(){
      return 100;
    }
    @Override public long getBatchSize(){
      return 8 * 1024;
    }
  }
);
  mClient.start();
}
