{
  AvroAsyncRpcClient client=null;
  Server server=startServer(handler,0,enableServerCompression);
  try {
    Properties starterProp=new Properties();
    if (enableClientCompression) {
      starterProp.setProperty(RpcClientConfigurationConstants.CONFIG_COMPRESSION_TYPE,"deflate");
      starterProp.setProperty(RpcClientConfigurationConstants.CONFIG_COMPRESSION_LEVEL,"" + compressionLevel);
    }
 else {
      starterProp.setProperty(RpcClientConfigurationConstants.CONFIG_COMPRESSION_TYPE,"none");
    }
    starterProp.setProperty(AvroAsyncRpcClient.ASYNC_MAX_THREADS,Integer.toString(numberOfAsyncThreads));
    client=getStockLocalClient(server.getPort(),starterProp);
    boolean isActive=client.isActive();
    Assert.assertTrue("Client should be active",isActive);
    ArrayList<Future<AppendAsyncResultPojo>> futureList=new ArrayList<Future<AppendAsyncResultPojo>>();
    for (int b=0; b < numberOfEvent; b++) {
      futureList.add(client.appendAsync(EventBuilder.withBody(b + ": 1",Charset.forName("UTF8"))));
    }
    for (int b=0; b < numberOfEvent; b++) {
      AppendAsyncResultPojo pojo=futureList.get(b).get();
      Assert.assertTrue(pojo.isSuccessful);
      Assert.assertTrue(Character.getNumericValue(((char)(pojo.getEvent().getBody()[0]))) == b);
    }
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  ExecutionException e) {
    e.printStackTrace();
  }
 finally {
    stopServer(server);
    if (client != null)     client.close();
  }
}
