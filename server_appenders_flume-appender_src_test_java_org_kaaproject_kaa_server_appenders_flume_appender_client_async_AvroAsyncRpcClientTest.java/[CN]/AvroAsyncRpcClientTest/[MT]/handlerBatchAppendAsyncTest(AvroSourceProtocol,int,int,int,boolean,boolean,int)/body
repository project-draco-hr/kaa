{
  AvroAsyncRpcClient client=null;
  Server server=startServer(handler,0,enableServerCompression);
  try {
    Properties starterProp=new Properties();
    if (enableClientCompression) {
      starterProp.setProperty(RpcClientConfigurationConstants.CONFIG_COMPRESSION_TYPE,"deflate");
      starterProp.setProperty(RpcClientConfigurationConstants.CONFIG_COMPRESSION_LEVEL,"" + compressionLevel);
    }
 else {
      starterProp.setProperty(RpcClientConfigurationConstants.CONFIG_COMPRESSION_TYPE,"none");
    }
    starterProp.setProperty(RpcClientConfigurationConstants.CONFIG_BATCH_SIZE,Integer.toString(batchSize));
    starterProp.setProperty(AvroAsyncRpcClient.ASYNC_MAX_THREADS,Integer.toString(numberOfAsyncThreads));
    client=getStockLocalClient(server.getPort(),starterProp);
    boolean isActive=client.isActive();
    Assert.assertTrue("Client should be active",isActive);
    ArrayList<Future<AppendBatchAsyncResultPojo>> futureList=new ArrayList<Future<AppendBatchAsyncResultPojo>>();
    for (int b=0; b < numberOfBatchs; b++) {
      List<Event> events=new ArrayList<Event>();
      for (int i=0; i < batchSize; i++) {
        events.add(EventBuilder.withBody(((char)b) + ": " + i,Charset.forName("UTF8")));
      }
      futureList.add(client.appendBatchAsync(events));
    }
    for (int b=0; b < numberOfBatchs; b++) {
      AppendBatchAsyncResultPojo pojo=futureList.get(b).get();
      Assert.assertTrue(pojo.isSuccessful);
      Assert.assertTrue(pojo.getEvents().size() == batchSize);
      Assert.assertTrue((pojo.getEvents().get(0).getBody()[0]) == b);
    }
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  ExecutionException e) {
    e.printStackTrace();
  }
 finally {
    stopServer(server);
    if (client != null) {
      client.close();
    }
  }
}
