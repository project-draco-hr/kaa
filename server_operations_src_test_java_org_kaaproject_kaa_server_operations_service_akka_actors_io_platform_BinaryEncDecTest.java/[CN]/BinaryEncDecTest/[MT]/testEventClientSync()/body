{
  ByteBuffer buf=ByteBuffer.wrap(new byte[4 + 2 + 2+ 2+ 2+ 4+ 4+ 4+ 2+ 2+ 4+ 4+ SHA_1_LENGTH+ 100]);
  buf.put((byte)0);
  buf.put((byte)0);
  buf.put((byte)0);
  buf.put((byte)1);
  buf.putShort((short)MAGIC_NUMBER);
  buf.putShort((short)1);
  buf.putShort((short)4);
  buf.putShort((short)0);
  buf.put("name".getBytes(Charset.forName("UTF-8")));
  buf.put((byte)1);
  buf.put((byte)0);
  buf.put((byte)0);
  buf.put((byte)1);
  buf.putInt(MAGIC_NUMBER);
  buf.putShort((short)0x03);
  buf.putShort((short)4);
  buf.putInt(100);
  byte[] hash=new byte[SHA_1_LENGTH];
  hash[MAGIC_INDEX]=MAGIC_NUMBER;
  buf.put(hash);
  buf.put("name".getBytes(Charset.forName("UTF-8")));
  byte[] data=new byte[100];
  data[MAGIC_INDEX]=MAGIC_NUMBER;
  buf.put(data);
  ClientSync sync=encDec.decode(concat(buildHeader(Constants.KAA_PLATFORM_PROTOCOL_BINARY_ID,1,2),getValidMetaData(),buildExtensionHeader(BinaryEncDec.EVENT_EXTENSION_ID,0,0,0x02,buf.array().length),buf.array()));
  Assert.assertNotNull(sync);
  Assert.assertNotNull(sync.getClientSyncMetaData());
  Assert.assertNotNull(sync.getEventSync());
  EventClientSync eSync=sync.getEventSync();
  Assert.assertEquals(true,eSync.isSeqNumberRequest());
  Assert.assertNotNull(eSync.getEventListenersRequests());
  Assert.assertEquals(1,eSync.getEventListenersRequests().size());
  Assert.assertEquals(MAGIC_NUMBER + "",eSync.getEventListenersRequests().get(0).getRequestId());
  Assert.assertNotNull(eSync.getEventListenersRequests().get(0).getEventClassFQNs());
  Assert.assertEquals("name",eSync.getEventListenersRequests().get(0).getEventClassFQNs().get(0));
  Assert.assertNotNull(eSync.getEvents());
  Assert.assertEquals(1,eSync.getEvents().size());
  Assert.assertEquals(MAGIC_NUMBER,eSync.getEvents().get(0).getSeqNum());
  Assert.assertEquals("name",eSync.getEvents().get(0).getEventClassFQN());
  Assert.assertEquals(Base64Util.encode(hash),eSync.getEvents().get(0).getTarget());
  Assert.assertEquals(MAGIC_NUMBER,eSync.getEvents().get(0).getEventData().array()[MAGIC_INDEX]);
}
