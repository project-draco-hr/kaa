{
  Thread outputHandlerThread=new Thread(new OutputHandler(),"Output handler thread");
  outputHandlerThread.start();
  File labyrinthFile;
  int startX=-1;
  int startY=-1;
  Labyrinth labyrinth;
  Cell startCell;
  Direction startDirection=null;
  Integer id=null;
  if (args.length < 5) {
    LOG.error("Insufficient arguments!");
    throw new RuntimeException("Insufficient arguments!");
  }
  try {
    labyrinthFile=new File(args[0]);
    if (!labyrinthFile.exists() || !labyrinthFile.isFile()) {
      LOG.error("Labyrinth file [{}] doesn't exists or not a file!",args[0]);
      throw new RuntimeException("Invalid labyrinth file!");
    }
    try {
      startX=Integer.valueOf(args[1]);
      startY=Integer.valueOf(args[2]);
    }
 catch (    Exception e) {
    }
    if (startX < 0) {
      LOG.error("Invalid startX [{}]!",args[1]);
      throw new RuntimeException("Invalid startX!");
    }
    if (startY < 0) {
      LOG.error("Invalid startY [{}]!",args[2]);
      throw new RuntimeException("Invalid startY!");
    }
    try {
      startDirection=Direction.valueOf(args[3].toUpperCase());
    }
 catch (    Exception e) {
    }
    if (startDirection == null) {
      LOG.error("Unknown start direction [{}]!",args[3]);
      throw new RuntimeException("Unknown start direction!");
    }
    try {
      id=Integer.valueOf(args[4]);
    }
 catch (    Exception e) {
    }
    if (id == null) {
      LOG.error("Invalid id [{}]!",args[4]);
      throw new RuntimeException("Invalid id!");
    }
    FileInputStream fis=new FileInputStream(labyrinthFile);
    try {
      labyrinth=BasicLabyrinth.load(fis);
    }
 catch (    Exception e) {
      LOG.error("Unable to load labyrinth from file [{}]!",labyrinthFile);
      throw new RuntimeException("Unable to load labyrinth from file!");
    }
    startCell=labyrinth.getCell(startX,startY);
  }
 catch (  Exception e) {
    LOG.error("Unable to parse arguments!",e);
    throw new RuntimeException("Unable to parse arguments!");
  }
  LOG.info("Starting Robotun emulator with the following parameters:");
  LOG.info("labyrinthFile: [{}]",labyrinthFile);
  LOG.info("startX: [{}]",startX);
  LOG.info("startY: [{}]",startY);
  LOG.info("startDirection: [{}]",startDirection);
  LOG.info("id: [{}]",id);
  Properties robotProperties=readRobotProperties(args);
  try {
    launcher=new EmulatorLauncher(this,labyrinth,startCell,startDirection,"emulator" + id,robotProperties);
  }
 catch (  Exception e) {
    LOG.error("Failed to construct emulator launcher!",e);
    throw new RuntimeException("Failed to construct emulator launcher!");
  }
  launcher.start();
}
