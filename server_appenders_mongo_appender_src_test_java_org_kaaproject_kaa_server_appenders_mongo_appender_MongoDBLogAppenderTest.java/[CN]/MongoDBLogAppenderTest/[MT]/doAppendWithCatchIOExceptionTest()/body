{
  List<LogEvent> events=new ArrayList<>();
  LogEvent event1=new LogEvent();
  event1.setLogData(LOG_DATA.getBytes(UTF_8));
  LogEvent event2=new LogEvent();
  event1.setLogData(LOG_DATA.getBytes(UTF_8));
  LogEvent event3=new LogEvent();
  event1.setLogData(LOG_DATA.getBytes(UTF_8));
  events.add(event1);
  events.add(event2);
  events.add(event3);
  LogSchemaDto dto=new LogSchemaDto();
  dto.setSchema(EMPTY_SCHEMA);
  dto.setMajorVersion(1);
  LogSchema schema=new LogSchema(dto);
  int version=dto.getMajorVersion();
  LogEventPack logEventPack=new LogEventPack(ENDPOINT_KEY,DATE_CREATED,schema,events);
  logEventPack.setLogSchemaVersion(version);
  Map<String,GenericAvroConverter<GenericRecord>> converters=new HashMap<>();
  GenericAvroConverter<GenericRecord> converter=new GenericAvroConverter<GenericRecord>(dto.getSchema()){
    @Override public GenericRecord decodeBinary(    byte[] bytes) throws IOException {
      throw new IOException();
    }
    @Override public String endcodeToJson(    GenericRecord record) throws IOException {
      throw new IOException();
    }
  }
;
  converters.put(dto.getSchema(),converter);
  ReflectionTestUtils.setField(logAppender,"converters",converters);
  LogEventDao logEventDao=Mockito.mock(LogEventDao.class);
  LogEventDao eventDao=(LogEventDao)ReflectionTestUtils.getField(logAppender,"logEventDao");
  ReflectionTestUtils.setField(logAppender,"logEventDao",logEventDao);
  logAppender.doAppend(logEventPack);
  Mockito.verify(logEventDao,Mockito.never()).save(Mockito.anyList(),Mockito.anyString());
  ReflectionTestUtils.setField(logAppender,"logEventDao",eventDao);
}
