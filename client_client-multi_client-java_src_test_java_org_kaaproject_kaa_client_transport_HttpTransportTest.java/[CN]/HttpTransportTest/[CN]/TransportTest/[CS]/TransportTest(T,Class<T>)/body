{
  AvroByteArrayConverter<T> converter=new AvroByteArrayConverter<>(avroResponseClass);
  serializedResponse=converter.toByteArray(avroResponse);
  messageEncDec=mock(MessageEncoderDecoder.class);
  when(messageEncDec.verify(any(byte[].class),any(byte[].class))).thenReturn(true);
  when(messageEncDec.getEncodedSessionKey()).thenReturn(new String("encoded key").getBytes("UTF-8"));
  when(messageEncDec.encodeData(any(byte[].class))).thenReturn(new String("encoded data").getBytes("UTF-8"));
  when(messageEncDec.decodeData(any(byte[].class))).thenReturn(serializedResponse);
  when(messageEncDec.sign(any(byte[].class))).thenReturn(new String("signature").getBytes("UTF-8"));
  statusLine=mock(StatusLine.class);
  when(statusLine.getStatusCode()).thenReturn(200);
  CloseableHttpResponse response=mock(CloseableHttpResponse.class);
  when(response.getStatusLine()).thenReturn(statusLine);
  when(response.getFirstHeader(eq(CommonEPConstans.SIGNATURE_HEADER_NAME))).thenReturn(mock(Header.class));
  when(response.getEntity()).thenReturn(mock(HttpEntity.class));
  httpClient=mock(CloseableHttpClient.class);
  when(httpClient.execute(any(HttpPost.class))).thenReturn(response);
}
