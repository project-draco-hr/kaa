{
  Map<Integer,List<RedirectionRule>> result=new HashMap<Integer,List<RedirectionRule>>();
  if (opsServerLoadHistory.size() == 0) {
    LOG.debug("No ops server load history yet");
    return result;
  }
  if (opsServerLoadHistory.size() == 1) {
    LOG.debug("No rebalancing in standalone mode");
    return result;
  }
  for (  Entry<Integer,OperationsServerLoadHistory> accessPointHistory : opsServerLoadHistory.entrySet()) {
    LOG.debug("Access point: {} has {} history items",accessPointHistory.getKey(),accessPointHistory.getValue().getHistory().size());
    for (    OperationsServerLoad load : accessPointHistory.getValue().getHistory()) {
      LOG.debug("History: {}",load);
    }
  }
  int minLoadedOpsServer=getMinLoadedOpsServer(opsServerLoadHistory);
  int minEndpointCount=getLastEndpointCount(opsServerLoadHistory.get(minLoadedOpsServer));
  int maxLoadedOpsServer=getMaxLoadedOpsServer(opsServerLoadHistory);
  int maxEndpointCount=getLastEndpointCount(opsServerLoadHistory.get(maxLoadedOpsServer));
  LOG.info("Min loaded ops server is {} with {} endpoints",minLoadedOpsServer,minEndpointCount);
  LOG.info("Max loaded ops server is {} with {} endpoints",maxLoadedOpsServer,maxEndpointCount);
  int maxDiff=maxEndpointCount - minEndpointCount;
  LOG.info("Max difference between endpoint counts is {}",maxDiff);
  if (maxDiff < minDiff) {
    LOG.debug("Max endpoint count difference is to small to trigger recalculation. Min required diff is {}",minDiff);
    return result;
  }
  int totalLoad=0;
  for (  Entry<Integer,OperationsServerLoadHistory> opsEntry : opsServerLoadHistory.entrySet()) {
    totalLoad+=getLastEndpointCount(opsEntry.getValue());
  }
  int targetLoad=totalLoad / opsServerLoadHistory.size();
  LOG.debug("Target load is {}",targetLoad);
  Map<Integer,Double> weights=calculateWeights(opsServerLoadHistory,targetLoad);
  for (  Entry<Integer,OperationsServerLoadHistory> opsEntry : opsServerLoadHistory.entrySet()) {
    double curWeight=weights.get(opsEntry.getKey());
    if (curWeight >= 0) {
      LOG.debug("No redirection rules for {}",targetLoad);
      continue;
    }
    List<RedirectionRule> redirectionRules=new ArrayList<RedirectionRule>();
    for (    Entry<Integer,Double> targetWeight : weights.entrySet()) {
      if (targetWeight.getValue() < 0) {
        continue;
      }
      double initRedirectProbability=Math.abs(curWeight) * targetWeight.getValue() * maxInitRedirectProbability;
      double sessionRedirectProbability=targetWeight.getValue() * maxSessionRedirectProbability;
      if (initRedirectProbability > 0 || sessionRedirectProbability > 0) {
        RedirectionRule rule=new RedirectionRule(targetWeight.getKey(),ruleIdSeq.getAndIncrement(),initRedirectProbability,sessionRedirectProbability,recalculationPeriod * 1000L);
        LOG.debug("Calculated new rule for accessPointId: {} -> {}",opsEntry.getKey(),rule);
        redirectionRules.add(rule);
      }
    }
    result.put(opsEntry.getKey(),redirectionRules);
  }
  return result;
}
