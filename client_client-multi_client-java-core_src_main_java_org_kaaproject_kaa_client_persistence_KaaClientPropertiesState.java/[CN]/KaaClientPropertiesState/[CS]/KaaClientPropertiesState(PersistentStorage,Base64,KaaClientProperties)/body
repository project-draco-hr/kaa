{
  super();
  this.storage=storage;
  this.base64=base64;
  properties.setBase64(base64);
  String workDirProperty=properties.getProperty(WORKING_DIR);
  String workDir=workDirProperty != null && !workDirProperty.isEmpty() ? workDirProperty : WORKING_DIR_DEFAULT;
  workDirLocation=workDir.endsWith(FILE_SEPARATOR) ? workDir : workDir + FILE_SEPARATOR;
  String stateFileName=properties.getProperty(STATE_FILE_NAME);
  stateFileLocation=stateFileName != null && !stateFileName.isEmpty() ? workDirLocation + stateFileName : workDirLocation + STATE_FILE_DEFAULT;
  String privateKeyName=properties.getProperty(CLIENT_PRIVATE_KEY_FILE_NAME);
  clientPrivateKeyFileLocation=privateKeyName != null && !privateKeyName.isEmpty() ? workDirLocation + privateKeyName : workDirLocation + CLIENT_PRIVATE_KEY_DEFAULT;
  String publicKeyName=properties.getProperty(CLIENT_PUBLIC_KEY_FILE_NAME);
  clientPublicKeyFileLocation=publicKeyName != null && !publicKeyName.isEmpty() ? workDirLocation + publicKeyName : workDirLocation + CLIENT_PUBLIC_KEY_DEFAULT;
  LOG.info("Version: '{}', commit hash: '{}'",properties.getBuildVersion(),properties.getCommitHash());
  state=new Properties();
  if (storage.exists(stateFileLocation)) {
    InputStream stream=null;
    try {
      stream=storage.openForRead(stateFileLocation);
      state.load(stream);
      if (isSDKPropertiesUpdated(properties,state)) {
        LOG.info("SDK properties were updated");
        setRegistered(false);
        setPropertiesHash(properties.getPropertiesHash());
        isConfigVersionUpdated=true;
      }
 else {
        LOG.info("SDK properties are up to date");
      }
      parseNfSubscriptions();
      String attachedEndpointsString=state.getProperty(ATTACHED_ENDPOINTS);
      if (attachedEndpointsString != null) {
        String[] splittedEndpointsList=attachedEndpointsString.split(",");
        for (        String attachedEndpoint : splittedEndpointsList) {
          if (!attachedEndpoint.isEmpty()) {
            String[] splittedValues=attachedEndpoint.split(":");
            attachedEndpoints.put(new EndpointAccessToken(splittedValues[0]),new EndpointKeyHash(splittedValues[1]));
          }
        }
      }
      String eventSeqNumStr=state.getProperty(EVENT_SEQ_NUM);
      if (eventSeqNumStr != null) {
        Integer eventSeqNum=0;
        try {
          eventSeqNum=Integer.parseInt(eventSeqNumStr);
        }
 catch (        NumberFormatException e) {
          LOG.error("Unexpected exception while parsing event sequence number. Can not parse String: {} to Integer",eventSeqNumStr);
        }
        eventSequence.set(eventSeqNum);
      }
    }
 catch (    Exception e) {
      LOG.error("Can't load state file",e);
    }
 finally {
      IOUtils.closeQuietly(stream);
    }
  }
 else {
    LOG.info("First SDK start");
    setPropertiesHash(properties.getPropertiesHash());
  }
}
