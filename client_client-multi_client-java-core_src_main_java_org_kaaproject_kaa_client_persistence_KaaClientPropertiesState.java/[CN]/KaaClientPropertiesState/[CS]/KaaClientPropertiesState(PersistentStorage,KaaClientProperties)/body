{
  super();
  this.storage=storage;
  stateFileLocation=properties.containsKey(STATE_FILE_LOCATION) ? properties.getProperty(STATE_FILE_LOCATION) : STATE_FILE_DEFAULT;
  clientPrivateKeyFileLocation=properties.containsKey(CLIENT_PRIVATE_KEY_FILE_LOCATION) ? properties.getProperty(CLIENT_PRIVATE_KEY_FILE_LOCATION) : CLIENT_PRIVATE_KEY_DEFAULT;
  clientPublicKeyFileLocation=properties.containsKey(CLIENT_PUBLIC_KEY_FILE_LOCATION) ? properties.getProperty(CLIENT_PUBLIC_KEY_FILE_LOCATION) : CLIENT_PUBLIC_KEY_DEFAULT;
  state=new KaaClientProperties(properties);
  LOG.info("Version: '{}', commit hash: '{}'",state.getBuildVersion(),state.getCommitHash());
  if (storage.exists(stateFileLocation)) {
    try {
      state.load(storage.openForRead(stateFileLocation));
      BinaryDecoder decoder=DecoderFactory.get().binaryDecoder(state.getProperty(NF_SUBSCRIPTIONS).getBytes(),null);
      SpecificDatumReader<TopicSubscriptionInfo> avroReader=new SpecificDatumReader<TopicSubscriptionInfo>(TopicSubscriptionInfo.class);
      try {
        TopicSubscriptionInfo decodedInfo=null;
        while (!decoder.isEnd()) {
          decodedInfo=avroReader.read(null,decoder);
          LOG.debug("Loaded {}",decodedInfo);
          nfSubscriptions.put(decodedInfo.getTopicInfo().getId(),decodedInfo);
        }
      }
 catch (      Exception e) {
        LOG.error("Unexpected exception occurred while reading information from decoder");
      }
      String attachedEndpointsString=state.getProperty(ATTACHED_ENDPOINTS);
      String[] splittedEndpointsList=attachedEndpointsString.split(",");
      for (      String attachedEndpoint : splittedEndpointsList) {
        if (!attachedEndpoint.isEmpty()) {
          String[] splittedValues=attachedEndpoint.split(":");
          attachedEndpoints.put(new EndpointAccessToken(splittedValues[0]),new EndpointKeyHash(splittedValues[1]));
        }
      }
      String eventSeqNumStr=state.getProperty(EVENT_SEQ_NUM);
      Integer eventSeqNum=0;
      try {
        eventSeqNum=Integer.parseInt(eventSeqNumStr);
      }
 catch (      NumberFormatException e) {
        LOG.error("Unexpected exception while parsing event sequence number. Can not parse String: {} to Integer",eventSeqNumStr);
      }
      eventSequence.set(eventSeqNum);
    }
 catch (    IOException e) {
      LOG.error("Can't load state file",e);
    }
  }
}
