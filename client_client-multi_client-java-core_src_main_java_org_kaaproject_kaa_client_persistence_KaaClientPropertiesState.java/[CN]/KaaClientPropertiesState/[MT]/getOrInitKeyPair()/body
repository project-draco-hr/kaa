{
  LOG.debug("Check if key pair exists {}, {}",clientPublicKeyFileLocation,clientPrivateKeyFileLocation);
  if (kp != null) {
    return kp;
  }
  if (storage.exists(clientPublicKeyFileLocation) && storage.exists(clientPrivateKeyFileLocation)) {
    InputStream publicKeyInput=null;
    InputStream privateKeyInput=null;
    try {
      publicKeyInput=storage.openForRead(clientPublicKeyFileLocation);
      privateKeyInput=storage.openForRead(clientPrivateKeyFileLocation);
      kp=new KeyPair(KeyUtil.getPublic(publicKeyInput),KeyUtil.getPrivate(privateKeyInput));
    }
 catch (    Exception e) {
      LOG.error("Error loading Client Private Key",e);
      throw new RuntimeException(e);
    }
 finally {
      IOUtils.closeQuietly(publicKeyInput);
      IOUtils.closeQuietly(privateKeyInput);
    }
  }
  if (kp == null) {
    LOG.debug("Generating Client Key pair");
    OutputStream privateKeyOutput=null;
    OutputStream publicKeyOutput=null;
    try {
      privateKeyOutput=storage.openForWrite(clientPrivateKeyFileLocation);
      publicKeyOutput=storage.openForWrite(clientPublicKeyFileLocation);
      kp=KeyUtil.generateKeyPair(privateKeyOutput,publicKeyOutput);
    }
 catch (    IOException e) {
      LOG.error("Error generating Client Key pair",e);
      throw new RuntimeException(e);
    }
 finally {
      IOUtils.closeQuietly(privateKeyOutput);
      IOUtils.closeQuietly(publicKeyOutput);
    }
  }
  return kp;
}
