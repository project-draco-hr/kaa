{
  LOG.debug("Check if key pair exists {}, {}",clientPublicKeyFileLocation,clientPrivateKeyFileLocation);
  if (keyPair != null) {
    return keyPair;
  }
  if (storage.exists(clientPublicKeyFileLocation) && storage.exists(clientPrivateKeyFileLocation)) {
    InputStream publicKeyInput=null;
    InputStream privateKeyInput=null;
    try {
      publicKeyInput=storage.openForRead(clientPublicKeyFileLocation);
      privateKeyInput=storage.openForRead(clientPrivateKeyFileLocation);
      PublicKey publicKey=KeyUtil.getPublic(publicKeyInput);
      PrivateKey privateKey=KeyUtil.getPrivate(privateKeyInput);
      if (publicKey != null && privateKey != null) {
        keyPair=new KeyPair(publicKey,privateKey);
        if (!KeyUtil.validateKeyPair(keyPair)) {
          throw new InvalidKeyException();
        }
      }
    }
 catch (    InvalidKeyException e) {
      keyPair=null;
      LOG.error("Unable to parse client RSA keypair. Generating new keys.. Reason {}",e);
    }
catch (    Exception e) {
      LOG.error("Error loading client RSA keypair. Reason {}",e);
      throw new RuntimeException(e);
    }
 finally {
      IOUtils.closeQuietly(publicKeyInput);
      IOUtils.closeQuietly(privateKeyInput);
    }
  }
  if (keyPair == null) {
    LOG.debug("Generating Client Key pair");
    OutputStream privateKeyOutput=null;
    OutputStream publicKeyOutput=null;
    try {
      privateKeyOutput=storage.openForWrite(clientPrivateKeyFileLocation);
      publicKeyOutput=storage.openForWrite(clientPublicKeyFileLocation);
      keyPair=KeyUtil.generateKeyPair(privateKeyOutput,publicKeyOutput);
    }
 catch (    IOException e) {
      LOG.error("Error generating Client Key pair",e);
      throw new RuntimeException(e);
    }
 finally {
      IOUtils.closeQuietly(privateKeyOutput);
      IOUtils.closeQuietly(publicKeyOutput);
    }
  }
  return keyPair;
}
