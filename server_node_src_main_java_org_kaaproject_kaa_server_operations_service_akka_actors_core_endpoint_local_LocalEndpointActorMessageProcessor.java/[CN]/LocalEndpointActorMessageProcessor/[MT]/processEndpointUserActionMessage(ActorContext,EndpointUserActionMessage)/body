{
  Set<ChannelMetaData> eventChannels=state.getChannelsByTypes(TransportType.EVENT,TransportType.USER);
  LOG.debug("[{}][{}] Current Endpoint was attached/detached from user. Need to close all current event channels {}",endpointKey,actorKey,eventChannels.size());
  state.setUserRegistrationPending(false);
  state.setProfile(operationsService.refreshServerEndpointProfile(key));
  if (message instanceof EndpointUserAttachMessage) {
    LOG.debug("[{}][{}] Updating endpoint user id to {} in profile",endpointKey,actorKey,message.getUserId());
  }
 else   if (message instanceof EndpointUserDetachMessage) {
    LOG.debug("[{}][{}] Clanup endpoint user id in profile",endpointKey,actorKey,message.getUserId());
  }
  if (!eventChannels.isEmpty()) {
    updateUserConnection(context);
    for (    ChannelMetaData channel : eventChannels) {
      SyncRequestMessage pendingRequest=channel.getRequestMessage();
      ServerSync pendingResponse=channel.getResponseHolder().getResponse();
      UserServerSync userSyncResponse=pendingResponse.getUserSync();
      if (userSyncResponse == null && pendingRequest.isValid(TransportType.USER)) {
        userSyncResponse=new UserServerSync();
        pendingResponse.setUserSync(userSyncResponse);
      }
      if (userSyncResponse != null) {
        if (message instanceof EndpointUserAttachMessage) {
          userSyncResponse.setUserAttachNotification(new UserAttachNotification(message.getUserId(),message.getOriginator()));
          LOG.debug("[{}][{}] Adding user attach notification",endpointKey,actorKey);
        }
 else         if (message instanceof EndpointUserDetachMessage) {
          userSyncResponse.setUserDetachNotification(new UserDetachNotification(message.getOriginator()));
          LOG.debug("[{}][{}] Adding user detach notification",endpointKey,actorKey);
        }
      }
      LOG.debug("[{}][{}] sending reply to [{}] channel",endpointKey,actorKey,channel.getId());
      sendReply(context,pendingRequest,pendingResponse);
      if (!channel.getType().isAsync()) {
        state.removeChannel(channel);
      }
    }
  }
 else {
    LOG.debug("[{}][{}] Message ignored due to no channel contexts registered for events",endpointKey,actorKey,message);
  }
}
