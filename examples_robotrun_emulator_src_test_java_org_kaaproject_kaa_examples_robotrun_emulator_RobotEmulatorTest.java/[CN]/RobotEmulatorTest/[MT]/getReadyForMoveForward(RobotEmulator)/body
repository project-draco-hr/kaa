{
  int i=0;
  while (emu.getCurrentPosition().getBorder(emu.getCurrentDirection()) != BorderType.FREE) {
    if (i >= 4) {
      fail("Error find SOLID border in position X=" + emu.getCurrentPosition().getX() + " Y="+ emu.getCurrentPosition().getY());
    }
    i++;
    final Object objSync=new Object();
    emu.registerTurnCallback(new TurnCallback(){
      @Override public void complete(      OperationStatus status){
        if (status == OperationStatus.FAILED) {
          fail("Turn command failed");
        }
synchronized (objSync) {
          objSync.notify();
        }
      }
    }
);
    emu.turn(TurnDirection.RIGHT,false);
synchronized (objSync) {
      try {
        objSync.wait(emu.getCommandTimeout() + emu.getTimeoutDeviation());
      }
 catch (      InterruptedException e) {
        fail(e.toString());
      }
    }
  }
switch (emu.getCurrentDirection()) {
case NORTH:
    return emu.getLabyrinth().getCell(emu.getCurrentPosition().getX(),emu.getCurrentPosition().getY() - 1);
case SOUTH:
  return emu.getLabyrinth().getCell(emu.getCurrentPosition().getX(),emu.getCurrentPosition().getY() + 1);
case WEST:
return emu.getLabyrinth().getCell(emu.getCurrentPosition().getX() - 1,emu.getCurrentPosition().getY());
case EAST:
return emu.getLabyrinth().getCell(emu.getCurrentPosition().getX() + 1,emu.getCurrentPosition().getY());
}
return null;
}
