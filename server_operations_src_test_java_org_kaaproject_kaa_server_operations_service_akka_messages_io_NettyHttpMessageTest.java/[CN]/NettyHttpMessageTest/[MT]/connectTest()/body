{
  UUID channelId=UUID.randomUUID();
  ChannelHandlerContext ctx=Mockito.mock(ChannelHandlerContext.class);
  ChannelType channelType=ChannelType.TCP;
  SyncCommand command=Mockito.mock(SyncCommand.class);
  Mockito.when(command.getRequestData()).thenReturn("syncRequest".getBytes());
  Mockito.when(command.getRequestkey()).thenReturn("aesSessionKey".getBytes());
  Mockito.when(command.getRequestSignature()).thenReturn("signature".getBytes());
  ResponseBuilder responseBuilder=Mockito.mock(ResponseBuilder.class);
  ErrorBuilder errorBuilder=Mockito.mock(ErrorBuilder.class);
  SyncStatistics stats=Mockito.mock(SyncStatistics.class);
  NettyHttpSyncMessage message=new NettyHttpSyncMessage(channelId,AvroEncDec.AVRO_ENC_DEC_ID,ctx,channelType,command,responseBuilder,errorBuilder,stats);
  Assert.assertEquals(channelId,message.getChannelUuid());
  Assert.assertEquals(channelType,message.getChannelType());
  Assert.assertEquals(ctx,message.getChannelContext());
  Assert.assertEquals(responseBuilder,message.getResponseBuilder());
  Assert.assertEquals(errorBuilder,message.getErrorBuilder());
  Assert.assertEquals(stats,message.getSyncStatistics());
  Assert.assertArrayEquals("syncRequest".getBytes(),message.getEncodedRequestData());
  Assert.assertArrayEquals("aesSessionKey".getBytes(),message.getEncodedSessionKey());
  Assert.assertArrayEquals("signature".getBytes(),message.getSessionKeySignature());
  Assert.assertNotNull(message.toString());
}
