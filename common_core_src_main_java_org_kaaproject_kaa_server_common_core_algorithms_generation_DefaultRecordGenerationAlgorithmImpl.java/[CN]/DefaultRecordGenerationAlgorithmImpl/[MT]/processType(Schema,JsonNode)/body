{
  if (byDefault != null && !byDefault.isNull()) {
    if (byDefault.isArray() && AvroUtils.getSchemaByType(schemaNode,Type.BYTES) != null) {
      ByteBuffer byteBuffer=ByteBuffer.allocate(byDefault.size());
      for (      JsonNode oneByte : byDefault) {
        byteBuffer.put((byte)oneByte.asInt());
      }
      byteBuffer.flip();
      return byteBuffer;
    }
    if (byDefault.isBoolean() && AvroUtils.getSchemaByType(schemaNode,Type.BOOLEAN) != null) {
      return byDefault.asBoolean();
    }
    if (byDefault.isDouble()) {
      if (AvroUtils.getSchemaByType(schemaNode,Type.DOUBLE) != null) {
        return byDefault.asDouble();
      }
 else       if (AvroUtils.getSchemaByType(schemaNode,Type.FLOAT) != null) {
        return (float)byDefault.asDouble();
      }
    }
    if (byDefault.isInt() && AvroUtils.getSchemaByType(schemaNode,Type.INT) != null) {
      return byDefault.asInt();
    }
    if (byDefault.isLong() && AvroUtils.getSchemaByType(schemaNode,Type.LONG) != null) {
      return byDefault.asLong();
    }
    if (byDefault.isTextual() && AvroUtils.getSchemaByType(schemaNode,Type.STRING) != null) {
      return byDefault.asText();
    }
    throw new ConfigurationGenerationException("Default value " + byDefault.toString() + " is not applicable for the field");
  }
  if (AvroUtils.getSchemaByType(schemaNode,Type.NULL) != null) {
    return null;
  }
  Schema schemaToProcess=schemaNode;
  if (schemaToProcess.getType().equals(Type.UNION)) {
    schemaToProcess=schemaToProcess.getTypes().get(0);
  }
switch (schemaToProcess.getType()) {
case ARRAY:
    return processArray(schemaToProcess);
case RECORD:
  return processRecord(schemaToProcess);
case FIXED:
return processFixed(schemaToProcess);
case ENUM:
return processEnum(schemaToProcess);
case BYTES:
ByteBuffer byteBuffer=ByteBuffer.allocate(byDefault.size());
byteBuffer.put((byte)0);
byteBuffer.flip();
return byteBuffer;
case MAP:
throw new ConfigurationGenerationException("Map is not supported.");
case INT:
return new Integer(0);
case BOOLEAN:
return Boolean.FALSE;
case DOUBLE:
return new Double(0.0);
case LONG:
return new Long(0);
case STRING:
return new String("");
case FLOAT:
return new Float(0.0);
default :
return null;
}
}
