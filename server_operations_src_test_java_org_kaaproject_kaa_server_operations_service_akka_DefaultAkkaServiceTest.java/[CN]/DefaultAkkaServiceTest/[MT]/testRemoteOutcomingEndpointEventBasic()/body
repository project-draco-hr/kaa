{
  ChannelHandlerContext channelContextMock=Mockito.mock(ChannelHandlerContext.class);
  AbstractOperationsCommand sourceCommandMock=Mockito.mock(AbstractOperationsCommand.class);
  EndpointProfileDto sourceProfileMock=Mockito.mock(EndpointProfileDto.class);
  EventClassFamilyVersionStateDto ecfVdto=new EventClassFamilyVersionStateDto();
  ecfVdto.setEcfId(ECF1_ID);
  ecfVdto.setVersion(ECF1_VERSION);
  Event event=new Event(0,FQN1,ByteBuffer.wrap(new byte[0]),null,null);
  SyncRequest sourceRequest=new SyncRequest();
  SyncRequestMetaData md=new SyncRequestMetaData();
  md.setApplicationToken(APP_TOKEN);
  md.setEndpointPublicKeyHash(ByteBuffer.wrap(ENDPOINT_PUBLIC_KEY_HASH.getBytes()));
  md.setTimeout(TIMEOUT * 1L);
  sourceRequest.setSyncRequestMetaData(md);
  EventSyncRequest eventRequest=new EventSyncRequest();
  eventRequest.setEvents(Arrays.asList(event));
  sourceRequest.setEventSyncRequest(eventRequest);
  SyncResponse sourceResponse=new SyncResponse();
  sourceResponse.setStatus(SyncResponseResultType.SUCCESS);
  SyncResponseHolder sourceResponseHolder=new SyncResponseHolder(sourceResponse);
  sourceResponseHolder.setEndpointProfile(sourceProfileMock);
  when(sourceCommandMock.decode()).thenReturn(sourceRequest);
  when(operationsService.sync(sourceRequest)).thenReturn(sourceResponseHolder);
  when(sourceProfileMock.getEndpointUserId()).thenReturn(USER_ID);
  when(sourceProfileMock.getEndpointKeyHash()).thenReturn(ENDPOINT_KEY_HASH_SOURCE);
  when(sourceProfileMock.getEcfVersionStates()).thenReturn(Arrays.asList(ecfVdto));
  when(cacheService.getEventClassFamilyIdByEventClassFqn(new EventClassFqnKey(TENANT_ID,FQN1))).thenReturn(ECF1_ID);
  RouteTableKey routeKey=new RouteTableKey(APP_TOKEN,new EventClassFamilyVersion(ECF1_ID,ECF1_VERSION));
  when(cacheService.getRouteKeys(new EventClassFqnVersion(TENANT_ID,FQN1,ECF1_VERSION))).thenReturn(Collections.singleton(routeKey));
  Assert.assertNotNull(akkaService.getActorSystem());
  NettyEncodedRequestMessage sourceMessage=new NettyEncodedRequestMessage("testUUID1",channelContextMock,sourceCommandMock,ChannelType.HTTP_LP);
  akkaService.process(sourceMessage);
  verify(operationsService,Mockito.timeout(TIMEOUT).atLeastOnce()).sync(sourceRequest);
  UserRouteInfo userRouteInfo=new UserRouteInfo(TENANT_ID,USER_ID,SERVER2,RouteOperation.ADD);
  akkaService.getListener().onUserRouteInfo(userRouteInfo);
  RouteTableAddress remoteAddress=new RouteTableAddress(EndpointObjectHash.fromBytes(ENDPOINT_KEY_HASH_TARGET),APP_TOKEN,SERVER2);
  RouteInfo routeInfo=new RouteInfo(TENANT_ID,USER_ID,remoteAddress,Arrays.asList(new EventClassFamilyVersion(ECF1_ID,ECF1_VERSION)));
  TimeUnit.SECONDS.sleep(2);
  akkaService.getListener().onRouteInfo(routeInfo);
  verify(eventService,Mockito.timeout(TIMEOUT).atLeastOnce()).sendEvent(Mockito.any(RemoteEndpointEvent.class));
}
