{
  ChannelHandlerContext channelContextMock=Mockito.mock(ChannelHandlerContext.class);
  AbstractOperationsCommand commandMock=Mockito.mock(AbstractOperationsCommand.class);
  SyncRequest request=new SyncRequest();
  SyncRequestMetaData md=new SyncRequestMetaData();
  md.setApplicationToken(APP_TOKEN);
  md.setEndpointPublicKeyHash(ByteBuffer.wrap(ENDPOINT_PUBLIC_KEY_HASH.getBytes()));
  md.setTimeout(1000l);
  request.setSyncRequestMetaData(md);
  LogSyncRequest logRequest=new LogSyncRequest("logUploadRequest1",new ArrayList<LogEntry>());
  request.setLogSyncRequest(logRequest);
  Mockito.when(commandMock.decode()).thenReturn(request);
  Mockito.when(operationsService.sync(Mockito.any(SyncRequest.class))).thenReturn(noDeltaResponseWithTopicState);
  LogAppender mockAppender=Mockito.mock(LogAppender.class);
  Mockito.when(logAppenderService.getApplicationAppenders(APP_ID)).thenReturn(Collections.singletonList(mockAppender));
  NettyEncodedRequestMessage message=new NettyEncodedRequestMessage("testUUID",channelContextMock,commandMock,ChannelType.HTTP_LP);
  Assert.assertNotNull(akkaService.getActorSystem());
  akkaService.process(message);
  Mockito.verify(operationsService,Mockito.timeout(TIMEOUT).atLeastOnce()).sync(request);
  Mockito.verify(logAppenderService,Mockito.timeout(TIMEOUT).atLeastOnce()).getLogSchema(APP_ID,44);
  Mockito.verify(mockAppender,Mockito.timeout(TIMEOUT).atLeastOnce()).doAppend(Mockito.any(LogEventPack.class));
  Mockito.verify(commandMock,Mockito.timeout(TIMEOUT).atLeastOnce()).encode(Mockito.any(SyncResponse.class));
}
