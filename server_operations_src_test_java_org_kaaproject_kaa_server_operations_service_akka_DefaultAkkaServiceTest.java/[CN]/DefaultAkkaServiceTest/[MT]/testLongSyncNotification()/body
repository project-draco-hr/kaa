{
  ChannelHandlerContext channelContextMock=Mockito.mock(ChannelHandlerContext.class);
  SyncRequest request=new SyncRequest();
  request.setRequestId(REQUEST_ID);
  SyncRequestMetaData md=new SyncRequestMetaData();
  md.setApplicationToken(APP_TOKEN);
  md.setEndpointPublicKeyHash(clientPublicKeyHash);
  md.setTimeout(2l * TIMEOUT);
  request.setSyncRequestMetaData(md);
  ConfigurationSyncRequest csRequest=new ConfigurationSyncRequest();
  request.setConfigurationSyncRequest(csRequest);
  Mockito.when(cacheService.getEndpointKey(EndpointObjectHash.fromBytes(clientPublicKeyHash.array()))).thenReturn(clientPair.getPublic());
  Mockito.when(operationsService.sync(Mockito.any(ClientSync.class),Mockito.any(EndpointProfileDto.class))).thenReturn(noDeltaResponse);
  ResponseBuilder responseBuilder=Mockito.mock(ResponseBuilder.class);
  ErrorBuilder errorBuilder=Mockito.mock(ErrorBuilder.class);
  SessionInitRequest message=toSignedRequest(UUID.randomUUID(),ChannelType.HTTP_LP,channelContextMock,request,responseBuilder,errorBuilder);
  Assert.assertNotNull(akkaService.getActorSystem());
  akkaService.process(message);
  Mockito.verify(operationsService,Mockito.timeout(TIMEOUT / 2).atLeastOnce()).sync(AvroEncDec.convert(request),null);
  Mockito.when(applicationService.findAppById(APP_ID)).thenReturn(applicationDto);
  Mockito.when(operationsService.sync(Mockito.any(ClientSync.class),Mockito.any(EndpointProfileDto.class))).thenReturn(deltaResponse);
  Notification thriftNotification=new Notification();
  thriftNotification.setAppId(APP_ID);
  akkaService.onNotification(thriftNotification);
  Mockito.verify(responseBuilder,Mockito.timeout(TIMEOUT).atLeastOnce()).build(Mockito.any(byte[].class),Mockito.any(boolean.class));
}
