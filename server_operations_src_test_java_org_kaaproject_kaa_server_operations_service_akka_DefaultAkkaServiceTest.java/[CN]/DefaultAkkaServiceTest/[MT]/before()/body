{
  akkaService=new DefaultAkkaService();
  AkkaContext context=new AkkaContext();
  cacheService=mock(CacheService.class);
  metricsService=mock(MetricsService.class);
  keyStoreService=mock(KeyStoreService.class);
  operationsService=mock(OperationsService.class);
  notificationDeltaService=mock(NotificationDeltaService.class);
  applicationService=mock(ApplicationService.class);
  eventService=mock(EventService.class);
  logAppenderService=mock(LogAppenderService.class);
  endpointUserService=mock(EndpointUserService.class);
  ReflectionTestUtils.setField(context,"cacheService",cacheService);
  ReflectionTestUtils.setField(context,"metricsService",metricsService);
  ReflectionTestUtils.setField(context,"keyStoreService",keyStoreService);
  ReflectionTestUtils.setField(context,"operationsService",operationsService);
  ReflectionTestUtils.setField(context,"notificationDeltaService",notificationDeltaService);
  ReflectionTestUtils.setField(context,"applicationService",applicationService);
  ReflectionTestUtils.setField(context,"eventService",eventService);
  ReflectionTestUtils.setField(context,"logAppenderService",logAppenderService);
  ReflectionTestUtils.setField(context,"endpointUserService",endpointUserService);
  clientPair=KeyUtil.generateKeyPair();
  targetPair=KeyUtil.generateKeyPair();
  serverPair=KeyUtil.generateKeyPair();
  Mockito.when(keyStoreService.getPublicKey()).thenReturn(serverPair.getPublic());
  Mockito.when(keyStoreService.getPrivateKey()).thenReturn(serverPair.getPrivate());
  Mockito.when(metricsService.createMeter(Mockito.anyString(),Mockito.anyString())).thenReturn(Mockito.mock(MeterClient.class));
  ReflectionTestUtils.setField(akkaService,"context",context);
  if (akkaService.getActorSystem() == null) {
    akkaService.initActorSystem();
  }
  clientPublicKey=ByteBuffer.wrap(clientPair.getPublic().getEncoded());
  clientPublicKeyHash=ByteBuffer.wrap(SHA1HashUtils.hashToBytes(clientPair.getPublic().getEncoded()));
  targetPublicKeyHash=ByteBuffer.wrap(SHA1HashUtils.hashToBytes(targetPair.getPublic().getEncoded()));
  Mockito.when(cacheService.getTenantIdByAppToken(APP_TOKEN)).thenReturn(TENANT_ID);
  Mockito.when(cacheService.getAppTokenBySdkToken(SDK_TOKEN)).thenReturn(APP_TOKEN);
  Mockito.when(cacheService.getAppTokenBySdkToken(INVALID_SDK_TOKEN)).thenReturn(null);
  Mockito.when(cacheService.getEndpointKey(EndpointObjectHash.fromBytes(clientPublicKeyHash.array()))).thenReturn(clientPair.getPublic());
  Mockito.when(cacheService.getEndpointKey(EndpointObjectHash.fromBytes(targetPublicKeyHash.array()))).thenReturn(targetPair.getPublic());
  applicationDto=new ApplicationDto();
  applicationDto.setId(APP_ID);
  applicationDto.setApplicationToken(APP_TOKEN);
  ServerSync response=new ServerSync();
  response.setRequestId(REQUEST_ID);
  response.setStatus(org.kaaproject.kaa.server.sync.SyncStatus.SUCCESS);
  ConfigurationServerSync confSyncResponse=new ConfigurationServerSync();
  confSyncResponse.setResponseStatus(org.kaaproject.kaa.server.sync.SyncResponseStatus.NO_DELTA);
  response.setConfigurationSync(confSyncResponse);
  noDeltaResponse=new SyncContext(response);
  Map<String,Integer> subscriptionStates=new HashMap<>();
  subscriptionStates.put(TOPIC_ID,new Integer(0));
  noDeltaResponseWithTopicState=new SyncContext(response);
  noDeltaResponseWithTopicState.setSubscriptionStates(subscriptionStates);
  EndpointProfileDto epDto=new EndpointProfileDto();
  epDto.setSystemNfVersion(42);
  epDto.setUserNfVersion(43);
  epDto.setLogSchemaVersion(44);
  noDeltaResponseWithTopicState.setEndpointProfile(epDto);
  response=new ServerSync();
  response.setStatus(org.kaaproject.kaa.server.sync.SyncStatus.SUCCESS);
  confSyncResponse=new ConfigurationServerSync();
  confSyncResponse.setResponseStatus(org.kaaproject.kaa.server.sync.SyncResponseStatus.DELTA);
  response.setConfigurationSync(confSyncResponse);
  deltaResponse=new SyncContext(response);
  response=new ServerSync();
  response.setRequestId(REQUEST_ID);
  response.setStatus(org.kaaproject.kaa.server.sync.SyncStatus.SUCCESS);
  simpleResponse=new SyncContext(response);
  topicNotification=new NotificationDto();
  topicNotification.setApplicationId(APP_ID);
  topicNotification.setTopicId(TOPIC_ID);
  topicNotification.setId(UNICAST_NOTIFICATION_ID);
  topicNotification.setExpiredAt(new Date(System.currentTimeMillis() + TimeUnit.DAYS.toMillis(7)));
  topicNotification.setSecNum(1);
  topicNotification.setVersion(42);
  topicNotification.setType(NotificationTypeDto.SYSTEM);
  topicNotification.setBody("I am a dummy notification".getBytes());
  when(applicationService.findAppByApplicationToken(APP_TOKEN)).thenReturn(applicationDto);
  when(applicationService.findAppById(APP_ID)).thenReturn(applicationDto);
  when(endpointUserService.findUserVerifiers(APP_ID)).thenReturn(new ArrayList<UserVerifierDto>());
  when(eventService.isMainUserNode(Mockito.anyString())).thenReturn(true);
}
