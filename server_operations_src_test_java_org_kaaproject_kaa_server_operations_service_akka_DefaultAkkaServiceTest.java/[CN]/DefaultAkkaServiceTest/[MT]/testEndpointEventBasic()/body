{
  ChannelHandlerContext channelContextMock=Mockito.mock(ChannelHandlerContext.class);
  AbstractOperationsCommand sourceCommandMock=Mockito.mock(AbstractOperationsCommand.class);
  AbstractOperationsCommand targetCommandMock=Mockito.mock(AbstractOperationsCommand.class);
  EndpointProfileDto sourceProfileMock=Mockito.mock(EndpointProfileDto.class);
  EndpointProfileDto targetProfileMock=Mockito.mock(EndpointProfileDto.class);
  EventClassFamilyVersionStateDto ecfVdto=new EventClassFamilyVersionStateDto();
  ecfVdto.setEcfId(ECF1_ID);
  ecfVdto.setVersion(ECF1_VERSION);
  Event event=new Event(0,FQN1,ByteBuffer.wrap(new byte[0]),null,null);
  SyncRequest sourceRequest=new SyncRequest();
  SyncRequestMetaData md=new SyncRequestMetaData();
  md.setApplicationToken(APP_TOKEN);
  md.setEndpointPublicKeyHash(ByteBuffer.wrap(ENDPOINT_PUBLIC_KEY_HASH.getBytes()));
  md.setTimeout(TIMEOUT * 1L);
  sourceRequest.setSyncRequestMetaData(md);
  EventSyncRequest eventRequest=new EventSyncRequest();
  eventRequest.setEvents(Arrays.asList(event));
  sourceRequest.setEventSyncRequest(eventRequest);
  SyncResponse sourceResponse=new SyncResponse();
  sourceResponse.setStatus(SyncResponseResultType.SUCCESS);
  SyncResponseHolder sourceResponseHolder=new SyncResponseHolder(sourceResponse);
  sourceResponseHolder.setEndpointProfile(sourceProfileMock);
  SyncRequest targetRequest=new SyncRequest();
  md=new SyncRequestMetaData();
  md.setApplicationToken(APP_TOKEN);
  md.setEndpointPublicKeyHash(ByteBuffer.wrap(ENDPOINT_KEY_HASH_TARGET));
  md.setTimeout(TIMEOUT * 1L);
  targetRequest.setSyncRequestMetaData(md);
  targetRequest.setEventSyncRequest(new EventSyncRequest());
  SyncResponse targetResponse=new SyncResponse();
  targetResponse.setStatus(SyncResponseResultType.SUCCESS);
  SyncResponseHolder targetResponseHolder=new SyncResponseHolder(targetResponse);
  targetResponseHolder.setEndpointProfile(targetProfileMock);
  when(sourceCommandMock.decode()).thenReturn(sourceRequest);
  when(targetCommandMock.decode()).thenReturn(targetRequest);
  when(operationsService.sync(sourceRequest)).thenReturn(sourceResponseHolder);
  when(operationsService.sync(targetRequest)).thenReturn(targetResponseHolder);
  when(sourceProfileMock.getEndpointUserId()).thenReturn(USER_ID);
  when(sourceProfileMock.getEndpointKeyHash()).thenReturn(ENDPOINT_KEY_HASH_SOURCE);
  when(sourceProfileMock.getEcfVersionStates()).thenReturn(Arrays.asList(ecfVdto));
  when(targetProfileMock.getEndpointUserId()).thenReturn(USER_ID);
  when(targetProfileMock.getEndpointKeyHash()).thenReturn(ENDPOINT_KEY_HASH_TARGET);
  when(targetProfileMock.getEcfVersionStates()).thenReturn(Arrays.asList(ecfVdto));
  when(cacheService.getEventClassFamilyIdByEventClassFqn(new EventClassFqnKey(TENANT_ID,FQN1))).thenReturn(ECF1_ID);
  RouteTableKey routeKey=new RouteTableKey(APP_TOKEN,new EventClassFamilyVersion(ECF1_ID,ECF1_VERSION));
  when(cacheService.getRouteKeys(new EventClassFqnVersion(TENANT_ID,FQN1,ECF1_VERSION))).thenReturn(Collections.singleton(routeKey));
  Assert.assertNotNull(akkaService.getActorSystem());
  NettyEncodedRequestMessage sourceMessage=new NettyEncodedRequestMessage("testUUID1",channelContextMock,sourceCommandMock,ChannelType.HTTP_LP);
  akkaService.process(sourceMessage);
  NettyEncodedRequestMessage targetMessage=new NettyEncodedRequestMessage("testUUID2",channelContextMock,targetCommandMock,ChannelType.HTTP_LP);
  akkaService.process(targetMessage);
  verify(operationsService,Mockito.timeout(TIMEOUT).atLeastOnce()).sync(sourceRequest);
  verify(operationsService,Mockito.timeout(TIMEOUT).atLeastOnce()).sync(targetRequest);
  SyncResponse eventResponse=new SyncResponse();
  eventResponse.setStatus(SyncResponseResultType.SUCCESS);
  eventResponse.setEventSyncResponse(new EventSyncResponse());
  eventResponse.getEventSyncResponse().setEvents(Arrays.asList(event));
  verify(targetCommandMock,Mockito.timeout(TIMEOUT).atLeastOnce()).encode(eventResponse);
}
