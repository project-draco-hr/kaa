{
  ChannelHandlerContext channelContextMock=Mockito.mock(ChannelHandlerContext.class);
  MessageEncoderDecoder targetCrypt=new MessageEncoderDecoder(targetPair.getPrivate(),targetPair.getPublic(),serverPair.getPublic());
  EndpointProfileDto targetProfileMock=Mockito.mock(EndpointProfileDto.class);
  EventClassFamilyVersionStateDto ecfVdto=new EventClassFamilyVersionStateDto();
  ecfVdto.setEcfId(ECF1_ID);
  ecfVdto.setVersion(ECF1_VERSION);
  SyncRequest targetRequest=new SyncRequest();
  targetRequest.setRequestId(REQUEST_ID);
  SyncRequestMetaData md=new SyncRequestMetaData();
  md.setApplicationToken(APP_TOKEN);
  md.setEndpointPublicKeyHash(targetPublicKeyHash);
  md.setTimeout(TIMEOUT * 1L);
  targetRequest.setSyncRequestMetaData(md);
  targetRequest.setEventSyncRequest(new EventSyncRequest());
  ServerSync targetResponse=new ServerSync();
  targetResponse.setRequestId(REQUEST_ID);
  targetResponse.setStatus(org.kaaproject.kaa.server.operations.pojo.sync.SyncStatus.SUCCESS);
  targetResponse.setUserSync(new UserServerSync());
  SyncResponseHolder targetResponseHolder=new SyncResponseHolder(targetResponse);
  targetResponseHolder.setEndpointProfile(targetProfileMock);
  when(operationsService.sync(AvroEncDec.convert(targetRequest),null)).thenReturn(targetResponseHolder);
  when(targetProfileMock.getEndpointUserId()).thenReturn(USER_ID);
  when(targetProfileMock.getEndpointKeyHash()).thenReturn(targetPublicKeyHash.array());
  when(targetProfileMock.getEcfVersionStates()).thenReturn(Arrays.asList(ecfVdto));
  when(cacheService.getEventClassFamilyIdByEventClassFqn(new EventClassFqnKey(TENANT_ID,FQN1))).thenReturn(ECF1_ID);
  RouteTableKey routeKey=new RouteTableKey(APP_TOKEN,new EventClassFamilyVersion(ECF1_ID,ECF1_VERSION));
  when(cacheService.getRouteKeys(new EventClassFqnVersion(TENANT_ID,FQN1,ECF1_VERSION))).thenReturn(Collections.singleton(routeKey));
  Assert.assertNotNull(akkaService.getActorSystem());
  ResponseBuilder targetResponseBuilder=Mockito.mock(ResponseBuilder.class);
  ErrorBuilder targetErrorBuilder=Mockito.mock(ErrorBuilder.class);
  SessionInitRequest targetMessage=toSignedRequest(UUID.randomUUID(),ChannelType.HTTP_LP,channelContextMock,targetRequest,targetResponseBuilder,targetErrorBuilder,targetCrypt);
  akkaService.process(targetMessage);
  Mockito.verify(operationsService,Mockito.timeout(TIMEOUT).atLeastOnce()).sync(AvroEncDec.convert(targetRequest),null);
  Mockito.verify(eventService,Mockito.timeout(TIMEOUT).atLeastOnce()).sendUserRouteInfo(new UserRouteInfo(TENANT_ID,USER_ID));
  EndpointProfileDto sourceProfileMock=Mockito.mock(EndpointProfileDto.class);
  SyncRequest sourceRequest=new SyncRequest();
  sourceRequest.setRequestId(REQUEST_ID);
  SyncRequestMetaData sourceMd=new SyncRequestMetaData();
  sourceMd.setApplicationToken(APP_TOKEN);
  sourceMd.setEndpointPublicKeyHash(clientPublicKeyHash);
  sourceMd.setTimeout(TIMEOUT * 1L);
  sourceRequest.setSyncRequestMetaData(sourceMd);
  sourceRequest.setEventSyncRequest(new EventSyncRequest());
  UserSyncRequest userSyncRequest=new UserSyncRequest();
  EndpointDetachRequest eaRequest=new EndpointDetachRequest("request1",Base64Util.encode(targetPublicKeyHash.array()));
  userSyncRequest.setEndpointDetachRequests(Collections.singletonList(eaRequest));
  sourceRequest.setUserSyncRequest(userSyncRequest);
  ServerSync sourceResponse=new ServerSync();
  sourceResponse.setRequestId(REQUEST_ID);
  sourceResponse.setStatus(org.kaaproject.kaa.server.operations.pojo.sync.SyncStatus.SUCCESS);
  UserServerSync userSyncResponse=new UserServerSync();
  userSyncResponse.setEndpointDetachResponses(Collections.singletonList(new org.kaaproject.kaa.server.operations.pojo.sync.EndpointDetachResponse("request1",org.kaaproject.kaa.server.operations.pojo.sync.SyncStatus.SUCCESS)));
  sourceResponse.setUserSync(userSyncResponse);
  SyncResponseHolder sourceResponseHolder=new SyncResponseHolder(sourceResponse);
  sourceResponseHolder.setEndpointProfile(sourceProfileMock);
  when(operationsService.sync(AvroEncDec.convert(sourceRequest),null)).thenReturn(sourceResponseHolder);
  when(sourceProfileMock.getEndpointUserId()).thenReturn(USER_ID);
  when(sourceProfileMock.getEndpointKeyHash()).thenReturn(clientPublicKeyHash.array());
  when(sourceProfileMock.getEcfVersionStates()).thenReturn(Arrays.asList(ecfVdto));
  ResponseBuilder sourceResponseBuilder=Mockito.mock(ResponseBuilder.class);
  ErrorBuilder sourceErrorBuilder=Mockito.mock(ErrorBuilder.class);
  SessionInitRequest sourceMessage=toSignedRequest(UUID.randomUUID(),ChannelType.HTTP_LP,channelContextMock,sourceRequest,sourceResponseBuilder,sourceErrorBuilder);
  akkaService.process(sourceMessage);
  Mockito.verify(operationsService,Mockito.timeout(TIMEOUT).atLeastOnce()).sync(AvroEncDec.convert(sourceRequest),null);
  SyncResponse targetSyncResponse=new SyncResponse();
  targetSyncResponse.setRequestId(REQUEST_ID);
  targetSyncResponse.setStatus(SyncResponseResultType.SUCCESS);
  targetSyncResponse.setUserSyncResponse(new UserSyncResponse());
  targetSyncResponse.getUserSyncResponse().setUserDetachNotification(new UserDetachNotification(Base64Util.encode(clientPublicKeyHash.array())));
  AvroByteArrayConverter<SyncResponse> responseConverter=new AvroByteArrayConverter<>(SyncResponse.class);
  byte[] response=responseConverter.toByteArray(targetSyncResponse);
  byte[] encodedData=targetCrypt.encodeData(response);
  Mockito.verify(targetResponseBuilder,Mockito.timeout(TIMEOUT).atLeastOnce()).build(encodedData,true);
}
