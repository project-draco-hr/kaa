{
  ChannelContext channelContextMock=Mockito.mock(ChannelContext.class);
  SyncRequest request=new SyncRequest();
  request.setRequestId(REQUEST_ID);
  SyncRequestMetaData md=new SyncRequestMetaData();
  md.setApplicationToken(APP_TOKEN);
  md.setEndpointPublicKeyHash(clientPublicKeyHash);
  request.setSyncRequestMetaData(md);
  SyncResponseHolder holder=simpleResponse;
  Mockito.when(cacheService.getEndpointKey(EndpointObjectHash.fromBytes(clientPublicKeyHash.array()))).thenReturn(clientPair.getPublic());
  Mockito.when(operationsService.sync(AvroEncDec.convert(request),null)).thenReturn(holder);
  Assert.assertNotNull(akkaService.getActorSystem());
  MessageBuilder responseBuilder=Mockito.mock(MessageBuilder.class);
  ErrorBuilder errorBuilder=Mockito.mock(ErrorBuilder.class);
  SessionInitMessage message1=toSignedRequest(UUID.randomUUID(),ChannelType.HTTP,channelContextMock,request,responseBuilder,errorBuilder);
  SessionInitMessage message2=toSignedRequest(UUID.randomUUID(),ChannelType.HTTP,channelContextMock,request,responseBuilder,errorBuilder);
  akkaService.process(message1);
  akkaService.process(message2);
  Mockito.verify(operationsService,Mockito.timeout(TIMEOUT).atLeast(2)).sync(AvroEncDec.convert(request),null);
  Mockito.verify(responseBuilder,Mockito.timeout(TIMEOUT).atLeast(2)).build(Mockito.any(byte[].class),Mockito.any(boolean.class));
}
