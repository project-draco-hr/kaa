{
  CTLSchemaInfoDto schema=new CTLSchemaInfoDto();
  try {
    ObjectNode object=new ObjectMapper().readValue(body,ObjectNode.class);
    if (!object.has("type") || !object.get("type").isTextual() || !object.get("type").getTextValue().equals("record")) {
      throw new IllegalArgumentException("The data provided is not a record!");
    }
    if (!object.has("namespace") || !object.get("namespace").isTextual()) {
      throw new IllegalArgumentException("No namespace specified!");
    }
 else     if (!object.has("name") || !object.get("name").isTextual()) {
      throw new IllegalArgumentException("No name specified!");
    }
 else {
      schema.setFqn(object.get("namespace").getTextValue() + "." + object.get("name").getTextValue());
    }
    if (!object.has("version") || !object.get("version").isInt()) {
      throw new IllegalArgumentException("No version specified!");
    }
 else {
      schema.setVersion(object.get("version").asInt());
    }
    schema.setTenantId(this.getCurrentUser().getTenantId());
    if (object.has("application") && object.get("application").isTextual()) {
      schema.setApplicationId(object.get("application").asText());
    }
    String tenantId=this.getCurrentUser().getTenantId();
    if (tenantId != null && schema.getApplicationId() != null) {
      schema.setScope(CTLSchemaScopeDto.APPLICATION);
    }
 else     if (tenantId != null && schema.getApplicationId() == null) {
      schema.setScope(CTLSchemaScopeDto.TENANT);
    }
 else     if (tenantId == null && schema.getApplicationId() == null) {
      schema.setScope(CTLSchemaScopeDto.SYSTEM);
    }
 else {
      throw new IllegalArgumentException("You do not have permission to perform this operation!");
    }
    Set<CTLSchemaMetaInfoDto> dependencies=new HashSet<>();
    if (!object.has("dependencies")) {
      schema.setDependencies(dependencies);
    }
 else     if (!object.get("dependencies").isArray()) {
      throw new IllegalArgumentException("Illegal dependencies format!");
    }
 else {
      for (      JsonNode child : object.get("dependencies")) {
        if (!child.isObject() || !child.has("fqn") || !child.get("fqn").isTextual()|| !child.has("version")|| !child.get("version").isInt()) {
          throw new IllegalArgumentException("Illegal dependency format!");
        }
 else {
          dependencies.add(new CTLSchemaMetaInfoDto(child.get("fqn").asText(),child.get("version").asInt()));
        }
        schema.setDependencies(dependencies);
      }
    }
    schema.setBody(body);
  }
 catch (  Exception cause) {
    throw Utils.handleException(cause);
  }
  return this.saveCTLSchema(schema);
}
