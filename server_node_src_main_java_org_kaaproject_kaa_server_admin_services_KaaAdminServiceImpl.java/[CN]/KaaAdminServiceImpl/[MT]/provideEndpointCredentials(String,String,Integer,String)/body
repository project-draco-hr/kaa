{
  this.checkAuthority(KaaAuthorityDto.TENANT_ADMIN,KaaAuthorityDto.TENANT_DEVELOPER,KaaAuthorityDto.TENANT_USER);
  try {
    this.checkApplicationId(applicationId);
    if (StringUtils.isEmpty(publicKey)) {
      throw new IllegalArgumentException("The public key provided is empty!");
    }
    byte[] endpointKey=publicKey.getBytes();
    byte[] endpointKeyHash=EndpointObjectHash.fromSHA1(publicKey).getData();
    if (serverProfileVersion != null && serverProfileBody != null) {
      ServerProfileSchemaDto serverProfileSchema=this.getServerProfileSchema(applicationId,serverProfileVersion);
      this.validateServerProfile(serverProfileSchema,serverProfileBody);
    }
 else     if (serverProfileVersion != null || serverProfileBody != null) {
      String missingParameter=(serverProfileVersion == null ? "schema version" : "body");
      String message=MessageFormat.format("The server-side endpoint profile {0} provided is empty!",missingParameter);
      throw new IllegalArgumentException(message);
    }
    EndpointCredentialsDto endpointCredentials;
    endpointCredentials=new EndpointCredentialsDto(applicationId,endpointKey,endpointKeyHash,serverProfileVersion,serverProfileBody);
    return this.controlService.saveEndpointCredentials(endpointCredentials);
  }
 catch (  Exception cause) {
    throw Utils.handleException(cause);
  }
}
