{
  checkAuthority(KaaAuthorityDto.TENANT_USER,KaaAuthorityDto.TENANT_DEVELOPER,KaaAuthorityDto.KAA_ADMIN,KaaAuthorityDto.TENANT_ADMIN);
  try {
    if (!userProfileUpdateDto.getUsername().equals(getCurrentUser().getUsername())) {
      throw new IllegalArgumentException("Username is not valid.");
    }
    if (!userProfileUpdateDto.getAuthority().equals(getCurrentUser().getAuthority())) {
      throw new IllegalArgumentException("Authority is not valid.");
    }
    org.kaaproject.kaa.common.dto.admin.UserDto userDto=new org.kaaproject.kaa.common.dto.admin.UserDto();
    userDto.setUsername(userProfileUpdateDto.getUsername());
    userDto.setFirstName(userProfileUpdateDto.getFirstName());
    userDto.setLastName(userProfileUpdateDto.getLastName());
    userDto.setMail(userProfileUpdateDto.getMail());
    userDto.setAuthority(userProfileUpdateDto.getAuthority());
    userDto.setExternalUid(getCurrentUser().getExternalUid());
    checkUserProfile(userDto);
    saveUser(userDto);
  }
 catch (  Exception e) {
    throw Utils.handleException(e);
  }
}
