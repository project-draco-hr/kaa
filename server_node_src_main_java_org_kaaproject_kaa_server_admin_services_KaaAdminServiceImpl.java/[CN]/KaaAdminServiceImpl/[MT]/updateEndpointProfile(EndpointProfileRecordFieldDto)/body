{
  checkAuthority(KaaAuthorityDto.TENANT_DEVELOPER,KaaAuthorityDto.TENANT_USER);
  try {
    RecordField profileRecord=endpointProfileRecordDto.getProfileRecord();
    EndpointProfileDto endpointProfileDto=endpointProfileRecordDto.getProfileDto();
    String schemaId=endpointProfileDto.getServerProfileSchemaId();
    if (schemaId != null && profileRecord != null) {
      GenericRecord record=FormAvroConverter.createGenericRecordFromRecordField(profileRecord);
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      JsonGenerator jsonGenerator=new JsonFactory().createJsonGenerator(baos,JsonEncoding.UTF8);
      jsonGenerator.useDefaultPrettyPrinter();
      JsonEncoder jsonEncoder=EncoderFactory.get().jsonEncoder(record.getSchema(),jsonGenerator);
      DatumWriter<GenericRecord> datumWriter=new GenericDatumWriter<GenericRecord>(record.getSchema());
      datumWriter.write(record,jsonEncoder);
      jsonEncoder.flush();
      baos.flush();
      endpointProfileDto.setServerProfile(new String(baos.toByteArray(),Charset.forName("UTF-8")));
    }
    EndpointProfileDto profileDto=controlService.updateEndpointProfile(endpointProfileDto);
    checkApplicationId(profileDto.getApplicationId());
    endpointProfileRecordDto.setProfileDto(profileDto);
    return endpointProfileRecordDto;
  }
 catch (  Exception e) {
    throw Utils.handleException(e);
  }
}
