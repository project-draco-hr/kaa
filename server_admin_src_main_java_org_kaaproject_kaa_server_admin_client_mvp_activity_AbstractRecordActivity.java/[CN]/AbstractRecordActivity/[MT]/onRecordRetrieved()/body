{
  if (create) {
    getVacantSchemas(endpointGroupId,new AsyncCallback<List<SchemaDto>>(){
      @Override public void onFailure(      Throwable caught){
        Utils.handleException(caught,recordView);
      }
      @Override public void onSuccess(      List<SchemaDto> result){
        recordView.getSchema().setValue(Utils.getMaxSchemaVersions(result));
        recordView.getSchema().setAcceptableValues(result);
        recordView.getRecordPanel().setData(record);
        recordView.getRecordPanel().openDraft();
      }
    }
);
  }
 else {
    String version=record.getMajorVersion() + "." + record.getMinorVersion();
    recordView.getSchemaVersion().setValue(version);
    if (record.hasActive() && !record.hasDraft()) {
      T inactiveStruct=createInactiveStruct();
      inactiveStruct.setSchemaId(record.getSchemaId());
      inactiveStruct.setMajorVersion(record.getMajorVersion());
      inactiveStruct.setMinorVersion(record.getMinorVersion());
      inactiveStruct.setDescription(record.getDescription());
      copyBody(record.getActiveStructureDto(),inactiveStruct);
      record.setInactiveStructureDto(inactiveStruct);
    }
    recordView.getRecordPanel().setData(record);
    if (endpointGroup.getWeight() == 0) {
      recordView.getRecordPanel().setReadOnly();
    }
    if (showActive && record.hasActive()) {
      recordView.getRecordPanel().openActive();
    }
 else {
      recordView.getRecordPanel().openDraft();
    }
  }
}
