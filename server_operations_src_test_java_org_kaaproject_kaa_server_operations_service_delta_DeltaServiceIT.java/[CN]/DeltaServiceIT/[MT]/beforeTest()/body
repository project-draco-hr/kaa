{
  String dataSchema=OperationsServiceIT.getResourceAsString(OperationsServiceIT.DATA_SCHEMA_LOCATION);
  PROFILE_BYTES=avroConverter.encode(ENDPOINT_PROFILE);
  PROFILE_JSON=avroConverter.endcodeToJson(ENDPOINT_PROFILE);
  customerDto=new Tenant();
  customerDto.setName(CUSTOMER_ID);
  customerDto=customerDao.save(customerDto);
  assertNotNull(customerDto);
  assertNotNull(customerDto.getId());
  app=new ApplicationDto();
  app.setTenantId(customerDto.getId());
  app.setApplicationToken(APPLICATION_ID);
  app.setName(APPLICATION_NAME);
  app.setSequenceNumber(NEW_APPLICATION_SEQ_NUMBER);
  app=applicationService.saveApp(app);
  assertNotNull(app);
  assertNotNull(app.getId());
  EndpointGroup groupAll=endpointGroupDao.findByAppIdAndWeight(app.getId(),0);
  ProfileSchema profileSchemaObj=new ProfileSchema();
  profileSchemaObj.setMajorVersion(PROFILE_SCHEMA_VERSION);
  profileSchemaObj.setMinorVersion(0);
  profileSchemaObj.setSchema(BasicEndpointProfile.SCHEMA$.toString());
  profileSchemaObj.setApplicationId(idToObjectId(app.getId()));
  profileSchema=profileService.saveProfileSchema(profileSchemaObj.toDto());
  EndpointGroup endpointGroup=new EndpointGroup();
  endpointGroup.setApplicationId(new ObjectId(app.getId()));
  endpointGroup.setName("Test group");
  endpointGroup.setWeight(277);
  endpointGroup.setDescription("Test Description");
  endpointGroup=endpointGroupDao.save(endpointGroup);
  ProfileFilter profileFilterObj=new ProfileFilter();
  profileFilterObj.setApplicationId(idToObjectId(app.getId()));
  profileFilterObj.setEndpointGroupId(idToObjectId(endpointGroup.getId()));
  profileFilterObj.setBody("profileBody.contains(\"dummy\")");
  profileFilterObj.setSchemaId(idToObjectId(profileSchema.getId()));
  profileFilter=profileService.saveProfileFilter(profileFilterObj.toDto());
  profileService.activateProfileFilter(profileFilter.getId(),null);
  confSchema=new ConfigurationSchema();
  confSchema.setApplicationId(idToObjectId(app.getId()));
  confSchema.setMajorVersion(CONF_SCHEMA_VERSION);
  confSchema.setSchema(dataSchema);
  try {
    confSchema=new ConfigurationSchema(configurationService.saveConfSchema(confSchema.toDto()));
  }
 catch (  IncorrectParameterException e) {
    Assert.fail("Can't generate schemas");
  }
  Assert.assertNotNull(confSchema);
  Assert.assertNotNull(confSchema.getId());
  egAllId=groupAll.getId();
  pfAllId=profileFilter.getId();
  ConfigurationDto confDto=configurationService.findConfigurationByEndpointGroupIdAndVersion(egAllId,CONF_SCHEMA_VERSION);
  cfAllId=confDto.getId();
  endpointConfiguration=new EndpointConfiguration();
  endpointConfiguration.setConfiguration(confDto.getBinaryBody());
  endpointConfiguration.setConfigurationHash(EndpointObjectHash.fromSHA1(confDto.getBody()).getData());
  endpointConfiguration=endpointConfigurationDao.save(endpointConfiguration);
  assertNotNull(endpointConfiguration);
  assertNotNull(endpointConfiguration.getId());
  EndpointGroupState egs=new EndpointGroupState();
  egs.setConfigurationId(idToObjectId(cfAllId));
  egs.setEndpointGroupId(idToObjectId(egAllId));
  egs.setProfileFilterId(idToObjectId(pfAllId));
  endpointProfile=new EndpointProfile();
  endpointProfile.setProfile((DBObject)JSON.parse(PROFILE_JSON));
  endpointProfile.setProfileHash(EndpointObjectHash.fromSHA1(PROFILE_BYTES).getData());
  endpointProfile.setConfigurationHash(endpointConfiguration.getConfigurationHash());
  endpointProfile.setConfigurationVersion(MAJOR_VERSION);
  endpointProfile.setProfileVersion(PROFILE_VERSION);
  endpointProfile.setEndpointGroup(Collections.singletonList(egs));
  endpointProfile=endpointProfileDao.save(endpointProfile);
  assertNotNull(endpointProfile);
  assertNotNull(endpointProfile.getId());
}
