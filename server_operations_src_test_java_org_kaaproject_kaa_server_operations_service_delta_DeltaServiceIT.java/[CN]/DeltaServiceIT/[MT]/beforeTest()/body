{
  String dataSchema=OperationsServiceIT.getResourceAsString(OperationsServiceIT.DATA_SCHEMA_LOCATION);
  PROFILE_BYTES=avroConverter.encode(ENDPOINT_PROFILE);
  PROFILE_JSON=avroConverter.encodeToJson(ENDPOINT_PROFILE);
  tenant=new TenantDto();
  tenant.setName(CUSTOMER_ID);
  tenant=userService.saveTenant(tenant);
  assertNotNull(tenant);
  assertNotNull(tenant.getId());
  ApplicationDto applicationDto=new ApplicationDto();
  applicationDto.setTenantId(tenant.getId());
  applicationDto.setApplicationToken(APPLICATION_ID);
  applicationDto.setName(APPLICATION_NAME);
  applicationDto.setSequenceNumber(NEW_APPLICATION_SEQ_NUMBER);
  applicationDto=applicationService.saveApp(applicationDto);
  assertNotNull(applicationDto);
  assertNotNull(applicationDto.getId());
  application=applicationService.findAppById(applicationDto.getId());
  EndpointGroupDto groupAll=endpointService.findEndpointGroupsByAppId(application.getId()).get(0);
  ProfileSchemaDto profileSchemaObj=new ProfileSchemaDto();
  profileSchemaObj.setMajorVersion(PROFILE_SCHEMA_VERSION);
  profileSchemaObj.setMinorVersion(0);
  profileSchemaObj.setSchema(BasicEndpointProfile.SCHEMA$.toString());
  profileSchemaObj.setApplicationId(application.getId());
  ProfileSchemaDto profileSchemaDto=profileService.saveProfileSchema(profileSchemaObj);
  profileSchema=profileService.findProfileSchemaById(profileSchemaDto.getId());
  EndpointGroupDto endpointGroup=new EndpointGroupDto();
  endpointGroup.setApplicationId(application.getId());
  endpointGroup.setName("Test group");
  endpointGroup.setWeight(277);
  endpointGroup.setDescription("Test Description");
  endpointGroup=endpointService.saveEndpointGroup(endpointGroup);
  ProfileFilterDto profileFilterObj=new ProfileFilterDto();
  profileFilterObj.setApplicationId(application.getId());
  profileFilterObj.setEndpointGroupId(endpointGroup.getId());
  profileFilterObj.setBody("profileBody.contains(\"dummy\")");
  profileFilterObj.setSchemaId(profileSchema.getId());
  profileFilter=profileService.saveProfileFilter(profileFilterObj);
  profileService.activateProfileFilter(profileFilter.getId(),null);
  confSchema=new ConfigurationSchemaDto();
  confSchema.setApplicationId(application.getId());
  confSchema.setMajorVersion(CONF_SCHEMA_VERSION);
  confSchema.setSchema(dataSchema);
  try {
    confSchema=configurationService.saveConfSchema(confSchema);
  }
 catch (  IncorrectParameterException e) {
    Assert.fail("Can't generate schemas");
  }
  Assert.assertNotNull(confSchema);
  Assert.assertNotNull(confSchema.getId());
  egAllId=groupAll.getId();
  pfAllId=profileFilter.getId();
  ConfigurationDto confDto=configurationService.findConfigurationByEndpointGroupIdAndVersion(egAllId,CONF_SCHEMA_VERSION);
  cfAllId=confDto.getId();
  endpointConfiguration=new EndpointConfigurationDto();
  endpointConfiguration.setConfiguration(confDto.getBody().getBytes(UTF_8));
  endpointConfiguration.setConfigurationHash(EndpointObjectHash.fromSHA1(confDto.getBody()).getData());
  endpointConfiguration=endpointService.saveEndpointConfiguration(endpointConfiguration);
  assertNotNull(endpointConfiguration);
  EndpointGroupStateDto egs=new EndpointGroupStateDto();
  egs.setConfigurationId(cfAllId);
  egs.setEndpointGroupId(egAllId);
  egs.setProfileFilterId(pfAllId);
  endpointProfile=new EndpointProfileDto();
  endpointProfile.setEndpointKeyHash(UUID.randomUUID().toString().getBytes());
  endpointProfile.setProfile(PROFILE_JSON);
  endpointProfile.setProfileHash(EndpointObjectHash.fromSHA1(PROFILE_BYTES).getData());
  endpointProfile.setConfigurationHash(endpointConfiguration.getConfigurationHash());
  endpointProfile.setConfigurationVersion(CONF_SCHEMA_VERSION);
  endpointProfile.setProfileVersion(PROFILE_VERSION);
  endpointProfile.setCfGroupStates(Collections.singletonList(egs));
  endpointProfile.setNfGroupStates(Collections.singletonList(egs));
  endpointProfile=endpointService.saveEndpointProfile(endpointProfile);
  assertNotNull(endpointProfile);
  assertNotNull(endpointProfile.getId());
}
