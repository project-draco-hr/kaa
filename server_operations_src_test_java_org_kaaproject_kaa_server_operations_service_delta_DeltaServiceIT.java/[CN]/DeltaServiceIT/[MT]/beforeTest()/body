{
  String dataSchema=OperationsServiceIT.getResourceAsString(OperationsServiceIT.DATA_SCHEMA_LOCATION);
  PROFILE_BYTES=avroConverter.encode(ENDPOINT_PROFILE);
  PROFILE_JSON=avroConverter.endcodeToJson(ENDPOINT_PROFILE);
  tenant=new Tenant();
  tenant.setName(CUSTOMER_ID);
  tenant=customerDao.save(tenant);
  assertNotNull(tenant);
  assertNotNull(tenant.getId());
  ApplicationDto applicationDto=new ApplicationDto();
  applicationDto.setTenantId(tenant.getStringId());
  applicationDto.setApplicationToken(APPLICATION_ID);
  applicationDto.setName(APPLICATION_NAME);
  applicationDto.setSequenceNumber(NEW_APPLICATION_SEQ_NUMBER);
  applicationDto=applicationService.saveApp(applicationDto);
  assertNotNull(applicationDto);
  assertNotNull(applicationDto.getId());
  application=applicationDao.findById(applicationDto.getId());
  EndpointGroup groupAll=endpointGroupDao.findByAppIdAndWeight(application.getStringId(),0);
  ProfileSchema profileSchemaObj=new ProfileSchema();
  profileSchemaObj.setMajorVersion(PROFILE_SCHEMA_VERSION);
  profileSchemaObj.setMinorVersion(0);
  profileSchemaObj.setSchema(BasicEndpointProfile.SCHEMA$.toString());
  profileSchemaObj.setApplication(application);
  ProfileSchemaDto profileSchemaDto=profileService.saveProfileSchema(profileSchemaObj.toDto());
  profileSchema=profileSchemaDao.findById(profileSchemaDto.getId());
  EndpointGroup endpointGroup=new EndpointGroup();
  endpointGroup.setApplication(application);
  endpointGroup.setName("Test group");
  endpointGroup.setWeight(277);
  endpointGroup.setDescription("Test Description");
  endpointGroup=endpointGroupDao.save(endpointGroup);
  ProfileFilter profileFilterObj=new ProfileFilter();
  profileFilterObj.setApplication(application);
  profileFilterObj.setEndpointGroup(endpointGroup);
  profileFilterObj.setBody("profileBody.contains(\"dummy\")");
  profileFilterObj.setProfileSchema(profileSchema);
  profileFilter=profileService.saveProfileFilter(profileFilterObj.toDto());
  profileService.activateProfileFilter(profileFilter.getId(),null);
  confSchema=new ConfigurationSchema();
  confSchema.setApplication(application);
  confSchema.setMajorVersion(CONF_SCHEMA_VERSION);
  confSchema.setSchema(dataSchema);
  try {
    confSchema=new ConfigurationSchema(configurationService.saveConfSchema(confSchema.toDto()));
  }
 catch (  IncorrectParameterException e) {
    Assert.fail("Can't generate schemas");
  }
  Assert.assertNotNull(confSchema);
  Assert.assertNotNull(confSchema.getId());
  egAllId=groupAll.getStringId();
  pfAllId=profileFilter.getId();
  ConfigurationDto confDto=configurationService.findConfigurationByEndpointGroupIdAndVersion(egAllId,CONF_SCHEMA_VERSION);
  cfAllId=confDto.getId();
  endpointConfiguration=new MongoEndpointConfiguration();
  endpointConfiguration.setConfiguration(confDto.getBody().getBytes(UTF_8));
  endpointConfiguration.setConfigurationHash(EndpointObjectHash.fromSHA1(confDto.getBody()).getData());
  endpointConfiguration=endpointConfigurationDao.save(endpointConfiguration);
  assertNotNull(endpointConfiguration);
  assertNotNull(endpointConfiguration.getId());
  EndpointGroupState egs=new EndpointGroupState();
  egs.setConfigurationId(cfAllId);
  egs.setEndpointGroupId(egAllId);
  egs.setProfileFilterId(pfAllId);
  endpointProfile=new MongoEndpointProfile();
  endpointProfile.setProfile((DBObject)JSON.parse(PROFILE_JSON));
  endpointProfile.setProfileHash(EndpointObjectHash.fromSHA1(PROFILE_BYTES).getData());
  endpointProfile.setConfigurationHash(endpointConfiguration.getConfigurationHash());
  endpointProfile.setConfigurationVersion(CONF_SCHEMA_VERSION);
  endpointProfile.setProfileVersion(PROFILE_VERSION);
  endpointProfile.setCfGroupState(Collections.singletonList(egs));
  endpointProfile.setNfGroupState(Collections.singletonList(egs));
  endpointProfile=endpointProfileDao.save(endpointProfile);
  assertNotNull(endpointProfile);
  assertNotNull(endpointProfile.getId());
}
