{
  context=mock(AkkaContext.class);
  logAppenderService=mock(LogAppenderService.class);
  applicationService=mock(ApplicationService.class);
  cacheService=mock(CacheService.class);
  applicationDto=mock(ApplicationDto.class);
  ctlService=mock(CTLService.class);
  when(context.getCacheService()).thenReturn(cacheService);
  when(context.getApplicationService()).thenReturn(applicationService);
  when(context.getLogAppenderService()).thenReturn(logAppenderService);
  when(context.getCtlService()).thenReturn(ctlService);
  LogSchemaDto logSchemaDto=new LogSchemaDto();
  logSchemaDto.setMajorVersion(TEST_SCHEMA_VERSION);
  logSchema=new LogSchema(logSchemaDto);
  logAppenders=new ArrayList<>();
  logAppender=mock(LogAppender.class);
  logAppenders.add(logAppender);
  when(logAppenderService.getLogSchema(APPLICATION_ID,LOG_SCHEMA_VERSION)).thenReturn(logSchema);
  when(applicationService.findAppByApplicationToken(APP_TOKEN)).thenReturn(applicationDto);
  when(applicationDto.getId()).thenReturn(APPLICATION_ID);
  when(logAppenderService.getApplicationAppenders(APPLICATION_ID)).thenReturn(logAppenders);
  when(logAppender.isSchemaVersionSupported(Mockito.anyInt())).thenReturn(Boolean.TRUE);
  ProfileSchemaDto profileSchemaDto=new ProfileSchemaDto();
  profileSchemaDto.setId("" + CLIENT_SCHEMA_VERSION);
  profileSchemaDto.setSchema("ClientProfileSchema");
  when(cacheService.getProfileSchemaByAppAndVersion(new AppVersionKey(APP_TOKEN,CLIENT_SCHEMA_VERSION))).thenReturn(profileSchemaDto);
  CTLSchemaDto schemaDto=new CTLSchemaDto();
  when(cacheService.getCtlSchemaById(SERVER_PROFILE_CTL_SCHEMA_ID)).thenReturn(schemaDto);
  when(ctlService.flatExportAsString(schemaDto)).thenReturn("ServerProfileSchema");
}
