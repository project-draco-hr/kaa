{
  ChannelContext channelContextMock=Mockito.mock(ChannelContext.class);
  SyncRequest request=new SyncRequest();
  request.setRequestId(REQUEST_ID);
  request.setSyncRequestMetaData(buildSyncRequestMetaData());
  NotificationSyncRequest nfRequest=new NotificationSyncRequest();
  request.setNotificationSyncRequest(nfRequest);
  whenSync(noDeltaResponse);
  MessageBuilder responseBuilder=Mockito.mock(MessageBuilder.class);
  ErrorBuilder errorBuilder=Mockito.mock(ErrorBuilder.class);
  SessionInitMessage message=toSignedRequest(UUID.randomUUID(),ChannelType.SYNC_WITH_TIMEOUT,channelContextMock,request,responseBuilder,errorBuilder);
  Assert.assertNotNull(akkaService.getActorSystem());
  akkaService.process(message);
  Mockito.verify(operationsService,Mockito.timeout(TIMEOUT / 2).atLeastOnce()).syncClientProfile(Mockito.any(SyncContext.class),Mockito.any(ProfileClientSync.class));
  Mockito.when(operationsService.updateSyncResponse(noDeltaResponse.getResponse(),new ArrayList<NotificationDto>(),UNICAST_NOTIFICATION_ID)).thenReturn(noDeltaResponse.getResponse());
  Mockito.when(applicationService.findAppById(APP_ID)).thenReturn(applicationDto);
  EndpointAddress address=new EndpointAddress(applicationDto.getTenantId(),applicationDto.getApplicationToken(),EndpointObjectHash.fromBytes(clientPublicKeyHash.array()));
  ActorClassifier classifier=ActorClassifier.GLOBAL;
  ThriftUnicastNotificationMessage msg=new ThriftUnicastNotificationMessage(null,null,UNICAST_NOTIFICATION_ID);
  clusterServiceListener.onEndpointActorMsg(new ThriftEndpointActorMsg<ThriftUnicastNotificationMessage>(address,classifier,msg));
  Mockito.verify(operationsService,Mockito.timeout(10 * TIMEOUT / 2).atLeastOnce()).updateSyncResponse(noDeltaResponse.getResponse(),new ArrayList<NotificationDto>(),UNICAST_NOTIFICATION_ID);
  Mockito.verify(responseBuilder,Mockito.timeout(TIMEOUT).atLeastOnce()).build(Mockito.any(byte[].class),Mockito.any(boolean.class));
}
