{
  ChannelContext channelContextMock=Mockito.mock(ChannelContext.class);
  EndpointProfileDto sourceProfileMock=Mockito.mock(EndpointProfileDto.class);
  EventClassFamilyVersionStateDto ecfVdto=new EventClassFamilyVersionStateDto();
  ecfVdto.setEcfId(ECF1_ID);
  ecfVdto.setVersion(ECF1_VERSION);
  Event event=new Event(0,FQN1,ByteBuffer.wrap(new byte[0]),Base64Util.encode(clientPublicKeyHash.array()),null);
  SyncRequest sourceRequest=new SyncRequest();
  sourceRequest.setRequestId(REQUEST_ID);
  sourceRequest.setSyncRequestMetaData(buildSyncRequestMetaData(clientPublicKeyHash));
  EventSyncRequest eventRequest=new EventSyncRequest();
  eventRequest.setEvents(Arrays.asList(event));
  sourceRequest.setEventSyncRequest(eventRequest);
  ServerSync sourceResponse=new ServerSync();
  sourceResponse.setStatus(org.kaaproject.kaa.server.sync.SyncStatus.SUCCESS);
  SyncContext sourceResponseHolder=new SyncContext(sourceResponse);
  sourceResponseHolder.setEndpointProfile(sourceProfileMock);
  whenSync(AvroEncDec.convert(sourceRequest),sourceResponseHolder);
  when(sourceProfileMock.getEndpointUserId()).thenReturn(USER_ID);
  when(sourceProfileMock.getEndpointKeyHash()).thenReturn(clientPublicKeyHash.array());
  when(sourceProfileMock.getEcfVersionStates()).thenReturn(Arrays.asList(ecfVdto));
  when(cacheService.getEventClassFamilyIdByEventClassFqn(new EventClassFqnKey(TENANT_ID,FQN1))).thenReturn(ECF1_ID);
  RouteTableKey routeKey=new RouteTableKey(APP_TOKEN,new EventClassFamilyVersion(ECF1_ID,ECF1_VERSION));
  when(cacheService.getRouteKeys(new EventClassFqnVersion(TENANT_ID,FQN1,ECF1_VERSION))).thenReturn(Collections.singleton(routeKey));
  Assert.assertNotNull(akkaService.getActorSystem());
  MessageBuilder responseBuilder=Mockito.mock(MessageBuilder.class);
  ErrorBuilder errorBuilder=Mockito.mock(ErrorBuilder.class);
  MessageEncoderDecoder sourceCrypt=new MessageEncoderDecoder(clientPair.getPrivate(),clientPair.getPublic(),serverPair.getPublic());
  SessionInitMessage sourceMessage=toSignedRequest(UUID.randomUUID(),ChannelType.SYNC_WITH_TIMEOUT,channelContextMock,sourceRequest,responseBuilder,errorBuilder,sourceCrypt);
  akkaService.process(sourceMessage);
  Mockito.verify(operationsService,Mockito.timeout(TIMEOUT).atLeastOnce()).syncClientProfile(Mockito.any(SyncContext.class),Mockito.any(ProfileClientSync.class));
  UserRouteInfo userRouteInfo=new UserRouteInfo(TENANT_ID,USER_ID,SERVER2,RouteOperation.ADD);
  akkaService.getListener().onUserRouteInfo(userRouteInfo);
  RouteTableAddress remoteAddress=new RouteTableAddress(EndpointObjectHash.fromBytes(targetPublicKeyHash.array()),APP_TOKEN,SERVER2);
  RouteInfo routeInfo=new RouteInfo(TENANT_ID,USER_ID,remoteAddress,Arrays.asList(new EventClassFamilyVersion(ECF1_ID,ECF1_VERSION)));
  TimeUnit.SECONDS.sleep(2);
  akkaService.getListener().onRouteInfo(routeInfo);
  Mockito.verify(eventService,Mockito.timeout(TIMEOUT).atLeastOnce()).sendEvent(Mockito.any(RemoteEndpointEvent.class));
}
