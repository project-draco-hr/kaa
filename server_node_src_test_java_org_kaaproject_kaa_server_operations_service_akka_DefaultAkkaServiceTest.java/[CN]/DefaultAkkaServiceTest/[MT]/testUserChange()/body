{
  ChannelContext channelContextMock=Mockito.mock(ChannelContext.class);
  MessageEncoderDecoder targetCrypt=new MessageEncoderDecoder(targetPair.getPrivate(),targetPair.getPublic(),serverPair.getPublic());
  EndpointProfileDto targetProfileMock=Mockito.mock(EndpointProfileDto.class);
  EventClassFamilyVersionStateDto ecfVdto=new EventClassFamilyVersionStateDto();
  ecfVdto.setEcfId(ECF1_ID);
  ecfVdto.setVersion(ECF1_VERSION);
  SyncRequest targetRequest=new SyncRequest();
  targetRequest.setRequestId(REQUEST_ID);
  targetRequest.setSyncRequestMetaData(buildSyncRequestMetaData(targetPublicKeyHash));
  targetRequest.setEventSyncRequest(new EventSyncRequest());
  ServerSync targetResponse=new ServerSync();
  targetResponse.setStatus(org.kaaproject.kaa.server.sync.SyncStatus.SUCCESS);
  SyncContext targetResponseHolder=new SyncContext(targetResponse);
  targetResponseHolder.setEndpointProfile(targetProfileMock);
  whenSync(AvroEncDec.convert(targetRequest),targetResponseHolder);
  when(targetProfileMock.getEndpointUserId()).thenReturn(USER_ID);
  when(targetProfileMock.getEndpointKeyHash()).thenReturn(targetPublicKeyHash.array());
  when(targetProfileMock.getEcfVersionStates()).thenReturn(Arrays.asList(ecfVdto));
  when(cacheService.getEventClassFamilyIdByEventClassFqn(new EventClassFqnKey(TENANT_ID,FQN1))).thenReturn(ECF1_ID);
  RouteTableKey routeKey=new RouteTableKey(APP_TOKEN,new EventClassFamilyVersion(ECF1_ID,ECF1_VERSION));
  when(cacheService.getRouteKeys(new EventClassFqnVersion(TENANT_ID,FQN1,ECF1_VERSION))).thenReturn(Collections.singleton(routeKey));
  Assert.assertNotNull(akkaService.getActorSystem());
  MessageBuilder responseBuilder=Mockito.mock(MessageBuilder.class);
  ErrorBuilder errorBuilder=Mockito.mock(ErrorBuilder.class);
  SessionInitMessage message=toSignedRequest(UUID.randomUUID(),ChannelType.SYNC_WITH_TIMEOUT,channelContextMock,targetRequest,responseBuilder,errorBuilder,targetCrypt);
  akkaService.process(message);
  Mockito.verify(operationsService,Mockito.timeout(TIMEOUT).atLeastOnce()).syncClientProfile(any(SyncContext.class),any(ProfileClientSync.class));
  Mockito.verify(eventService,Mockito.timeout(TIMEOUT).atLeastOnce()).sendUserRouteInfo(new UserRouteInfo(TENANT_ID,USER_ID));
  UserRouteInfo userRouteInfo=new UserRouteInfo(TENANT_ID,USER_ID,SERVER2,RouteOperation.ADD);
  akkaService.getListener().onUserRouteInfo(userRouteInfo);
  TimeUnit.SECONDS.sleep(2);
  RouteTableAddress remoteAddress=new RouteTableAddress(EndpointObjectHash.fromBytes(clientPublicKeyHash.array()),APP_TOKEN,SERVER2);
  RouteInfo remoteRouteInfo=new RouteInfo(TENANT_ID,USER_ID,remoteAddress,Arrays.asList(new EventClassFamilyVersion(ECF1_ID,ECF1_VERSION)));
  TimeUnit.SECONDS.sleep(2);
  akkaService.getListener().onRouteInfo(remoteRouteInfo);
  RouteTableAddress localAddress=new RouteTableAddress(EndpointObjectHash.fromBytes(targetPublicKeyHash.array()),APP_TOKEN,null);
  RouteInfo localRouteInfo=new RouteInfo(TENANT_ID,USER_ID,localAddress,Arrays.asList(new EventClassFamilyVersion(ECF1_ID,ECF1_VERSION)));
  Mockito.verify(eventService,Mockito.timeout(TIMEOUT).atLeastOnce()).sendRouteInfo(Collections.singletonList(localRouteInfo),SERVER2);
  targetRequest=new SyncRequest();
  targetRequest.setRequestId(REQUEST_ID);
  targetRequest.setSyncRequestMetaData(buildSyncRequestMetaData(targetPublicKeyHash));
  targetResponse=new ServerSync();
  targetResponse.setStatus(org.kaaproject.kaa.server.sync.SyncStatus.SUCCESS);
  targetResponseHolder=new SyncContext(targetResponse);
  targetResponseHolder.setEndpointProfile(targetProfileMock);
  when(targetProfileMock.getEndpointUserId()).thenReturn(USER_ID + "2");
  whenSync(AvroEncDec.convert(targetRequest),targetResponseHolder);
  SessionInitMessage targetMessage=toSignedRequest(UUID.randomUUID(),ChannelType.SYNC_WITH_TIMEOUT,channelContextMock,targetRequest,responseBuilder,errorBuilder,targetCrypt);
  akkaService.process(targetMessage);
  Mockito.verify(eventService,Mockito.timeout(TIMEOUT).atLeastOnce()).sendUserRouteInfo(new UserRouteInfo(TENANT_ID,USER_ID + "2"));
  Mockito.verify(eventService,Mockito.timeout(TIMEOUT).atLeastOnce()).sendRouteInfo(RouteInfo.deleteRouteFromAddress(TENANT_ID,USER_ID,localAddress),SERVER2);
}
