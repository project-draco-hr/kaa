{
  ChannelContext channelContextMock=Mockito.mock(ChannelContext.class);
  SyncRequest request=new SyncRequest();
  request.setRequestId(REQUEST_ID);
  SyncRequestMetaData md=new SyncRequestMetaData();
  md.setSdkToken(SDK_TOKEN);
  md.setEndpointPublicKeyHash(clientPublicKeyHash);
  md.setProfileHash(clientPublicKeyHash);
  md.setTimeout(1000l);
  request.setSyncRequestMetaData(md);
  LogSyncRequest logRequest=new LogSyncRequest(REQUEST_ID,Collections.singletonList(new LogEntry(ByteBuffer.wrap("String".getBytes()))));
  request.setLogSyncRequest(logRequest);
  whenSync(noDeltaResponseWithTopicState);
  LogAppender mockAppender=Mockito.mock(LogAppender.class);
  Mockito.when(logAppenderService.getApplicationAppenders(APP_ID)).thenReturn(Collections.singletonList(mockAppender));
  Mockito.when(logAppenderService.getLogSchema(Mockito.anyString(),Mockito.anyInt())).thenReturn(new LogSchema(new LogSchemaDto()));
  EndpointProfileSchemaDto profileSchemaDto=new EndpointProfileSchemaDto();
  profileSchemaDto.setId("1");
  profileSchemaDto.setCtlSchemaId("22");
  CTLSchemaDto ctlSchema=new CTLSchemaDto();
  ctlSchema.setId("22");
  when(cacheService.getProfileSchemaByAppAndVersion(new AppVersionKey(APP_TOKEN,0))).thenReturn(profileSchemaDto);
  when(cacheService.getCtlSchemaById("22")).thenReturn(ctlSchema);
  when(ctlService.flatExportAsString(ctlSchema)).thenReturn("ClientProfileSchema");
  ServerProfileSchemaDto serverProfileSchemaDto=new ServerProfileSchemaDto();
  serverProfileSchemaDto.setId("1");
  serverProfileSchemaDto.setCtlSchemaId("23");
  CTLSchemaDto serverCtlSchema=new CTLSchemaDto();
  serverCtlSchema.setId("23");
  when(cacheService.getServerProfileSchemaByAppAndVersion(new AppVersionKey(APP_TOKEN,0))).thenReturn(serverProfileSchemaDto);
  when(cacheService.getCtlSchemaById("23")).thenReturn(serverCtlSchema);
  when(ctlService.flatExportAsString(serverCtlSchema)).thenReturn("ServerProfileSchema");
  Mockito.when(mockAppender.isSchemaVersionSupported(Mockito.anyInt())).thenReturn(true);
  MessageBuilder responseBuilder=Mockito.mock(MessageBuilder.class);
  ErrorBuilder errorBuilder=Mockito.mock(ErrorBuilder.class);
  SessionInitMessage message=toSignedRequest(UUID.randomUUID(),ChannelType.SYNC_WITH_TIMEOUT,channelContextMock,request,responseBuilder,errorBuilder);
  Assert.assertNotNull(akkaService.getActorSystem());
  akkaService.process(message);
  Mockito.verify(operationsService,Mockito.timeout(TIMEOUT).atLeastOnce()).syncClientProfile(Mockito.any(SyncContext.class),Mockito.any(ProfileClientSync.class));
  Mockito.verify(logAppenderService,Mockito.timeout(TIMEOUT).atLeastOnce()).getLogSchema(APP_ID,44);
  Mockito.verify(mockAppender,Mockito.timeout(TIMEOUT).atLeastOnce()).doAppend(Mockito.any(BaseLogEventPack.class),Mockito.any(LogDeliveryCallback.class));
  Mockito.verify(responseBuilder,Mockito.timeout(TIMEOUT).atLeastOnce()).build(Mockito.any(byte[].class),Mockito.any(boolean.class));
}
