{
  ChannelContext channelContextMock=Mockito.mock(ChannelContext.class);
  SyncRequest request=new SyncRequest();
  request.setRequestId(REQUEST_ID);
  SyncRequestMetaData md=buildSyncRequestMetaData();
  request.setSyncRequestMetaData(md);
  ConfigurationSyncRequest csRequest=new ConfigurationSyncRequest();
  csRequest.setConfigurationHash(ByteBuffer.wrap(new byte[]{}));
  csRequest.setResyncOnly(true);
  request.setConfigurationSyncRequest(csRequest);
  Mockito.when(cacheService.getEndpointKey(EndpointObjectHash.fromBytes(clientPublicKeyHash.array()))).thenReturn(clientPair.getPublic());
  whenSync(noDeltaResponse);
  MessageBuilder responseBuilder=Mockito.mock(MessageBuilder.class);
  ErrorBuilder errorBuilder=Mockito.mock(ErrorBuilder.class);
  SessionInitMessage message=toSignedRequest(UUID.randomUUID(),ChannelType.SYNC_WITH_TIMEOUT,channelContextMock,request,responseBuilder,errorBuilder);
  Assert.assertNotNull(akkaService.getActorSystem());
  akkaService.process(message);
  Mockito.verify(operationsService,Mockito.timeout(TIMEOUT).atLeastOnce()).syncClientProfile(any(SyncContext.class),any(ProfileClientSync.class));
  Mockito.when(applicationService.findAppById(APP_ID)).thenReturn(applicationDto);
  whenSync(deltaResponse);
  Notification thriftNotification=new Notification();
  thriftNotification.setAppId(APP_ID);
  akkaService.onNotification(thriftNotification);
  Mockito.verify(responseBuilder,Mockito.timeout(TIMEOUT).atLeastOnce()).build(any(byte[].class),any(boolean.class));
}
