{
  clearDBData();
  keyPair=KeyUtil.generateKeyPair();
  operationsService.setPublicKey(keyPair.getPublic());
  String dataSchema=getResourceAsString(DATA_SCHEMA_LOCATION);
  deltaSchema=getResourceAsString(BASE_SCHEMA_LOCATION);
  currentConfiguration=getResourceAsString(NEW_COMPLEX_CONFIG);
  customer=new Tenant();
  customer.setName(CUSTOMER_ID);
  customer=customerDao.save(customer);
  Assert.assertNotNull(customer);
  Assert.assertNotNull(customer.getId());
  Application appObj=new Application();
  appObj.setTenant(customer);
  appObj.setName(APPLICATION_NAME);
  appObj.setUserVerifierName("kaaEndpointUserVerifier");
  ApplicationDto applicationDto=applicationService.saveApp(appObj.toDto());
  Assert.assertNotNull(applicationDto);
  Assert.assertNotNull(applicationDto.getId());
  application=applicationDao.findById(applicationDto.getId());
  EndpointGroup groupAll=endpointGroupDao.findByAppIdAndWeight(application.getStringId(),0);
  ProfileSchema profileSchemaObj=new ProfileSchema();
  profileSchemaObj.setMajorVersion(PROFILE_SCHEMA_VERSION);
  profileSchemaObj.setMinorVersion(0);
  profileSchemaObj.setSchema(BasicEndpointProfile.SCHEMA$.toString());
  profileSchemaObj.setApplication(application);
  ProfileSchemaDto profileSchemaDto=profileService.saveProfileSchema(profileSchemaObj.toDto());
  profileSchema=profileSchemaDao.findById(profileSchemaDto.getId());
  EndpointGroup endpointGroup=new EndpointGroup();
  endpointGroup.setApplication(application);
  endpointGroup.setName("Test group");
  endpointGroup.setWeight(177);
  endpointGroup.setDescription("Test Description");
  endpointGroup=endpointGroupDao.save(endpointGroup);
  ProfileFilter profileFilterObj=new ProfileFilter();
  profileFilterObj.setApplication(application);
  profileFilterObj.setEndpointGroup(endpointGroup);
  profileFilterObj.setBody("profileBody.contains(\"dummy\")");
  profileFilterObj.setProfileSchema(profileSchema);
  profileFilter=profileService.saveProfileFilter(profileFilterObj.toDto());
  profileService.activateProfileFilter(profileFilter.getId(),null);
  confSchema=new ConfigurationSchema();
  confSchema.setApplication(application);
  confSchema.setMajorVersion(CONF_SCHEMA_VERSION);
  confSchema.setMinorVersion(CONF_SCHEMA_VERSION);
  confSchema.setSchema(dataSchema);
  try {
    confSchema=new ConfigurationSchema(configurationService.saveConfSchema(confSchema.toDto()));
  }
 catch (  IncorrectParameterException e) {
    Assert.fail("Can't generate schemas");
  }
  Assert.assertNotNull(confSchema);
  Assert.assertNotNull(confSchema.getId());
  EndpointUserDto userDto=new EndpointUserDto();
  userDto.setTenantId(customer.getId().toString());
  userDto.setExternalId(USER_EXTERNAL_ID);
  userDto.setAccessToken(USER_ACCESS_TOKEN);
  userDto=endpointService.saveEndpointUser(userDto);
  Assert.assertNotNull(userDto);
  Assert.assertNotNull(userDto.getId());
  mandatoryTopicDto=new TopicDto();
  mandatoryTopicDto.setApplicationId(applicationDto.getId());
  mandatoryTopicDto.setName("Mandatory");
  mandatoryTopicDto.setType(TopicTypeDto.MANDATORY);
  mandatoryTopicDto=topicService.saveTopic(mandatoryTopicDto);
  optionalTopicDto=new TopicDto();
  optionalTopicDto.setApplicationId(applicationDto.getId());
  optionalTopicDto.setName("Optional");
  optionalTopicDto.setType(TopicTypeDto.OPTIONAL);
  optionalTopicDto=topicService.saveTopic(optionalTopicDto);
  List<EndpointGroupDto> groups=endpointService.findEndpointGroupsByAppId(applicationDto.getId());
  for (  EndpointGroupDto group : groups) {
    endpointService.addTopicToEndpointGroup(group.getId(),mandatoryTopicDto.getId());
    endpointService.addTopicToEndpointGroup(group.getId(),optionalTopicDto.getId());
  }
  NotificationSchemaDto userSchemaDto=notificationService.findNotificationSchemaByAppIdAndTypeAndVersion(applicationDto.getId(),NotificationTypeDto.USER,1);
  NotificationDto mNotificationDto=new NotificationDto();
  mNotificationDto.setTopicId(mandatoryTopicDto.getId());
  mNotificationDto.setSchemaId(userSchemaDto.getId());
  mNotificationDto.setType(NotificationTypeDto.USER);
  mNotificationDto.setBody("{\"message\": \"mandatory\"}".getBytes(Charset.forName("UTF-8")));
  notificationService.saveNotification(mNotificationDto);
  NotificationDto vNotificationDto=new NotificationDto();
  vNotificationDto.setTopicId(optionalTopicDto.getId());
  vNotificationDto.setSchemaId(userSchemaDto.getId());
  vNotificationDto.setType(NotificationTypeDto.USER);
  vNotificationDto.setBody("{\"message\": \"optional\"}".getBytes(Charset.forName("UTF-8")));
  notificationService.saveNotification(vNotificationDto);
}
