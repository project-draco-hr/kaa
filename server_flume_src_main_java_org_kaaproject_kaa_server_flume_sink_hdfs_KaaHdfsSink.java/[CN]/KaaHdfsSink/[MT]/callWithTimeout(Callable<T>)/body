{
  Future<T> future=callTimeoutPool.submit(callable);
  try {
    if (callTimeout > 0) {
      return future.get(callTimeout,TimeUnit.MILLISECONDS);
    }
 else {
      return future.get();
    }
  }
 catch (  TimeoutException eT) {
    future.cancel(true);
    sinkCounter.incrementConnectionFailedCount();
    throw new IOException("Callable timed out after " + callTimeout + " ms",eT);
  }
catch (  ExecutionException e1) {
    sinkCounter.incrementConnectionFailedCount();
    Throwable cause=e1.getCause();
    if (cause instanceof IOException) {
      throw (IOException)cause;
    }
 else     if (cause instanceof InterruptedException) {
      throw (InterruptedException)cause;
    }
 else     if (cause instanceof RuntimeException) {
      throw (RuntimeException)cause;
    }
 else     if (cause instanceof Error) {
      throw (Error)cause;
    }
 else {
      throw new RuntimeException(e1);
    }
  }
catch (  CancellationException ce) {
    LOG.error("Exception catched: ",ce);
    throw new InterruptedException("Blocked callable interrupted by rotation event");
  }
catch (  InterruptedException ex) {
    LOG.warn("Unexpected Exception " + ex.getMessage(),ex);
    throw ex;
  }
}
