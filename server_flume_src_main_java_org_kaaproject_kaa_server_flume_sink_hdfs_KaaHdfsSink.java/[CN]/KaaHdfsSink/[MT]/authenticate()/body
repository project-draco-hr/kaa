{
  boolean useSecurity=UserGroupInformation.isSecurityEnabled();
  LOG.info("Hadoop Security enabled: " + useSecurity);
  if (useSecurity) {
    if (kerbConfPrincipal.isEmpty()) {
      LOG.error("Hadoop running in secure mode, but Flume config doesn't " + "specify a principal to use for Kerberos auth.");
      return false;
    }
    if (kerbKeytab.isEmpty()) {
      LOG.error("Hadoop running in secure mode, but Flume config doesn't " + "specify a keytab to use for Kerberos auth.");
      return false;
    }
 else {
      File kfile=new File(kerbKeytab);
      if (!(kfile.isFile() && kfile.canRead())) {
        throw new IllegalArgumentException("The keyTab file: " + kerbKeytab + " is nonexistent or can't read. "+ "Please specify a readable keytab file for Kerberos auth.");
      }
    }
    String principal;
    try {
      principal=SecurityUtil.getServerPrincipal(kerbConfPrincipal,"");
    }
 catch (    IOException e) {
      LOG.error("Host lookup error resolving kerberos principal (" + kerbConfPrincipal + "). Exception follows.",e);
      return false;
    }
    Preconditions.checkNotNull(principal,"Principal must not be null");
    KerberosUser prevUser=staticLogin.get();
    KerberosUser newUser=new KerberosUser(principal,kerbKeytab);
    Preconditions.checkState(prevUser == null || prevUser.equals(newUser),"Cannot use multiple kerberos principals in the same agent. " + " Must restart agent to use new principal or keytab. " + "Previous = %s, New = %s",prevUser,newUser);
    UserGroupInformation curUser=null;
    if (prevUser != null && prevUser.equals(newUser)) {
      try {
        curUser=UserGroupInformation.getLoginUser();
      }
 catch (      IOException e) {
        LOG.warn("User unexpectedly had no active login. Continuing with " + "authentication",e);
      }
    }
    if (curUser == null || !curUser.getUserName().equals(principal)) {
      try {
        kerberosLogin(this,principal,kerbKeytab);
      }
 catch (      IOException e) {
        LOG.error("Authentication or file read error while attempting to " + "login as kerberos principal (" + principal + ") using "+ "keytab ("+ kerbKeytab+ "). Exception follows.",e);
        return false;
      }
    }
 else {
      LOG.debug("{}: Using existing principal login: {}",this,curUser);
    }
    staticLogin.set(newUser);
  }
  proxyTicket=null;
  if (!proxyUserName.isEmpty()) {
    try {
      proxyTicket=UserGroupInformation.createProxyUser(proxyUserName,UserGroupInformation.getLoginUser());
    }
 catch (    IOException e) {
      LOG.error("Unable to login as proxy user. Exception follows.",e);
      return false;
    }
  }
  UserGroupInformation ugi=null;
  if (proxyTicket != null) {
    ugi=proxyTicket;
  }
 else   if (useSecurity) {
    try {
      ugi=UserGroupInformation.getLoginUser();
    }
 catch (    IOException e) {
      LOG.error("Unexpected error: Unable to get authenticated user after " + "apparent successful login! Exception follows.",e);
      return false;
    }
  }
  if (ugi != null) {
    AuthenticationMethod authMethod=ugi.getAuthenticationMethod();
    LOG.info("Auth method: {}",authMethod);
    LOG.info(" User name: {}",ugi.getUserName());
    LOG.info(" Using keytab: {}",ugi.isFromKeytab());
    if (authMethod == AuthenticationMethod.PROXY) {
      UserGroupInformation superUser;
      try {
        superUser=UserGroupInformation.getLoginUser();
        LOG.info(" Superuser auth: {}",superUser.getAuthenticationMethod());
        LOG.info(" Superuser name: {}",superUser.getUserName());
        LOG.info(" Superuser using keytab: {}",superUser.isFromKeytab());
      }
 catch (      IOException e) {
        LOG.error("Unexpected error: unknown superuser impersonating proxy.",e);
        return false;
      }
    }
    LOG.info("Logged in as user {}",ugi.getUserName());
    return true;
  }
  return true;
}
