{
  cliOut.reset();
  boolean create=strIsEmpty(configurationId);
  int result=-1;
  if (create) {
    if (strIsEmpty(configSchemaId) || strIsEmpty(endpointGroupId)) {
      String applicationId=editApplicationCli(cli,null,applicationName,null,tenantName,false);
      configSchemaId=editConfigSchemaCli(cli,null,applicationId,applicationName,tenantName,false);
      cliOut.reset();
      endpointGroupId=editEndpointGroupCli(cli,null,applicationId,applicationName,tenantName,"10",false);
      cliOut.reset();
    }
    String cmdLine="createConfiguration -f " + getTestFile("testConfig.json") + " -s "+ configSchemaId+ " -e "+ endpointGroupId;
    if (createOut) {
      cmdLine+=" -o dummy.out";
    }
    result=cli.processLine(cmdLine);
  }
 else {
    result=cli.processLine("editConfiguration -f " + getTestFile("testConfigUpdated.json") + " -i "+ configurationId);
  }
  Assert.assertEquals(result,0);
  String output=cliOut.toString("UTF-8");
  if (create) {
    String out=output.trim();
    int index="Created new Configuration with id: ".length();
    if (out.length() > index) {
      return out.substring(index).trim();
    }
 else {
      logger.debug("Can't edit configuration: {}",out);
      return null;
    }
  }
 else   if (configurationId.equals(FAKE_SQL_ID)) {
    Assert.assertTrue(output.trim().startsWith("Configuration with id " + FAKE_SQL_ID + " not found!"));
    return configurationId;
  }
 else {
    Assert.assertTrue(output.trim().startsWith("Configuration updated."));
    return configurationId;
  }
}
