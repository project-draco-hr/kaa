{
  logger.info("Loading 'Power plant demo application' data...");
  loginTenantAdmin(client);
  ApplicationDto powerPlantApplication=new ApplicationDto();
  powerPlantApplication.setName("Power plant");
  powerPlantApplication=client.editApplication(powerPlantApplication);
  sdkKey.setApplicationId(powerPlantApplication.getId());
  sdkKey.setProfileSchemaVersion(1);
  sdkKey.setNotificationSchemaVersion(1);
  loginTenantDeveloper(client);
  LogSchemaDto logSchemaDto=new LogSchemaDto();
  logSchemaDto.setApplicationId(powerPlantApplication.getId());
  logSchemaDto.setName("Log schema");
  logSchemaDto.setDescription("Log schema describes incoming voltage reports");
  logSchemaDto=client.createLogSchema(logSchemaDto,getResourcePath("logSchema.json"));
  sdkKey.setLogSchemaVersion(logSchemaDto.getMajorVersion());
  LogAppenderDto powerPlantLogAppender=new LogAppenderDto();
  powerPlantLogAppender.setName("Power plant log appender");
  powerPlantLogAppender.setDescription("Log appender used to deliver voltage reports from power plant application to local mongo db instance");
  powerPlantLogAppender.setApplicationId(powerPlantApplication.getId());
  powerPlantLogAppender.setApplicationToken(powerPlantApplication.getApplicationToken());
  powerPlantLogAppender.setTenantId(powerPlantApplication.getTenantId());
  powerPlantLogAppender.setMinLogSchemaVersion(1);
  powerPlantLogAppender.setMaxLogSchemaVersion(Integer.MAX_VALUE);
  powerPlantLogAppender.setConfirmDelivery(true);
  powerPlantLogAppender.setHeaderStructure(Arrays.asList(LogHeaderStructureDto.KEYHASH,LogHeaderStructureDto.TIMESTAMP,LogHeaderStructureDto.TOKEN,LogHeaderStructureDto.VERSION));
  powerPlantLogAppender.setPluginTypeName("Mongo");
  powerPlantLogAppender.setPluginClassName("org.kaaproject.kaa.server.appenders.mongo.appender.MongoDbLogAppender");
  powerPlantLogAppender.setJsonConfiguration(FileUtils.readResource(getResourcePath("mongoAppender.json")));
  powerPlantLogAppender=client.editLogAppenderDto(powerPlantLogAppender);
  logger.info("Creating configuration schema...");
  ConfigurationSchemaDto configurationSchema=new ConfigurationSchemaDto();
  configurationSchema.setApplicationId(powerPlantApplication.getId());
  configurationSchema.setName("PowerPlantConfigSchema");
  configurationSchema.setDescription("Default configuration schema for the power plant application");
  configurationSchema=client.createConfigurationSchema(configurationSchema,getResourcePath("configSchema.json"));
  logger.info("Configuration schema version: {}",configurationSchema.getMajorVersion());
  sdkKey.setConfigurationSchemaVersion(configurationSchema.getMajorVersion());
  logger.info("Configuration schema was created.");
  EndpointGroupDto baseEndpointGroup=null;
  List<EndpointGroupDto> endpointGroups=client.getEndpointGroups(powerPlantApplication.getId());
  if (endpointGroups.size() == 1 && endpointGroups.get(0).getWeight() == 0) {
    baseEndpointGroup=endpointGroups.get(0);
  }
  if (baseEndpointGroup == null) {
    throw new RuntimeException("Can't get default endpoint group for the power plant application!");
  }
  ConfigurationDto baseConfiguration=new ConfigurationDto();
  baseConfiguration.setApplicationId(powerPlantApplication.getId());
  baseConfiguration.setEndpointGroupId(baseEndpointGroup.getId());
  baseConfiguration.setSchemaId(configurationSchema.getId());
  baseConfiguration.setMajorVersion(configurationSchema.getMajorVersion());
  baseConfiguration.setMinorVersion(configurationSchema.getMinorVersion());
  baseConfiguration.setDescription("Base power plant configuration");
  String body=FileUtils.readResource(getResourcePath("configData.json"));
  logger.info("Configuration body: [{}]",body);
  baseConfiguration.setBody(body);
  baseConfiguration.setStatus(UpdateStatus.INACTIVE);
  logger.info("Editing the configuration...");
  baseConfiguration=client.editConfiguration(baseConfiguration);
  logger.info("Activating the configuration");
  client.activateConfiguration(baseConfiguration.getId());
  logger.info("Configuration was activated");
  logger.info("Finished loading 'Power plant application' data.");
}
