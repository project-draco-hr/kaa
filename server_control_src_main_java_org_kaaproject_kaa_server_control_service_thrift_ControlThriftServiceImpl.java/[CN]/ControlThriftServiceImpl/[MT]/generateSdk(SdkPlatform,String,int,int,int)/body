{
  try {
    ApplicationDto application=applicationService.findAppById(applicationId);
    if (application == null) {
      throw new TException("Application not found!");
    }
    ProfileSchemaDto profileSchema=profileService.findProfileSchemaByAppIdAndVersion(applicationId,profileSchemaVersion);
    if (profileSchema == null) {
      throw new TException("Profile schema not found!");
    }
    ConfigurationSchemaDto configurationShema=configurationService.findConfSchemaByAppIdAndVersion(applicationId,configurationSchemaVersion);
    if (configurationShema == null) {
      throw new TException("Configuration schema not found!");
    }
    ConfigurationDto defaultConfiguration=configurationService.findDefaultConfigurationBySchemaId(configurationShema.getId());
    if (defaultConfiguration == null) {
      throw new TException("Default configuration not found!");
    }
    NotificationSchemaDto notificationSchema=notificationService.findNotificationSchemaByAppIdAndTypeAndVersion(applicationId,NotificationTypeDto.USER,notificationSchemaVersion);
    if (notificationSchema == null) {
      throw new TException("Notification schema not found!");
    }
    String appToken=application.getApplicationToken();
    String profileSchemaBody=profileSchema.getSchema();
    String notificationSchemaBody=notificationSchema.getSchema();
    String configurationProtocolSchemaBody=configurationShema.getProtocolSchema();
    Schema deltaSchema=new Schema.Parser().parse(configurationProtocolSchemaBody);
    Schema baseSchema=new Schema.Parser().parse(configurationShema.getBaseSchema());
    DefaultDeltaCalculator calculator=new DefaultDeltaCalculator(deltaSchema,baseSchema);
    byte[] defaultConfigurationData=calculator.calculate(defaultConfiguration.getBody()).getData();
    SdkGenerator generator=SdkGeneratorFactory.createSdkGenerator(sdkPlatform);
    return generator.generateSdk(buildVersion,controlZKService.getCurrentBootstrapNodes(),appToken,profileSchemaVersion,configurationSchemaVersion,notificationSchemaVersion,profileSchemaBody,notificationSchemaBody,configurationProtocolSchemaBody,defaultConfigurationData);
  }
 catch (  Exception e) {
    LOG.error("Unable to generate SDK",e);
    throw new TException(e);
  }
}
