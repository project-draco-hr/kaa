{
  SdkProfileDto sdkProfileDto=ThriftDtoConverter.toDto(sdkProfile);
  try {
    ApplicationDto application=applicationService.findAppById(sdkProfileDto.getApplicationId());
    if (application == null) {
      throw new TException("Application not found!");
    }
    ProfileSchemaDto profileSchema=profileService.findProfileSchemaByAppIdAndVersion(sdkProfileDto.getApplicationId(),sdkProfileDto.getProfileSchemaVersion());
    if (profileSchema == null) {
      throw new TException("Profile schema not found!");
    }
    ConfigurationSchemaDto configurationSchema=configurationService.findConfSchemaByAppIdAndVersion(sdkProfileDto.getApplicationId(),sdkProfileDto.getConfigurationSchemaVersion());
    if (configurationSchema == null) {
      throw new TException("Configuration schema not found!");
    }
    ConfigurationDto defaultConfiguration=configurationService.findDefaultConfigurationBySchemaId(configurationSchema.getId());
    if (defaultConfiguration == null) {
      throw new TException("Default configuration not found!");
    }
    NotificationSchemaDto notificationSchema=notificationService.findNotificationSchemaByAppIdAndTypeAndVersion(sdkProfileDto.getApplicationId(),NotificationTypeDto.USER,sdkProfileDto.getNotificationSchemaVersion());
    if (notificationSchema == null) {
      throw new TException("Notification schema not found!");
    }
    LogSchemaDto logSchema=logSchemaService.findLogSchemaByAppIdAndVersion(sdkProfileDto.getApplicationId(),sdkProfileDto.getLogSchemaVersion());
    if (logSchema == null) {
      throw new TException("Log schema not found!");
    }
    DataSchema profileDataSchema=new DataSchema(profileSchema.getSchema());
    DataSchema notificationDataSchema=new DataSchema(notificationSchema.getSchema());
    ProtocolSchema protocolSchema=new ProtocolSchema(configurationSchema.getProtocolSchema());
    DataSchema logDataSchema=new DataSchema(logSchema.getSchema());
    String profileSchemaBody=profileDataSchema.getRawSchema();
    byte[] defaultConfigurationData=GenericAvroConverter.toRawData(defaultConfiguration.getBody(),configurationSchema.getBaseSchema());
    List<EventFamilyMetadata> eventFamilies=new ArrayList<>();
    if (sdkProfileDto.getAefMapIds() != null) {
      List<ApplicationEventFamilyMapDto> aefMaps=applicationEventMapService.findApplicationEventFamilyMapsByIds(sdkProfileDto.getAefMapIds());
      for (      ApplicationEventFamilyMapDto aefMap : aefMaps) {
        EventFamilyMetadata efm=new EventFamilyMetadata();
        efm.setVersion(aefMap.getVersion());
        efm.setEventMaps(aefMap.getEventMaps());
        EventClassFamilyDto ecf=eventClassService.findEventClassFamilyById(aefMap.getEcfId());
        efm.setEcfName(ecf.getName());
        efm.setEcfNamespace(ecf.getNamespace());
        efm.setEcfClassName(ecf.getClassName());
        List<EventSchemaVersionDto> ecfSchemas=ecf.getSchemas();
        for (        EventSchemaVersionDto ecfSchema : ecfSchemas) {
          if (ecfSchema.getVersion() == efm.getVersion()) {
            efm.setEcfSchema(ecfSchema.getSchema());
            break;
          }
        }
        eventFamilies.add(efm);
      }
    }
    LOG.debug("Sdk properties for sdk generation: {}, {}",sdkProfileDto,targetPlatform);
    SdkGenerator generator=null;
switch (targetPlatform) {
case JAVA:
      generator=SdkGeneratorFactory.createSdkGenerator(SdkPlatform.JAVA);
    break;
case ANDROID:
  generator=SdkGeneratorFactory.createSdkGenerator(SdkPlatform.ANDROID);
break;
case CPP:
generator=SdkGeneratorFactory.createSdkGenerator(SdkPlatform.CPP);
break;
case C:
generator=SdkGeneratorFactory.createSdkGenerator(SdkPlatform.C);
break;
}
return generator.generateSdk(Version.PROJECT_VERSION,controlZKService.getCurrentBootstrapNodes(),sdkProfileDto.getToken(),sdkProfileDto,profileSchemaBody,notificationDataSchema.getRawSchema(),protocolSchema.getRawSchema(),configurationSchema.getBaseSchema(),defaultConfigurationData,eventFamilies,logDataSchema.getRawSchema());
}
 catch (Exception e) {
LOG.error("Unable to generate SDK",e);
throw new TException(e);
}
}
