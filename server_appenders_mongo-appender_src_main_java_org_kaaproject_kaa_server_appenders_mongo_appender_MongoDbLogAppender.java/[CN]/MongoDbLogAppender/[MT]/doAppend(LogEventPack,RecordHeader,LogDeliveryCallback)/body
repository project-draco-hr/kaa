{
  if (!closed) {
    try {
      ProfileInfo clientProfile=logEventPack.getClientProfile();
      if (clientProfile == null && this.clientProfileRequired) {
        throw new RuntimeException("Client profile is not set!");
      }
      ProfileInfo serverProfile=logEventPack.getServerProfile();
      if (serverProfile == null && serverProfileRequired) {
        throw new RuntimeException("Server profile is not set!");
      }
      LOG.debug("[{}] appending {} logs to mongodb collection",collectionName,logEventPack.getEvents().size());
      List<LogEventDto> dtos=generateLogEvent(logEventPack,header);
      LOG.debug("[{}] saving {} objects",collectionName,dtos.size());
      if (!dtos.isEmpty()) {
        logEventDao.save(dtos,clientProfile,serverProfile,collectionName);
        LOG.debug("[{}] appended {} logs to mongodb collection",collectionName,logEventPack.getEvents().size());
      }
      listener.onSuccess();
    }
 catch (    MongoSocketException e) {
      LOG.error(MessageFormat.format("[{0}] Attempted to append logs failed due to network error",getName()),e);
      listener.onConnectionError();
    }
catch (    MongoInternalException|MongoServerException e) {
      LOG.error(MessageFormat.format("[{0}] Attempted to append logs failed due to remote error",getName()),e);
      listener.onRemoteError();
    }
catch (    Exception e) {
      LOG.error(MessageFormat.format("[{0}] Attempted to append logs failed due to internal error",getName()),e);
      listener.onInternalError();
    }
  }
 else {
    LOG.info("Attempted to append to closed appender named [{}].",getName());
    listener.onInternalError();
  }
}
