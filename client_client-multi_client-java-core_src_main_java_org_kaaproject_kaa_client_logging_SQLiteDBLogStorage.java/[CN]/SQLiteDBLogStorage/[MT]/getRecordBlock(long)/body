{
synchronized (connection) {
    LOG.trace("Creating a new record block, needed size: {}",blockSize);
    Statement statement=null;
    LogBlock logBlock=null;
    List<String> unmarkedRecordIds=new LinkedList<>();
    List<LogRecord> logRecords=new LinkedList<>();
    try {
      long leftBlockSize=blockSize;
      statement=connection.createStatement();
      ResultSet rs=statement.executeQuery(KAA_SELECT_UNMARKED_RECORDS);
      while (rs.next()) {
        int recordId=rs.getInt(1);
        byte[] recordData=rs.getBytes(2);
        if (recordData != null && recordData.length > 0) {
          if (leftBlockSize < recordData.length) {
            break;
          }
          logRecords.add(new LogRecord(recordData));
          unmarkedRecordIds.add(String.valueOf(recordId));
          leftBlockSize-=recordData.length;
        }
 else {
          LOG.warn("Found unmarked record with no data. Deleting it...");
          removeRecordById(recordId);
        }
      }
      if (!logRecords.isEmpty()) {
        updateBucketIdForRecords(currentBucketId,unmarkedRecordIds);
        logBlock=new LogBlock(currentBucketId++,logRecords);
        long logBlockSize=blockSize - leftBlockSize;
        consumedSize-=logBlockSize;
        consumedMemoryStorage.put(logBlock.getBlockId(),logBlockSize);
        LOG.info("Created log block: id [{}], size {}. Log block record count: {}, Total record count: {}",logBlock.getBlockId(),logBlockSize,logBlock.getRecords().size(),recordCount);
      }
 else {
        LOG.info("No unmarked log records found");
      }
    }
 catch (    SQLException e) {
      LOG.error("Can't retrieve unmarked records from storage",e);
    }
    return logBlock;
  }
}
