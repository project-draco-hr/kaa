{
  if (isInEditMode())   return;
  final TypedArray typedArray=context.obtainStyledAttributes(attrs,R.styleable.RippleView);
  mRippleColor=typedArray.getColor(R.styleable.RippleView_rv_color,getResources().getColor(R.color.rippleColor));
  mRippleType=typedArray.getInt(R.styleable.RippleView_rv_type,SIMPLE_RIPPLE);
  mHasToZoom=typedArray.getBoolean(R.styleable.RippleView_rv_zoom,false);
  mIsCentered=typedArray.getBoolean(R.styleable.RippleView_rv_centered,false);
  mDuration=typedArray.getInteger(R.styleable.RippleView_rv_rippleDuration,mDuration);
  mFrameRate=typedArray.getInteger(R.styleable.RippleView_rv_framerate,mFrameRate);
  mPaintAlpha=typedArray.getInteger(R.styleable.RippleView_rv_alpha,mPaintAlpha);
  mRipplePadding=typedArray.getDimensionPixelSize(R.styleable.RippleView_rv_ripplePadding,0);
  mCanvasHandler=new Handler();
  mZoomScale=typedArray.getFloat(R.styleable.RippleView_rv_zoomScale,1.03f);
  mZoomDuration=typedArray.getInt(R.styleable.RippleView_rv_zoomDuration,200);
  typedArray.recycle();
  mPaint=new Paint();
  mPaint.setAntiAlias(true);
  mPaint.setStyle(Paint.Style.FILL);
  mPaint.setColor(mRippleColor);
  mPaint.setAlpha(mPaintAlpha);
  this.setWillNotDraw(false);
  mGestureDetector=new GestureDetector(context,new GestureDetector.SimpleOnGestureListener(){
    @Override public void onLongPress(    MotionEvent event){
      super.onLongPress(event);
      animateRipple(event);
      sendClickEvent(true);
    }
    @Override public boolean onSingleTapConfirmed(    MotionEvent e){
      return true;
    }
    @Override public boolean onSingleTapUp(    MotionEvent e){
      return true;
    }
  }
);
  this.setDrawingCacheEnabled(true);
  this.setClickable(true);
}
