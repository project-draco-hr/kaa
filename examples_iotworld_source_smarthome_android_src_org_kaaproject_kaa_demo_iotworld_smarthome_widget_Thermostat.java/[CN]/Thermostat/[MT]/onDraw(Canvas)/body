{
  canvas.drawCircle(mArcRect.centerX(),mArcRect.centerY(),Math.min(getWidth(),getHeight()) / 2,mBackgroundPaint);
  if (!mClockwise) {
    canvas.scale(-1,1,mArcRect.centerX(),mArcRect.centerY());
  }
  final int arcStart=mStartAngle + mAngleOffset + mRotation;
  final int arcSweep=mSweepAngle;
  if (mEnableBlur) {
    canvas.drawArc(mArcRect,arcStart,arcSweep,false,mArcPaintGlow);
  }
  canvas.drawArc(mArcRect,arcStart,arcSweep,false,mArcPaint);
  if (mEnableBlur) {
    canvas.drawArc(mArcRect,arcStart + mTargetProgressSweep,mProgressSweep - mTargetProgressSweep,false,mProgressPaintGlow);
  }
  canvas.drawArc(mArcRect,arcStart + mTargetProgressSweep,mProgressSweep - mTargetProgressSweep,false,mProgressPaint);
  if (mEnableBlur) {
    canvas.drawArc(mArcRect,arcStart + mProgressSweep - 1.5f,3,false,mProgressThumbPaintGlow);
  }
  canvas.drawArc(mArcRect,arcStart + mProgressSweep - 1.5f,3,false,mProgressThumbPaint);
  if (mEnableBlur) {
    canvas.drawArc(mTargetThumbArcRect,arcStart + mTargetProgressSweep - 1.5f,3,false,mTargetThumbPaintGlow);
  }
  canvas.drawArc(mTargetThumbArcRect,arcStart + mTargetProgressSweep - 1.5f,3,false,mTargetThumbPaint);
  int xPos=mTranslateX - mTextXPos;
  if (mEnableBlur) {
    int yPos=(int)(mTranslateY - mTextYPos - ((mTextPaintGlow.descent() + mTextPaintGlow.ascent()) / 2));
    canvas.drawText(getTemp() + "",xPos,yPos,mTextPaintGlow);
  }
  int yPos=(int)(mTranslateY - mTextYPos - ((mTextPaint.descent() + mTextPaint.ascent()) / 2));
  canvas.drawText(getTemp() + "",xPos,yPos,mTextPaint);
  if (mEnableBlur) {
    yPos=(int)(mTranslateY - ((mTargetTextPaintGlow.descent() + mTargetTextPaintGlow.ascent()) / 2));
    canvas.drawText(getTargetTemp() + "",mTranslateX,yPos,mTargetTextPaintGlow);
  }
  yPos=(int)(mTranslateY - ((mTargetTextPaint.descent() + mTargetTextPaint.ascent()) / 2));
  canvas.drawText(getTargetTemp() + "",mTranslateX,yPos,mTargetTextPaint);
  float mTempY;
  if (mEnableBlur) {
    mTempY=mTranslateY + mTargetTextPaintGlow.descent() + mTargetTextPaintGlow.ascent() - mTempDist;
  }
 else {
    mTempY=mTranslateY + mTargetTextPaint.descent() + mTargetTextPaint.ascent() - mTempDist;
  }
  String text=mIdleText.toString();
  if (mIsOperating && mProgress != mTargetProgress) {
    text=mProgress < mTargetProgress ? mHeatingText.toString() : mCoolingText.toString();
  }
  text=text.toUpperCase();
  if (mEnableBlur) {
    yPos=(int)(mTempY - ((mTempTextPaintGlow.descent() + mTempTextPaintGlow.ascent()) / 2));
    canvas.drawText(text,mTranslateX,yPos,mTempTextPaintGlow);
  }
  yPos=(int)(mTempY - ((mTempTextPaint.descent() + mTempTextPaint.ascent()) / 2));
  canvas.drawText(text,mTranslateX,yPos,mTempTextPaint);
  if (mEnableBlur) {
    canvas.drawLine(mControlUpRect.left,mControlUpRect.bottom,mControlUpRect.left + mControlUpRect.width() / 2f,mControlUpRect.top,mControlPaintGlow);
    canvas.drawLine(mControlUpRect.left + mControlUpRect.width() / 2f,mControlUpRect.top,mControlUpRect.right,mControlUpRect.bottom,mControlPaintGlow);
    canvas.drawLine(mControlDownRect.left,mControlDownRect.top,mControlDownRect.left + mControlDownRect.width() / 2f,mControlDownRect.bottom,mControlPaintGlow);
    canvas.drawLine(mControlDownRect.left + mControlDownRect.width() / 2f,mControlDownRect.bottom,mControlDownRect.right,mControlDownRect.top,mControlPaintGlow);
  }
  canvas.drawLine(mControlUpRect.left,mControlUpRect.bottom,mControlUpRect.left + mControlUpRect.width() / 2f,mControlUpRect.top,mControlPaint);
  canvas.drawLine(mControlUpRect.left + mControlUpRect.width() / 2f,mControlUpRect.top,mControlUpRect.right,mControlUpRect.bottom,mControlPaint);
  canvas.drawLine(mControlDownRect.left,mControlDownRect.top,mControlDownRect.left + mControlDownRect.width() / 2f,mControlDownRect.bottom,mControlPaint);
  canvas.drawLine(mControlDownRect.left + mControlDownRect.width() / 2f,mControlDownRect.bottom,mControlDownRect.right,mControlDownRect.top,mControlPaint);
}
