{
  GenericAvroConverter<BasicEndpointProfile> converter=new GenericAvroConverter<BasicEndpointProfile>(BasicEndpointProfile.SCHEMA$);
  BasicEndpointProfile theLog=new BasicEndpointProfile("test");
  List<LogEvent> events=new ArrayList<>();
  LogEvent event1=new LogEvent();
  event1.setLogData(new byte[0]);
  LogEvent event2=new LogEvent();
  event2.setLogData(converter.encode(theLog));
  LogEvent event3=new LogEvent();
  event3.setLogData(converter.encode(theLog));
  events.add(event1);
  events.add(event2);
  events.add(event3);
  LogSchemaDto schemaDto=new LogSchemaDto();
  LogSchema schema=new LogSchema(schemaDto,BasicEndpointProfile.SCHEMA$.toString());
  EndpointProfileDataDto profileDto=new EndpointProfileDataDto("1",ENDPOINT_KEY,1,"",0,null);
  BaseLogEventPack logEventPack=new BaseLogEventPack(profileDto,DATE_CREATED,schema.getVersion(),events);
  logEventPack.setLogSchema(schema);
  LogEventDao logEventDao=Mockito.mock(LogEventDao.class);
  LogEventDao eventDao=(LogEventDao)ReflectionTestUtils.getField(logAppender,"logEventDao");
  ReflectionTestUtils.setField(logAppender,"logEventDao",logEventDao);
  TestLogDeliveryCallback callback=new TestLogDeliveryCallback();
  logAppender.doAppend(logEventPack,callback);
  Assert.assertTrue(callback.internallError);
  Mockito.verify(logEventDao,Mockito.never()).save(Mockito.anyList(),Mockito.<ProfileInfo>anyObject(),Mockito.<ProfileInfo>anyObject(),Mockito.anyString());
  ReflectionTestUtils.setField(logAppender,"logEventDao",eventDao);
}
