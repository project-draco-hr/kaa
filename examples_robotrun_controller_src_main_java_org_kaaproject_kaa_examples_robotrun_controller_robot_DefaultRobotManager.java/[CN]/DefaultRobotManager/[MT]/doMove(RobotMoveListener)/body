{
  if (stopped) {
    return;
  }
  if (currentPos.equals(targetPos)) {
    clearProgress();
    listener.onMoveSuccess();
  }
 else {
    Direction targetDirection=getMoveDirection(currentPos,targetPos);
    if (currentDirection != targetDirection) {
      TurnDirection turn=getTurnDirection(currentDirection,targetDirection);
      final Direction pendingDirection=getDirection(currentDirection,turn);
      drivable.registerTurnCallback(new TurnCallback(){
        @Override public void complete(        OperationStatus status){
          if (status == OperationStatus.SUCESSFULL) {
            LOG.info("Turned robot from {} to {}",currentDirection,pendingDirection);
            currentDirection=pendingDirection;
          }
 else {
            LOG.warn("Failed to turn robot from {} to {}",currentDirection,pendingDirection);
          }
          doMove(listener);
        }
      }
);
      drivable.turn(turn,true);
    }
 else {
      final Cell pendingPos=targetPos;
      drivable.registerMoveForwardCallback(new MoveForwardCallback(){
        @Override public void complete(        OperationStatus status){
          if (status == OperationStatus.SUCESSFULL) {
            LOG.info("Moved robot from {} to {}",currentPos,pendingPos);
            currentPos=pendingPos;
          }
 else {
            LOG.warn("Failed to move robot from {} to {}",currentPos,pendingPos);
          }
          doMove(listener);
        }
      }
);
      drivable.moveForward(true);
    }
  }
}
