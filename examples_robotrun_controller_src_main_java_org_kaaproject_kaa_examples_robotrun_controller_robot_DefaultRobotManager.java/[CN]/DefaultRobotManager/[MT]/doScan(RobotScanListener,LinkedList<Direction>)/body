{
  if (stopped) {
    return;
  }
  if (undiscoveredDirections.size() > 0) {
    turnDirection=guessTurnDirection(currentDirection,undiscoveredDirections.peek());
    if (turnDirection == null) {
      drivable.registerPingCallback(new PingCallback(){
        @Override public void pong(        PongStatus status){
          BorderType borderType=(status == PongStatus.EMPTY ? BorderType.FREE : BorderType.SOLID);
          LOG.info("Scanned in cell {} with direction {} -> {}",currentPos,currentDirection,borderType);
          listener.onScan(currentDirection,borderType);
          if (undiscoveredDirections.size() > 1) {
            undiscoveredDirections.poll();
            doScan(listener,undiscoveredDirections);
          }
 else {
            turnClockwise=!turnClockwise;
            LOG.debug("Change turn direction to {}",(turnClockwise ? "RIGHT" : "LEFT"));
            clearProgress();
            listener.onScanComplete();
          }
        }
      }
);
      drivable.ping();
    }
 else {
      drivable.registerTurnCallback(new TurnCallback(){
        @Override public void complete(        OperationStatus status){
          if (status == OperationStatus.SUCESSFULL) {
            LOG.info("Turned robot from {} to {}",currentDirection,turnDirection);
            currentDirection=getDirection(currentDirection,turnDirection);
          }
 else {
            LOG.warn("Failed to turn robot from {} to {}",currentDirection,turnDirection);
          }
          if (undiscoveredDirections.peek() == currentDirection) {
            doScan(listener,undiscoveredDirections);
          }
 else {
            drivable.turn(turnDirection,true);
          }
        }
      }
);
      drivable.turn(turnDirection,true);
    }
  }
}
