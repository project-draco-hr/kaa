{
  logger.info("Loading 'Java configuration demo application' data...");
  loginTenantAdmin(client);
  ApplicationDto configurationApplication=new ApplicationDto();
  configurationApplication.setName("Java configuration");
  configurationApplication=client.editApplication(configurationApplication);
  sdkKey.setApplicationId(configurationApplication.getId());
  sdkKey.setProfileSchemaVersion(1);
  sdkKey.setNotificationSchemaVersion(1);
  sdkKey.setLogSchemaVersion(1);
  sdkKey.setTargetPlatform(SdkPlatform.JAVA);
  loginTenantDeveloper(client);
  logger.info("Creating configuration schema...");
  ConfigurationSchemaDto configurationSchema=new ConfigurationSchemaDto();
  configurationSchema.setApplicationId(configurationApplication.getId());
  configurationSchema.setName("JavaConfigurationDemo schema");
  configurationSchema.setDescription("Default configuration schema for the Java configuration demo application");
  configurationSchema=client.createConfigurationSchema(configurationSchema,"demo/jconfiguration/config_schema.avsc");
  logger.info("Configuration schema version: {}",configurationSchema.getMajorVersion());
  sdkKey.setConfigurationSchemaVersion(configurationSchema.getMajorVersion());
  logger.info("Configuration schema was created.");
  EndpointGroupDto baseEndpointGroup=null;
  List<EndpointGroupDto> endpointGroups=client.getEndpointGroups(configurationApplication.getId());
  if (endpointGroups.size() == 1 && endpointGroups.get(0).getWeight() == 0) {
    baseEndpointGroup=endpointGroups.get(0);
  }
  if (baseEndpointGroup == null) {
    throw new RuntimeException("Can't get default endpoint group for Java configuration demo application!");
  }
  ConfigurationDto baseConfiguration=new ConfigurationDto();
  baseConfiguration.setApplicationId(configurationApplication.getId());
  baseConfiguration.setEndpointGroupId(baseEndpointGroup.getId());
  baseConfiguration.setSchemaId(configurationSchema.getId());
  baseConfiguration.setMajorVersion(configurationSchema.getMajorVersion());
  baseConfiguration.setMinorVersion(configurationSchema.getMinorVersion());
  baseConfiguration.setDescription("Base Java configuration demo configuration");
  String body=FileUtils.readResource("demo/jconfiguration/config_data.json");
  logger.info("Configuration body: [{}]",body);
  baseConfiguration.setBody(body);
  baseConfiguration.setStatus(UpdateStatus.INACTIVE);
  logger.info("Editing the configuration...");
  baseConfiguration=client.editConfiguration(baseConfiguration);
  logger.info("Configuration was successfully edited");
  logger.info("Activating the configuration");
  client.activateConfiguration(baseConfiguration.getId());
  logger.info("Configuration was activated");
  TrustfulVerifierConfig trustfulVerifierConfig=new TrustfulVerifierConfig();
  UserVerifierDto trustfulUserVerifier=new UserVerifierDto();
  trustfulUserVerifier.setApplicationId(configurationApplication.getId());
  trustfulUserVerifier.setName("Trustful verifier");
  trustfulUserVerifier.setPluginClassName(trustfulVerifierConfig.getPluginClassName());
  trustfulUserVerifier.setPluginTypeName(trustfulVerifierConfig.getPluginTypeName());
  RawSchema rawSchema=new RawSchema(trustfulVerifierConfig.getPluginConfigSchema().toString());
  DefaultRecordGenerationAlgorithm<RawData> algotithm=new DefaultRecordGenerationAlgorithmImpl<>(rawSchema,new RawDataFactory());
  RawData rawData=algotithm.getRootData();
  trustfulUserVerifier.setJsonConfiguration(rawData.getRawData());
  trustfulUserVerifier=client.editUserVerifierDto(trustfulUserVerifier);
  sdkKey.setDefaultVerifierToken(trustfulUserVerifier.getVerifierToken());
  logger.info("Finished loading 'Java configuration demo application' data...");
}
