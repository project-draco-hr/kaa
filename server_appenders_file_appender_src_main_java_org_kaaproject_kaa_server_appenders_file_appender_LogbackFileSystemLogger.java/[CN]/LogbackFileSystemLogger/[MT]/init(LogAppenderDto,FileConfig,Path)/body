{
  LOG.info("[{}][{}] Initializing with rollingFileNamePatern: {}, rollingMaxHistory: {}, triggerMaxFileSize: {}, encoderPattern: {}",appenderDto.getTenantId(),appenderDto.getApplicationId(),config.getRollingFileNamePatern(),config.getRollingMaxHistory(),config.getTriggerMaxFileSize(),config.getEncoderPattern());
  LoggerContext loggerContext=(LoggerContext)LoggerFactory.getILoggerFactory();
  rfAppender=new RollingFileAppender();
  rfAppender.setContext(loggerContext);
  rfAppender.setFile(filePath.toAbsolutePath().toString());
  TimeBasedRollingPolicy rollingPolicy=new TimeBasedRollingPolicy<>();
  rollingPolicy.setFileNamePattern(config.getRollingFileNamePatern());
  rollingPolicy.setMaxHistory(config.getRollingMaxHistory());
  rollingPolicy.setContext(loggerContext);
  rollingPolicy.setParent(rfAppender);
  rollingPolicy.start();
  SizeBasedTriggeringPolicy triggeringPolicy=new ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy();
  triggeringPolicy.setMaxFileSize(config.getTriggerMaxFileSize());
  triggeringPolicy.start();
  PatternLayoutEncoder encoder=new PatternLayoutEncoder();
  encoder.setContext(loggerContext);
  encoder.setPattern(config.getEncoderPattern());
  encoder.start();
  rfAppender.setEncoder(encoder);
  rfAppender.setRollingPolicy(rollingPolicy);
  rfAppender.setTriggeringPolicy(triggeringPolicy);
  rfAppender.start();
  logger=loggerContext.getLogger(appenderDto.getTenantId() + "." + appenderDto.getApplicationToken());
  logger.setLevel(Level.ALL);
  logger.addAppender(rfAppender);
  LOG.debug("[{}][{}] Initialized with context {}",appenderDto.getTenantId(),appenderDto.getApplicationId(),loggerContext);
}
