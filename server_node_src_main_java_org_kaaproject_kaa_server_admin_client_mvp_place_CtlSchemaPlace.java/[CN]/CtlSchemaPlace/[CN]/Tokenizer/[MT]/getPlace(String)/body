{
  PlaceParams.paramsFromToken(token);
  String metaInfoId=PlaceParams.getParam(META_INFO_ID);
  Integer version=null;
  if (PlaceParams.hasParam(VERSION)) {
    version=PlaceParams.getIntParam(VERSION);
  }
  CTLSchemaScopeDto scope=null;
  if (PlaceParams.hasParam(SCOPE)) {
    scope=CTLSchemaScopeDto.valueOf(PlaceParams.getParam(SCOPE));
  }
  SchemaType schemaType=null;
  if (PlaceParams.hasParam(SCHEMA_TYPE)) {
    schemaType=SchemaType.valueOf(PlaceParams.getParam(SCHEMA_TYPE));
  }
  boolean editable=PlaceParams.getBooleanParam(EDITABLE);
  boolean create=PlaceParams.getBooleanParam(CREATE);
  CtlSchemaPlace place=null;
  if (scope == CTLSchemaScopeDto.APPLICATION || scope == CTLSchemaScopeDto.SYSTEM) {
    String applicationId=PlaceParams.getParam(APPLICATION_ID);
    place=new CtlSchemaPlace(metaInfoId,version,scope,applicationId,editable,create);
  }
  if (scope == CTLSchemaScopeDto.TENANT) {
    String ecfId=PlaceParams.getParam(ECF_ID);
    String ecfVersionId=PlaceParams.getParam(ECF_VERSION_ID);
    int ecfVersion=-1;
    if (PlaceParams.getParam(ECF_VERSION) != null) {
      ecfVersion=Integer.valueOf(PlaceParams.getParam(ECF_VERSION));
    }
    place=new CtlSchemaPlace(metaInfoId,version,scope,ecfId,ecfVersionId,ecfVersion,editable,create);
  }
  place.setSchemaType(schemaType);
  return place;
}
