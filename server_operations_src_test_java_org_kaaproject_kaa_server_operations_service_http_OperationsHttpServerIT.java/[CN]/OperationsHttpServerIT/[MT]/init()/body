{
  executor=Executors.newCachedThreadPool();
  config=new OperationsServerConfig();
  httpChannelConfig=new HttpChannelConfig();
  httpChannelConfig.setBindInterface("localhost");
  httpChannelConfig.setPort(bindPort);
  httpChannelConfig.setClientMaxBodySize(MAX_HTTP_REQUEST_SIZE);
  httpChannelConfig.setExecutorThreadSize(3);
  mockKeystoreService=mock(FileKeyStoreService.class);
  KaaCommandProcessorFactory<HttpRequest,HttpResponse> commandSyncProcessorFactory=new TestSyncCommandFactory(SyncCommand.getCommandName(),testOperationsService,testCacheService,mockKeystoreService);
  KaaCommandProcessorFactory<HttpRequest,HttpResponse> commandLongSyncProcessorFactory=new TestLongSyncCommandFactory(LongSyncCommand.getCommandName(),testOperationsService,testCacheService,mockKeystoreService);
  List<KaaCommandProcessorFactory> commands=new ArrayList<>();
  commands.add(commandSyncProcessorFactory);
  commands.add(commandLongSyncProcessorFactory);
  httpChannelConfig.setCommandList(commands);
  KeyPairGenerator serverKeyGen;
  try {
    serverKeyGen=KeyPairGenerator.getInstance("RSA");
    serverKeyGen.initialize(2048);
    KeyPair servertKeyPair=serverKeyGen.genKeyPair();
    serverPrivateKey=servertKeyPair.getPrivate();
    serverPublicKey=servertKeyPair.getPublic();
  }
 catch (  NoSuchAlgorithmException e) {
    fail(e.toString());
  }
  bootstrapServiceMock=mock(DefaultOperationsBootstrapService.class);
  when(bootstrapServiceMock.getKeyStoreService()).thenReturn(mockKeystoreService);
  when(mockKeystoreService.getPublicKey()).thenReturn(serverPublicKey);
  when(mockKeystoreService.getPrivateKey()).thenReturn(serverPrivateKey);
  when(bootstrapServiceMock.getCacheService()).thenReturn(testCacheService);
  when(bootstrapServiceMock.getOperationsService()).thenReturn(testOperationsService);
  testAkkaService.start();
}
