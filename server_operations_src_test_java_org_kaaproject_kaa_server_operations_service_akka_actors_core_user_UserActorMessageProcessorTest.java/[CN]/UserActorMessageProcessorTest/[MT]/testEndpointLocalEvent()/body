{
  EndpointUserConnectMessage message1=new EndpointUserConnectMessage(USER_ID,endpoint1Key,ecfVersions,1,APP_TOKEN,originatorRefMock);
  messageProcessor.processEndpointConnectMessage(actorContextMock,message1);
  EndpointUserConnectMessage message2=new EndpointUserConnectMessage(USER_ID,endpoint2Key,ecfVersions,1,APP_TOKEN,originatorRefMock);
  messageProcessor.processEndpointConnectMessage(actorContextMock,message2);
  verify(eventServiceMock).sendUserRouteInfo(new UserRouteInfo(TENANT_ID,USER_ID));
  verify(eventServiceMock,Mockito.times(0)).sendRouteInfo(any(RouteInfo.class),any(String.class));
  when(cacheServiceMock.getEventClassFamilyIdByEventClassFqn(new EventClassFqnKey(TENANT_ID,"testClassFqn"))).thenReturn(ECF_ID1);
  RouteTableKey routeKey=new RouteTableKey(APP_TOKEN,ecfVersion1);
  when(cacheServiceMock.getRouteKeys(new EventClassFqnVersion(TENANT_ID,"testClassFqn",ECF_ID1_VERSION))).thenReturn(Collections.singleton(routeKey));
  Event event=new Event(0,"testClassFqn",ByteBuffer.wrap(new byte[0]),null,Base64Util.encode(endpoint1Key.getData()));
  EndpointEventSendMessage eventMessage=new EndpointEventSendMessage(USER_ID,Collections.singletonList(event),endpoint2Key,APP_TOKEN,originatorRefMock);
  messageProcessor.processEndpointEventSendMessage(actorContextMock,eventMessage);
  verify(messageProcessor).sendEventToLocal(Mockito.any(ActorContext.class),Mockito.any(EndpointEventReceiveMessage.class));
}
