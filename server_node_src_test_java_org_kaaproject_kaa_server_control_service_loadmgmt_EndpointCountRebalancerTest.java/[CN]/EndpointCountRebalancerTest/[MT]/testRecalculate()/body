{
  Rebalancer rebalancer=new EndpointCountRebalancer();
  assertNotNull(rebalancer);
  Integer server1="dns1".hashCode();
  OperationsServerLoadHistory server1History=new OperationsServerLoadHistory(MAX_HISTORY_TIME_LIVE);
  server1History.addOpsServerLoad(new LoadInfo(100000,1.0));
  Integer server2="dns2".hashCode();
  OperationsServerLoadHistory server2History=new OperationsServerLoadHistory(MAX_HISTORY_TIME_LIVE);
  server2History.addOpsServerLoad(new LoadInfo(40000,1.0));
  Integer server3="dns3".hashCode();
  OperationsServerLoadHistory server3History=new OperationsServerLoadHistory(MAX_HISTORY_TIME_LIVE);
  server3History.addOpsServerLoad(new LoadInfo(10000,1.0));
  Integer server4="dns4".hashCode();
  OperationsServerLoadHistory server4History=new OperationsServerLoadHistory(MAX_HISTORY_TIME_LIVE);
  server4History.addOpsServerLoad(new LoadInfo(10000,1.0));
  Map<Integer,OperationsServerLoadHistory> serversHistory=new LinkedHashMap<Integer,OperationsServerLoadHistory>();
  serversHistory.put(server1,server1History);
  serversHistory.put(server2,server2History);
  serversHistory.put(server3,server3History);
  serversHistory.put(server4,server4History);
  Map<Integer,List<RedirectionRule>> rules=rebalancer.recalculate(serversHistory);
  assertNotNull(rules);
  assertEquals(1,rules.size());
  assertNotNull(rules.get(server1));
  assertEquals(2,rules.get(server1).size());
  assertEquals(server3.intValue(),rules.get(server1).get(0).getAccessPointId());
  assertEquals(0.375,rules.get(server1).get(0).getInitRedirectProbability(),0.0);
  assertEquals(0.0,rules.get(server1).get(0).getSessionRedirectProbability(),0.0);
  assertEquals(server4.intValue(),rules.get(server1).get(1).getAccessPointId());
  assertEquals(0.375,rules.get(server1).get(1).getInitRedirectProbability(),0.0);
  assertEquals(0.0,rules.get(server1).get(1).getSessionRedirectProbability(),0.0);
}
