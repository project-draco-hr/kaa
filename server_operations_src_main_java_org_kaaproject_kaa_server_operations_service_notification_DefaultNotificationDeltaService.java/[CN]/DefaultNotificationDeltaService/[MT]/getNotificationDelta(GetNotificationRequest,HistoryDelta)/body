{
  String endpointId=Base64Util.encode(request.getProfile());
  GetNotificationResponse response=new GetNotificationResponse();
  EndpointProfileDto profile=request.getProfile();
  Set<String> subscriptionSet=buildSubscriptionSet(profile);
  boolean subscriptionSetChanged=false;
  if (historyDelta.isTopicListChanged()) {
    LOG.debug("[{}] Topic list changed. recalculating topic list",endpointId);
    List<TopicDto> topicList=recalculateTopicList(historyDelta);
    LOG.debug("[{}] New topic list contains {} topics",endpointId,topicList.size());
    List<String> allPossibleTopics=new ArrayList<>(topicList.size());
    for (    TopicDto topic : topicList) {
      allPossibleTopics.add(topic.getId());
      if (topic.getType() == TopicTypeDto.MANDATORY) {
        if (subscriptionSet.add(topic.getId())) {
          subscriptionSetChanged=true;
          LOG.debug("[{}] added subscription for mandatory topic id: {}, name: {}",endpointId,topic.getId(),topic.getName());
        }
      }
    }
    if (subscriptionSet.retainAll(allPossibleTopics)) {
      subscriptionSetChanged=true;
    }
    response.setTopicList(topicList);
  }
  if (request.getSubscriptionCommands() != null) {
    for (    SubscriptionCommand sCommand : request.getSubscriptionCommands()) {
      if (sCommand.getCommand() == SubscriptionCommandType.ADD) {
        if (subscriptionSet.add(sCommand.getTopicId())) {
          LOG.debug("[{}] added subscription for topic id: {} based on client request",endpointId,sCommand.getTopicId());
          subscriptionSetChanged=true;
        }
      }
 else {
        if (subscriptionSet.remove(sCommand.getTopicId())) {
          LOG.debug("[{}] removed subscription for topic id: {} based on client request",endpointId,sCommand.getTopicId());
          subscriptionSetChanged=true;
        }
      }
    }
  }
  Map<String,Integer> subscriptionStates=buildTopicStateMap(request,subscriptionSet);
  List<NotificationDto> notifications=new ArrayList<>();
  for (  String topicId : subscriptionSet) {
    int seqNumber=subscriptionStates.get(topicId);
    LOG.debug("[{}] fetch new subscriptions for topic id: {}, system schema version {}, user schema version {}, starting seq number {}",endpointId,topicId,profile.getSystemNfVersion(),profile.getUserNfVersion(),seqNumber);
    List<NotificationDto> topicNotifications=notificationService.findNotificationsByTopicIdAndVersionAndStartSecNum(topicId,seqNumber,profile.getSystemNfVersion(),profile.getUserNfVersion());
    if (topicNotifications != null) {
      int count=0;
      for (      NotificationDto notification : topicNotifications) {
        seqNumber=Math.max(seqNumber,notification.getSecNum());
        Date date=notification.getExpiredAt();
        if (date != null && date.after(new Date())) {
          notifications.add(notification);
          count++;
        }
      }
      LOG.debug("[{}] detected {} new subscriptions for topic id: {} ",endpointId,count,topicId);
      subscriptionStates.put(topicId,seqNumber);
    }
  }
  if (request.getAcceptedUnicastNotifications() != null) {
    for (    String acceptedUnicastId : request.getAcceptedUnicastNotifications()) {
      notificationService.removeUnicastNotificationById(acceptedUnicastId);
      LOG.debug("[{}] deleted accepted unicast notification {} ",endpointId,acceptedUnicastId);
    }
  }
  List<EndpointNotificationDto> unicastNotifications=notificationService.findUnicastNotificationsByKeyHash(request.getProfile().getEndpointKeyHash());
  for (  EndpointNotificationDto unicastNotification : unicastNotifications) {
    LOG.debug("[{}] detected new unicast notification: {} ",endpointId,unicastNotification.getId());
    LOG.trace("[{}] detected new unicast notification: {} ",endpointId,unicastNotification);
    NotificationDto notificationDto=unicastNotification.getNotificationDto();
    if (notificationDto != null) {
      Date date=notificationDto.getExpiredAt();
      if (date != null && date.after(new Date())) {
        notificationDto.setId(unicastNotification.getId());
        notifications.add(notificationDto);
      }
    }
  }
  response.setNotifications(notifications);
  response.setSubscriptionStates(subscriptionStates);
  if (subscriptionSetChanged) {
    LOG.debug("[{}] Updating profile with subscription set. Size {}",endpointId,subscriptionSet.size());
    response.setSubscriptionSetChanged(true);
    profile.setSubscriptions(new ArrayList<>(subscriptionSet));
  }
  return response;
}
