{
  CTLSchemaDto savedCtlSchemaDto=null;
  validateCTLSchemaObject(unSavedSchema);
  CTLSchemaMetaInfoDto metaInfo=unSavedSchema.getMetaInfo();
  CTLSchemaScopeDto currentScope=null;
  if (isBlank(unSavedSchema.getTenantId())) {
    currentScope=SYSTEM;
  }
 else   if (!isBlank(unSavedSchema.getTenantId())) {
    currentScope=TENANT;
  }
 else   if (!isBlank(unSavedSchema.getAppId())) {
    currentScope=APPLICATION;
  }
  metaInfo.setSchemaScopeDto(currentScope);
  CTLSchemaMetaInfo uniqueMetaInfo=null;
  try {
    uniqueMetaInfo=schemaMetaInfoDao.findByFqnAndVersion(metaInfo.getFqn(),metaInfo.getVersion());
    if (uniqueMetaInfo == null) {
synchronized (schemaMetaInfoDao) {
        uniqueMetaInfo=schemaMetaInfoDao.save(new CTLSchemaMetaInfo(metaInfo));
      }
    }
  }
 catch (  Exception e) {
    LOG.warn("---> Got exception",e);
    uniqueMetaInfo=schemaMetaInfoDao.findByFqnAndVersion(metaInfo.getFqn(),metaInfo.getVersion());
  }
  schemaMetaInfoDao.lock(uniqueMetaInfo,LockOptions.READ);
switch (uniqueMetaInfo.getSchemaScopeDto()) {
case SYSTEM:
    throw new RuntimeException("Disable to store system ctl schema with same fqn and version.");
case TENANT:
  if (currentScope == SYSTEM) {
    throw new RuntimeException("Disable to store system ctl schema. Tenant's scope schema already exists with the same fqn and version.");
  }
break;
case APPLICATION:
break;
default :
break;
}
CTLSchema ctlSchema=new CTLSchema(unSavedSchema);
ctlSchema.setMetaInfo(uniqueMetaInfo);
savedCtlSchemaDto=getDto(ctlSchemaDao.save(ctlSchema));
uniqueMetaInfo.incrementCount();
return savedCtlSchemaDto;
}
