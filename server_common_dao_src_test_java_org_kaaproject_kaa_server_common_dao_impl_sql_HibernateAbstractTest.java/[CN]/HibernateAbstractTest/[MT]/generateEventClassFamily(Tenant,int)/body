{
  int eventSchemaVersionsCount=2;
  if (tenant == null) {
    tenant=generateTenant();
  }
  EventClassFamily eventClassFamily;
  List<EventClassFamily> eventClassFamilies=new ArrayList<>(count);
  for (int i=0; i < count; i++) {
    eventClassFamily=new EventClassFamily();
    eventClassFamily.setTenant(tenant);
    eventClassFamily.setClassName("Test ClassName" + RANDOM.nextInt());
    eventClassFamily.setCreatedTime(new Date().getTime());
    eventClassFamily.setCreatedUsername("Test Username");
    eventClassFamily.setDescription("Test Description");
    eventClassFamily.setName("Test Name" + RANDOM.nextInt());
    eventClassFamily.setNamespace("Test Namespace");
    List<EventSchemaVersion> eventSchemaVersions=new ArrayList<>(eventSchemaVersionsCount);
    for (int j=0; j < eventSchemaVersionsCount; j++) {
      EventSchemaVersion eventSchemaVersion=new EventSchemaVersion();
      eventSchemaVersion.setCreatedTime(new Date().getTime());
      eventSchemaVersion.setCreatedUsername("Test Username");
      eventSchemaVersion.setSchema("Test Schema" + RANDOM.nextInt());
      eventSchemaVersion.setVersion(1);
      eventSchemaVersions.add(eventSchemaVersion);
    }
    eventClassFamily.setSchemas(eventSchemaVersions);
    eventClassFamily=eventClassFamilyDao.save(eventClassFamily);
    Assert.assertNotNull(eventClassFamily);
    eventClassFamilies.add(eventClassFamily);
  }
  return eventClassFamilies;
}
