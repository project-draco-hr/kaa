{
  URL protocolSchemaUrl=Thread.currentThread().getContextClassLoader().getResource("service/delta/arrayFieldsDeltaProtocolSchema.json");
  Schema protocolSchema=new Schema.Parser().parse(new File(protocolSchemaUrl.getPath()));
  URL schemaUrl=Thread.currentThread().getContextClassLoader().getResource("service/delta/arrayFieldsDeltaSchema.json");
  Schema schema=new Schema.Parser().parse(new File(schemaUrl.getPath()));
  DeltaCalculator calculator=new DefaultDeltaCalculator(protocolSchema,schema);
  ByteArrayOutputStream baosOld=new ByteArrayOutputStream();
  URL oldConfigUrl=Thread.currentThread().getContextClassLoader().getResource("service/delta/arrayFieldsDeltaCurrent.json");
  IOUtils.copy(new FileInputStream(oldConfigUrl.getPath()),baosOld,1024);
  String oldStr=new String(baosOld.toByteArray(),"UTF-8");
  ConfigurationDto newConfig=new ConfigurationDto();
  ByteArrayOutputStream baosNew=new ByteArrayOutputStream();
  URL newConfigUrl=Thread.currentThread().getContextClassLoader().getResource("service/delta/arrayFieldsDeltaNew.json");
  IOUtils.copy(new FileInputStream(newConfigUrl.getPath()),baosNew,1024);
  String newStr=new String(baosNew.toByteArray(),"UTF-8");
  newConfig.setBinaryBody(newStr.getBytes());
  RawBinaryDelta deltaResult=calculator.calculate(oldStr,new String(newConfig.getBody()));
  GenericRecord delta1=new GenericData.Record(getDeltaSchemaByFullName(protocolSchema,"org.kaa.config.testRecordItemT"));
  byte[] rawUuid1=new byte[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3};
  GenericFixed uuid1=new GenericData.Fixed(delta1.getSchema().getField("__uuid").schema(),rawUuid1);
  delta1.put("testField4",36);
  delta1.put("__uuid",uuid1);
  GenericRecord delta2=new GenericData.Record(getDeltaSchemaByFullName(protocolSchema,"org.kaa.config.testT"));
  byte[] rawUuid2=new byte[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
  GenericFixed uuid2=new GenericData.Fixed(delta2.getSchema().getField("__uuid").schema(),rawUuid2);
  GenericEnumSymbol unchanged=new GenericData.EnumSymbol(getSchemaByFullName(delta2.getSchema().getField("testField1").schema().getTypes(),"org.kaaproject.configuration.unchangedT"),"unchanged");
  delta2.put("testField1",unchanged);
  delta2.put("__uuid",uuid2);
  delta2.put("testField5",unchanged);
  GenericRecord testField21=new GenericData.Record(getSchemaByFullName(delta2.getSchema().getField("testField2").schema().getTypes(),"org.kaa.config.testRecordT"));
  GenericArray<GenericFixed> testField31=new GenericData.Array<GenericFixed>(1,getArraySchema(testField21,"testField3"));
  byte[] rawUuidToDelete=new byte[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};
  GenericFixed uuidToDelete=new GenericData.Fixed(getSchemaByFullName(testField31.getSchema().getElementType().getTypes(),"org.kaaproject.configuration.uuidT"),rawUuidToDelete);
  testField31.add(uuidToDelete);
  testField21.put("testField3",testField31);
  delta2.put("testField2",testField21);
  GenericRecord delta3=new GenericData.Record(getDeltaSchemaByFullName(protocolSchema,"org.kaa.config.testT"));
  delta3.put("testField1",unchanged);
  delta3.put("__uuid",uuid2);
  GenericRecord testField22=new GenericData.Record(getSchemaByFullName(delta3.getSchema().getField("testField2").schema().getTypes(),"org.kaa.config.testRecordT"));
  GenericArray<GenericRecord> testField32=new GenericData.Array<GenericRecord>(1,getArraySchema(testField22,"testField3"));
  GenericRecord itemRecord=new GenericData.Record(getSchemaByFullName(testField32.getSchema().getElementType().getTypes(),"org.kaa.config.testRecordItemT"));
  itemRecord.put("testField4",4);
  byte[] rawNewRecordUuid=new byte[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4};
  GenericFixed newRecordUuid=new GenericData.Fixed(itemRecord.getSchema().getField("__uuid").schema(),rawNewRecordUuid);
  itemRecord.put("__uuid",newRecordUuid);
  testField32.add(itemRecord);
  testField22.put("testField3",testField32);
  delta3.put("testField2",testField22);
  AvroBinaryDelta deltaExpected=new AvroBinaryDelta(protocolSchema);
  deltaExpected.addDelta(delta1);
  deltaExpected.addDelta(delta2);
  deltaExpected.addDelta(delta3);
  assertArrayEquals(deltaExpected.getData(),deltaResult.getData());
}
