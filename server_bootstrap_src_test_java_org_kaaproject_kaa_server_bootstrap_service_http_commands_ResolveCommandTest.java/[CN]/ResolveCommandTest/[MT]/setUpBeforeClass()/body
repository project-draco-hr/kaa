{
  KeyPairGenerator clientKeyGen=KeyPairGenerator.getInstance("RSA");
  clientKeyGen.initialize(2048);
  KeyPair clientKeyPair=clientKeyGen.genKeyPair();
  privateKey=clientKeyPair.getPrivate();
  publicKey=clientKeyPair.getPublic();
  List<OperationsServer> endpointServerArray=new LinkedList<OperationsServer>();
  ByteBuffer pk=ByteBuffer.wrap(new byte[]{10,12,13,14});
  List<SupportedChannel> supportedChannels=new ArrayList<>();
  HTTPComunicationParameters httpParams=new HTTPComunicationParameters();
  httpParams.setHostName("endpoint.com");
  httpParams.setPort(8080);
  SupportedChannel sc1=new SupportedChannel(ChannelType.HTTP,httpParams);
  supportedChannels.add(sc1);
  OperationsServer server=new OperationsServer("host1",10,pk,supportedChannels);
  endpointServerArray.add(server);
  serverList=new OperationsServerList(endpointServerArray);
  config=new BootstrapConfig();
  serverMock=mock(NettyHttpServer.class);
  biserviceMock=mock(BootstrapInitializationService.class);
  keystoreMock=mock(FileKeyStoreService.class);
  endpointListMock=mock(OperationsServerListService.class);
  when(keystoreMock.getPublicKey()).thenReturn(publicKey);
  when(keystoreMock.getPrivateKey()).thenReturn(privateKey);
  when(biserviceMock.getKeyStoreService()).thenReturn(keystoreMock);
  config.setBootstrapInitializationService(biserviceMock);
  when(serverMock.getConf()).thenReturn(config);
  config.setOperationsServerListService(endpointListMock);
  when(endpointListMock.getOpsServerList()).thenReturn(serverList);
}
