{
  Path schemaPath=Paths.get(Thread.currentThread().getContextClassLoader().getResource("generation/simpleComplexSchema.json").toURI());
  BaseSchema configuraionSchema=new BaseSchema(new String(Files.readAllBytes(schemaPath)));
  Schema.Parser schemaParser=new Schema.Parser();
  Schema avroSchema=schemaParser.parse(configuraionSchema.getRawSchema());
  GenericRecord recordNew1=new GenericData.Record(schemaParser.getTypes().get("org.kaaproject.recordT"));
  recordNew1.put("intField",4);
  GenericFixed uuidNew1=CommonUtils.generateUuidObject();
  recordNew1.put(CommonConstants.UUID_FIELD,uuidNew1);
  GenericRecord rootNew=new GenericData.Record(avroSchema);
  rootNew.put("recordField",recordNew1);
  GenericAvroConverter<GenericRecord> converter=new GenericAvroConverter<>(avroSchema);
  String configurationBodyNew=converter.endcodeToJson(rootNew);
  DefaultUuidValidator uuidGenerator=new DefaultUuidValidator(configuraionSchema,new BaseDataFactory());
  KaaData processedConfigurationBody=uuidGenerator.validateUuidFields(rootNew,null);
  GenericRecord processedConfiguration=converter.decodeJson(processedConfigurationBody.getRawData());
  GenericRecord processedRecord=(GenericRecord)processedConfiguration.get("recordField");
  Assert.assertNotEquals(uuidNew1,processedRecord.get(CommonConstants.UUID_FIELD));
  Assert.assertNotNull(processedConfiguration.get(CommonConstants.UUID_FIELD));
}
