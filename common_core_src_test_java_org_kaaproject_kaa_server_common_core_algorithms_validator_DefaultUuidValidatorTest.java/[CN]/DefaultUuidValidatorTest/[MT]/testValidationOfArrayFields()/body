{
  Path schemaPath=Paths.get(Thread.currentThread().getContextClassLoader().getResource("generation/arraySchema.json").toURI());
  BaseSchema configuraionSchema=new BaseSchema(new String(Files.readAllBytes(schemaPath)));
  Schema.Parser schemaParser=new Schema.Parser();
  Schema avroSchema=schemaParser.parse(configuraionSchema.getRawSchema());
  GenericRecord recordNew1=new GenericData.Record(schemaParser.getTypes().get("org.kaaproject.recordT"));
  recordNew1.put("intField",4);
  GenericFixed uuidNew1=AvroUtils.generateUuidObject();
  recordNew1.put(CommonConstants.UUID_FIELD,uuidNew1);
  GenericRecord recordNew2=new GenericData.Record(schemaParser.getTypes().get("org.kaaproject.recordT"));
  recordNew2.put("intField",5);
  GenericFixed uuidNew2=AvroUtils.generateUuidObject();
  recordNew2.put(CommonConstants.UUID_FIELD,uuidNew2);
  GenericRecord rootNew=new GenericData.Record(avroSchema);
  GenericArray arrayNew=new GenericData.Array<>(2,rootNew.getSchema().getField("complexArrayField").schema());
  arrayNew.add(recordNew1);
  arrayNew.add(recordNew2);
  rootNew.put("complexArrayField",arrayNew);
  GenericRecord recordOld1=new GenericData.Record(schemaParser.getTypes().get("org.kaaproject.recordT"));
  recordOld1.put("intField",6);
  recordOld1.put(CommonConstants.UUID_FIELD,uuidNew1);
  GenericRecord recordOld2=new GenericData.Record(schemaParser.getTypes().get("org.kaaproject.recordT"));
  recordOld2.put("intField",7);
  GenericFixed uuidOld2=AvroUtils.generateUuidObject();
  recordOld2.put(CommonConstants.UUID_FIELD,uuidOld2);
  GenericRecord rootOld=new GenericData.Record(avroSchema);
  GenericArray arrayOld=new GenericData.Array<>(2,rootOld.getSchema().getField("complexArrayField").schema());
  arrayOld.add(recordOld1);
  arrayOld.add(recordOld2);
  rootOld.put("complexArrayField",arrayOld);
  rootOld.put(CommonConstants.UUID_FIELD,AvroUtils.generateUuidObject());
  GenericAvroConverter<GenericRecord> converter=new GenericAvroConverter<>(avroSchema);
  String configurationBodyNew=converter.encodeToJson(rootNew);
  String configurationBodyOld=converter.encodeToJson(rootOld);
  DefaultUuidValidator uuidGenerator=new DefaultUuidValidator(configuraionSchema,new BaseDataFactory());
  KaaData processedConfigurationBody=uuidGenerator.validateUuidFields(rootNew,rootOld);
  GenericRecord processedConfiguration=converter.decodeJson(processedConfigurationBody.getRawData());
  GenericArray processedArray=(GenericArray)processedConfiguration.get("complexArrayField");
  GenericRecord record1=(GenericRecord)processedArray.get(0);
  GenericRecord record2=(GenericRecord)processedArray.get(1);
  Assert.assertEquals(uuidNew1,record1.get(CommonConstants.UUID_FIELD));
  Assert.assertNotEquals(uuidNew2,record2.get(CommonConstants.UUID_FIELD));
  Assert.assertNotNull(processedConfiguration.get(CommonConstants.UUID_FIELD));
}
