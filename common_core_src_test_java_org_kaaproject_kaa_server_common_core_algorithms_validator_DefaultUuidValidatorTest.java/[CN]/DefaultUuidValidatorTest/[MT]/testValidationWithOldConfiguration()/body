{
  Path schemaPath=Paths.get(Thread.currentThread().getContextClassLoader().getResource("generation/simpleSchema.json").toURI());
  BaseSchema configuraionSchema=new BaseSchema(new String(Files.readAllBytes(schemaPath)));
  Schema avroSchema=new Schema.Parser().parse(configuraionSchema.getRawSchema());
  GenericRecord recordNew=new GenericData.Record(avroSchema);
  recordNew.put("intField",4);
  GenericFixed uuidNew=AvroUtils.generateUuidObject();
  recordNew.put(CommonConstants.UUID_FIELD,uuidNew);
  GenericRecord recordOld=new GenericData.Record(avroSchema);
  recordOld.put("intField",5);
  GenericFixed uuidOld=AvroUtils.generateUuidObject();
  recordOld.put(CommonConstants.UUID_FIELD,uuidOld);
  GenericAvroConverter<GenericRecord> converter=new GenericAvroConverter<>(avroSchema);
  String configurationBodyNew=converter.endcodeToJson(recordNew);
  String configurationBodyOld=converter.endcodeToJson(recordOld);
  DefaultUuidValidator uuidGenerator=new DefaultUuidValidator(configuraionSchema,new BaseDataFactory());
  KaaData processedConfigurationBody=uuidGenerator.validateUuidFields(recordNew,recordOld);
  GenericRecord processedConfiguration=converter.decodeJson(processedConfigurationBody.getRawData());
  Assert.assertEquals(processedConfiguration.get(CommonConstants.UUID_FIELD),uuidOld);
}
