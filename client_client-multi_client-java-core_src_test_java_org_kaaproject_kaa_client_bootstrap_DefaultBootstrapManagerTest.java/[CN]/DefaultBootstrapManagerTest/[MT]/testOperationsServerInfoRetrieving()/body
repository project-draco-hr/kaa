{
  DefaultBootstrapManager manager=new DefaultBootstrapManager(null);
  boolean exception=false;
  try {
    manager.useNextOperationsServer(TransportProtocolIdConstants.HTTP_TRANSPORT_ID);
  }
 catch (  BootstrapRuntimeException e) {
    exception=true;
  }
  assertTrue(exception);
  BootstrapTransport transport=mock(BootstrapTransport.class);
  KeyPairGenerator keyGen=KeyPairGenerator.getInstance("RSA");
  keyGen.initialize(2048);
  KeyPair keyPair=keyGen.genKeyPair();
  List<ProtocolMetaData> list=new ArrayList<ProtocolMetaData>();
  ProtocolMetaData md=IPTransportInfoTest.buildMetaData(TransportProtocolIdConstants.HTTP_TRANSPORT_ID,"localhost",9889,keyPair.getPublic());
  list.add(md);
  ChanelManagerMock channelManager=spy(new ChanelManagerMock());
  manager.setChannelManager(channelManager);
  manager.setTransport(transport);
  manager.onProtocolListUpdated(list);
  manager.useNextOperationsServer(TransportProtocolIdConstants.HTTP_TRANSPORT_ID);
  assertTrue(channelManager.isServerUpdated());
  assertEquals("http://localhost:9889",channelManager.getReceivedUrl());
  manager.useNextOperationsServerByAccessPointId("some.name".hashCode());
  verify(channelManager,times(1)).onTransportConnectionInfoUpdated(Mockito.any(TransportConnectionInfo.class));
}
