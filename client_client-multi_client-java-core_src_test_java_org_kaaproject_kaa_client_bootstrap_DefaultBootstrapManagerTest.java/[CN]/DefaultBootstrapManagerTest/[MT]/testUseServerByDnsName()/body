{
  DefaultBootstrapManager manager=new DefaultBootstrapManager(null);
  ChanelManagerMock channelManager=spy(new ChanelManagerMock());
  manager.setChannelManager(channelManager);
  BootstrapTransport transport=mock(BootstrapTransport.class);
  manager.setTransport(transport);
  KeyPairGenerator keyGen=KeyPairGenerator.getInstance("RSA");
  keyGen.initialize(2048);
  KeyPair keyPair=keyGen.genKeyPair();
  List<ProtocolMetaData> list=new ArrayList<ProtocolMetaData>();
  ProtocolMetaData md=IPTransportInfoTest.buildMetaData(TransportIdConstants.HTTP_TRANSPORT_ID,"localhost",9889,keyPair.getPublic());
  list.add(md);
  manager.onProtocolListUpdated(list);
  assertEquals("http://localhost:9889",channelManager.getReceivedUrl());
  manager.useNextOperationsServerByAccessPointId("localhost2:9889".hashCode());
  Mockito.verify(transport,Mockito.times(1)).sync();
  list=new ArrayList<ProtocolMetaData>();
  md=IPTransportInfoTest.buildMetaData(TransportIdConstants.HTTP_TRANSPORT_ID,"localhost2",9889,keyPair.getPublic());
  list.add(md);
  manager.onProtocolListUpdated(list);
  assertEquals("http://localhost2:9889",channelManager.getReceivedUrl());
  assertTrue(channelManager.isServerUpdated());
}
