{
  DefaultBootstrapManager manager=new DefaultBootstrapManager(null);
  ChanelManagerMock channelManager=spy(new ChanelManagerMock(false));
  manager.setChannelManager(channelManager);
  BootstrapTransport transport=mock(BootstrapTransport.class);
  manager.setTransport(transport);
  KeyPairGenerator keyGen=KeyPairGenerator.getInstance("RSA");
  keyGen.initialize(2048);
  KeyPair keyPair=keyGen.genKeyPair();
  OperationsServerList serverList=new OperationsServerList();
  OperationsServer server1=new OperationsServer();
  server1.setName("localhost:9889");
  server1.setPublicKey(ByteBuffer.wrap(keyPair.getPublic().getEncoded()));
  List<SupportedChannel> channels1=new LinkedList<>();
  server1.setSupportedChannelsArray(channels1);
  channels1.add(new SupportedChannel(ChannelType.HTTP,new HTTPComunicationParameters("localhost",9889)));
  LinkedList<OperationsServer> list=new LinkedList<OperationsServer>();
  serverList.setOperationsServerArray(list);
  list.add(server1);
  manager.onServerListUpdated(serverList);
  assertEquals("http://localhost:9889/EP/Sync",channelManager.getReceivedUrl());
  manager.useNextOperationsServerByDnsName("localhost2:9889");
  Mockito.verify(transport,Mockito.times(1)).sync();
  OperationsServer server2=new OperationsServer();
  server2.setName("localhost2:9889");
  server2.setPublicKey(ByteBuffer.wrap(keyPair.getPublic().getEncoded()));
  List<SupportedChannel> channels2=new LinkedList<>();
  server2.setSupportedChannelsArray(channels2);
  channels2.add(new SupportedChannel(ChannelType.HTTP,new HTTPComunicationParameters("localhost2",9889)));
  list.add(server2);
  manager.onServerListUpdated(serverList);
  assertEquals("http://localhost2:9889/EP/Sync",channelManager.getReceivedUrl());
  assertTrue(channelManager.isServerUpdated());
}
