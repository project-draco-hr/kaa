{
  KaaChannelManager manager=Mockito.mock(KaaChannelManager.class);
  AbstractHttpClient httpClient=Mockito.mock(AbstractHttpClient.class);
  FailoverManager failoverManager=Mockito.mock(FailoverManager.class);
  Mockito.when(httpClient.executeHttpRequest(Mockito.anyString(),Mockito.any(LinkedHashMap.class),Mockito.anyBoolean())).thenReturn(new byte[]{5,5,5});
  MessageEncoderDecoder encDec=Mockito.mock(MessageEncoderDecoder.class);
  Mockito.when(httpClient.getEncoderDecoder()).thenReturn(encDec);
  AbstractKaaClient client=Mockito.mock(AbstractKaaClient.class);
  Mockito.when(client.createHttpClient(Mockito.anyString(),Mockito.any(PrivateKey.class),Mockito.any(PublicKey.class),Mockito.any(PublicKey.class))).thenReturn(httpClient);
  Mockito.when(client.getChannelManager()).thenReturn(manager);
  KaaClientState state=Mockito.mock(KaaClientState.class);
  KaaDataMultiplexer multiplexer=Mockito.mock(KaaDataMultiplexer.class);
  KaaDataDemultiplexer demultiplexer=Mockito.mock(KaaDataDemultiplexer.class);
  DefaultOperationHttpChannelFake channel=new DefaultOperationHttpChannelFake(client,state,failoverManager,2);
  TransportConnectionInfo server=IPTransportInfoTest.createTestServerInfo(ServerType.OPERATIONS,TransportProtocolIdConstants.HTTP_TRANSPORT_ID,"localhost",9889,KeyUtil.generateKeyPair().getPublic());
  channel.setServer(server);
  channel.sync(TransportType.EVENT);
  channel.setDemultiplexer(demultiplexer);
  channel.setDemultiplexer(null);
  channel.sync(TransportType.EVENT);
  channel.setMultiplexer(multiplexer);
  channel.setMultiplexer(null);
  channel.sync(TransportType.BOOTSTRAP);
  channel.sync(TransportType.EVENT);
  channel.verify();
}
