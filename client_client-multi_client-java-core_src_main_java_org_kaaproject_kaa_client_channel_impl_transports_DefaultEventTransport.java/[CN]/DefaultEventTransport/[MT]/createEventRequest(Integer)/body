{
  if (manager != null) {
    EventSyncRequest request=new EventSyncRequest();
    manager.fillEventListenersSyncRequest(request);
    if (isEventSNSynchronized) {
      Set<Event> eventsSet=new HashSet<Event>();
      if (!pendingEvents.isEmpty()) {
        for (        Map.Entry<Integer,Set<Event>> pendingEvents : pendingEvents.entrySet()) {
          LOG.debug("Have not received response for {} events sent with request id {}",pendingEvents.getValue().size(),pendingEvents.getKey());
          eventsSet.addAll(pendingEvents.getValue());
        }
      }
      eventsSet.addAll(manager.getPendingEvents());
      List<Event> events=new ArrayList<Event>(eventsSet);
      if (!events.isEmpty()) {
        Collections.sort(events,eventSeqNumberComparator);
        if (events.get(0).getSeqNum() != startEventSN) {
          clientState.setEventSeqNum(startEventSN + events.size());
          LOG.info("Put in order event sequence numbers (expected: {}, actual: {})",startEventSN,events.get(0).getSeqNum());
          for (          Event e : events) {
            e.setSeqNum(startEventSN++);
          }
        }
 else {
          startEventSN+=events.size();
        }
        LOG.debug("Going to send {} event{}",events.size(),(events.size() == 1 ? "" : "s"));
        request.setEvents(events);
        pendingEvents.put(requestId,eventsSet);
      }
      request.setEventSequenceNumberRequest(null);
    }
 else {
      request.setEventSequenceNumberRequest(new EventSequenceNumberRequest());
      LOG.trace("Sending event sequence number request: " + "restored_sn = {}",startEventSN);
    }
    return request;
  }
  return null;
}
