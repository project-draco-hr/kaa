{
  if (eventManager != null) {
    if (!isEventSNSynchronized && response.getEventSequenceNumberResponse() != null) {
      int lastSN=response.getEventSequenceNumberResponse().getSeqNum();
      int expectedSN=(lastSN > 0 ? lastSN + 1 : lastSN);
      if (startEventSN.get() != expectedSN) {
        startEventSN.set(expectedSN);
        clientState.setEventSeqNum(startEventSN.get());
        Set<Event> eventsSet=new HashSet<Event>();
        for (        Set<Event> events : pendingEvents.values()) {
          eventsSet.addAll(events);
        }
        eventsSet.addAll(eventManager.getPendingEvents());
        List<Event> events=new ArrayList<Event>(eventsSet);
        Collections.sort(events,eventSeqNumberComparator);
        clientState.setEventSeqNum(startEventSN.get() + events.size());
        if (!events.isEmpty() && events.get(0).getSeqNum() != startEventSN.get()) {
          LOG.info("Put in order event sequence numbers (expected: {}, actual: {})",startEventSN,events.get(0).getSeqNum());
          for (          Event e : events) {
            e.setSeqNum(startEventSN.getAndIncrement());
          }
        }
 else {
          startEventSN.getAndAdd(events.size());
        }
        LOG.info("Event sequence number is unsynchronized. Set to {}",startEventSN);
      }
 else {
        LOG.info("Event sequence number is up to date: {}",startEventSN);
      }
      isEventSNSynchronized=true;
    }
    if (response.getEvents() != null && !response.getEvents().isEmpty()) {
      List<Event> events=new ArrayList<>(response.getEvents());
      Collections.sort(events,eventSeqNumberComparator);
      for (      Event event : events) {
        eventManager.onGenericEvent(event.getEventClassFQN(),event.getEventData().array(),event.getSource());
      }
    }
    if (response.getEventListenersResponses() != null && !response.getEventListenersResponses().isEmpty()) {
      eventManager.eventListenersResponseReceived(response.getEventListenersResponses());
    }
  }
  LOG.trace("Processed event response");
}
