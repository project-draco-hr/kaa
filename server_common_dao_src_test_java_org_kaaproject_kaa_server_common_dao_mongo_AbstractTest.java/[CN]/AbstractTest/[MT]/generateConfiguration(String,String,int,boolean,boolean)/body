{
  List<ConfigurationDto> ids=Collections.emptyList();
  try {
    ConfigurationSchemaDto schemaDto;
    if (isNotBlank(schemaId)) {
      schemaDto=configurationService.findConfSchemaById(schemaId);
    }
 else {
      schemaDto=generateConfSchema(null,1).get(0);
    }
    Assert.assertNotNull(schemaDto);
    DefaultConfigurationProcessor configurationProcessor;
    if (useBaseSchema) {
      configurationProcessor=new DefaultConfigurationProcessor(schemaDto.getBaseSchema());
    }
 else {
      configurationProcessor=new DefaultConfigurationProcessor(schemaDto.getOverrideSchema());
    }
    ids=new ArrayList();
    for (int i=0; i < count; i++) {
      ConfigurationDto dto=new ConfigurationDto();
      dto.setId(null);
      dto.setStatus(null);
      dto.setBinaryBody(configurationProcessor.getRootJsonConfiguration().getBytes(Charset.forName("UTF-8")));
      dto.setSchemaId(schemaDto.getId());
      if (isBlank(groupId)) {
        groupId=generateEndpointGroup(schemaDto.getApplicationId()).getId();
      }
      dto.setEndpointGroupId(groupId);
      ConfigurationDto saved=configurationService.saveConfiguration(dto);
      Assert.assertNotNull(saved);
      if (activate) {
        ChangeConfigurationNotification notification=configurationService.activateConfiguration(saved.getId(),schemaDto.getCreatedUsername());
        saved=notification.getConfigurationDto();
      }
      ids.add(saved);
    }
  }
 catch (  Exception e) {
    LOGGER.error("Can't generate configs {}",e);
    Assert.fail("Can't generate configurations.");
  }
  return ids;
}
