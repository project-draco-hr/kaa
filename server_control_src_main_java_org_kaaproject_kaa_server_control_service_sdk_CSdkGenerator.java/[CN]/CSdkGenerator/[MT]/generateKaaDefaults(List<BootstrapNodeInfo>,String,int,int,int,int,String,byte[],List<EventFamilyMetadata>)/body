{
  VelocityContext context=new VelocityContext();
  LOG.info("[sdk generateClientProperties] bootstrapNodes.size(): {}",bootstrapNodes.size());
  final String SEPARATOR=":";
  String bootstrapServers=new String();
  for (int nodeIndex=0; nodeIndex < bootstrapNodes.size(); ++nodeIndex) {
    if (nodeIndex > 0) {
      bootstrapServers+=";";
    }
    BootstrapNodeInfo node=bootstrapNodes.get(nodeIndex);
    List<TransportMetaData> supportedChannels=node.getTransports();
    int accessPointId=ServerNameUtil.crc32(node.getConnectionInfo());
    for (int chIndex=0; chIndex < supportedChannels.size(); ++chIndex) {
      TransportMetaData transport=supportedChannels.get(chIndex);
      for (      VersionConnectionInfoPair pair : transport.getConnectionInfo()) {
        bootstrapServers+=accessPointId;
        bootstrapServers+=SEPARATOR;
        bootstrapServers+=transport.getId();
        bootstrapServers+=SEPARATOR;
        bootstrapServers+=pair.getVersion();
        bootstrapServers+=SEPARATOR;
        bootstrapServers+=Base64.encodeBase64String(pair.getConenctionInfo().array());
        bootstrapServers+="\n";
      }
    }
  }
  LOG.info("MY  TEST: {}",bootstrapServers);
  context.put("build_version",Version.PROJECT_VERSION);
  context.put("build_commit_hash",Version.COMMIT_HASH);
  context.put("app_token",appToken);
  context.put("config_version",configurationSchemaVersion);
  context.put("profile_version",profileSchemaVersion);
  context.put("user_nf_version",notificationSchemaVersion);
  context.put("log_version",logSchemaVersion);
  context.put("system_nf_version",1);
  context.put("eventFamilies",eventFamilies);
  context.put("bootstrapNodes",bootstrapNodes);
  context.put("Base64",Base64.class);
  context.put("ServerNameUtil",ServerNameUtil.class);
  StringWriter writer=new StringWriter();
  velocityEngine.getTemplate("sdk/c/kaa_defaults.vm").merge(context,writer);
  return writer.toString().getBytes();
}
