{
  List<TarEntryData> tarEntries=new LinkedList<>();
  TarArchiveEntry entry=new TarArchiveEntry(LOG_HDR);
  Schema logSchema=new Schema.Parser().parse(logSchemaBody);
  VelocityContext logContext=new VelocityContext();
  logContext.put("logName",StyleUtils.toLowerUnderScore(logSchema.getName()));
  StringWriter profileWriter=new StringWriter();
  velocityEngine.getTemplate("sdk/c/kaa_logging.vm").merge(logContext,profileWriter);
  entry.setSize(profileWriter.toString().length());
  TarEntryData tarEntry=new TarEntryData(entry,profileWriter.toString().getBytes());
  tarEntries.add(tarEntry);
  OutputStream hdrStream=new ByteArrayOutputStream();
  OutputStream srcStream=new ByteArrayOutputStream();
  try {
    Compiler compiler=new Compiler(logSchema,KAA_LOG_SOURCE_NAME_PATTERN,hdrStream,srcStream);
    compiler.setNamespacePrefix(NAME_PREFIX_TEMPLATE.replace("{name}","logging"));
    compiler.generate();
    String profileData=hdrStream.toString();
    entry=new TarArchiveEntry(KAA_GEN_SOURCE_DIR + KAA_LOG_SOURCE_NAME_PATTERN + C_HEADER_SUFFIX);
    entry.setSize(profileData.length());
    tarEntry=new TarEntryData(entry,profileData.getBytes());
    tarEntries.add(tarEntry);
    entry=new TarArchiveEntry(KAA_GEN_SOURCE_DIR + KAA_LOG_SOURCE_NAME_PATTERN + C_SOURCE_SUFFIX);
    profileData=srcStream.toString();
    entry.setSize(profileData.length());
    tarEntry=new TarEntryData(entry,profileData.getBytes());
    tarEntries.add(tarEntry);
  }
 catch (  Exception e) {
  }
  return tarEntries;
}
