{
  final Object sync=new Object();
  thriftComplete=false;
  logger.debug("Update bootstrap server: Thrift: " + nodeInfo.getConnectionInfo().getThriftHost().toString() + ":"+ nodeInfo.getConnectionInfo().getThriftPort());
  try {
    ThriftClient<BootstrapThriftService.Client> client=new ThriftClient<BootstrapThriftService.Client>(nodeInfo.getConnectionInfo().getThriftHost().toString(),nodeInfo.getConnectionInfo().getThriftPort(),BootstrapThriftService.Client.class);
    client.setThriftActivity(new ThriftActivity<BootstrapThriftService.Client>(){
      @Override public void isSuccess(      boolean activitySuccess){
        logger.info("Bootstrap  Operations servers list updated successfull: " + activitySuccess);
synchronized (sync) {
          thriftComplete=true;
          sync.notify();
        }
        if (!activitySuccess) {
          fail("Error send Thrift Operations Server List update");
        }
      }
      @Override public void doInTemplate(      Client t){
        try {
          t.onOperationsServerListUpdate(update);
          logger.info("Bootstrap  Operations servers list updated.");
        }
 catch (        TException e) {
          logger.error("Bootstrap  Operations servers list updated failed: " + e.toString());
          fail(e.toString());
        }
      }
    }
);
    ThriftExecutor.execute(client);
  }
 catch (  NoSuchMethodException|SecurityException|InstantiationException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
    logger.error("Bootstrap Operations servers list execute updated failed: " + e.toString());
    fail(e.toString());
  }
synchronized (sync) {
    if (!thriftComplete) {
      try {
        sync.wait(10000);
      }
 catch (      InterruptedException e) {
        fail(e.toString());
      }
    }
  }
}
