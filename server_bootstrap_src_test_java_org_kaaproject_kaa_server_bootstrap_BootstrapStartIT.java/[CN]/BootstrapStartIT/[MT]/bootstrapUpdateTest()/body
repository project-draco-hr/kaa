{
  assertNotNull("Bootstrap not started",bootstrap);
  List<BootstrapNodeInfo> nodes=listener.getNodes();
  logger.info("BootstrapNode found....");
  assertEquals(1,nodes.size());
  BootstrapNodeInfo info=nodes.get(0);
  assertEquals(thriftHost,info.getConnectionInfo().getThriftHost().toString());
  assertEquals((long)thriftPort,(long)info.getConnectionInfo().getThriftPort());
  ByteBuffer keyData=ByteBuffer.wrap(bootstrap.getBootstrapInitializationService().getKeyStoreService().getPublicKey().getEncoded());
  assertEquals(keyData,info.getConnectionInfo().getPublicKey());
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
    fail(e.toString());
  }
  logger.info("Going to test Thrift OperationsServerList update.....");
  final List<ThriftOperationsServer> update=generateDnsUpdate();
  logger.info("Generated " + update.size() + " endpoint servers");
  updateBootstrap(nodes.get(0),update);
  DefaultBootstrapInitializationService defBootstrapInitService=(DefaultBootstrapInitializationService)bootstrap.getBootstrapInitializationService();
  List<OperationsServer> list=defBootstrapInitService.getOperationsServerListService().getOpsServerList().getOperationsServerArray();
  assertEquals(update.size(),list.size());
  for (  OperationsServer server : list) {
    String host=server.getName();
    logger.info("Server Name {} 1",host);
    ThriftOperationsServer sendServ=getThriftOperationsServerByName(host,update);
    if (sendServ != null) {
      assertEquals(sendServ.priority,server.getPriority().intValue());
      assertEquals(sendServ.publicKey,server.getPublicKey());
    }
 else {
      fail("Test failed, received Operations Server list don't have " + host + " but must");
    }
  }
  logger.info("Going to test HTTP Operations Server List update.....");
  PublicKey serverPublicKey=bootstrap.getBootstrapInitializationService().getKeyStoreService().getPublicKey();
  final Object httpSync=new Object();
  testFailed=true;
  TestClient client;
  try {
    client=new TestClient(nettyHost,nettyPort,serverPublicKey,new HttpActivity(){
      @Override public void httpRequestComplete(      Exception e,      int id,      OperationsServerList response){
        if (e != null) {
          fail(e.toString());
        }
synchronized (httpSync) {
          List<OperationsServer> respList=response.getOperationsServerArray();
          assertEquals(update.size(),respList.size());
          for (          OperationsServer server : respList) {
            String host=server.getName();
            logger.info("Server Name {} 2",host);
            ThriftOperationsServer sendServ=getThriftOperationsServerByName(host,update);
            if (sendServ != null) {
              assertEquals(sendServ.priority,server.getPriority().intValue());
              assertEquals(sendServ.publicKey,server.getPublicKey());
              testFailed=false;
            }
 else {
              fail("Test failed, received Operations Server list don't have " + host + " but must");
            }
          }
          httpSync.notify();
        }
      }
    }
);
    executor.execute(client);
  }
 catch (  IOException e) {
    fail(e.toString());
  }
synchronized (httpSync) {
    try {
      httpSync.wait(10000);
      logger.info("Going to test HTTP Operations Server List update..... complete.");
    }
 catch (    InterruptedException e) {
      fail(e.toString());
    }
  }
  if (testFailed) {
    fail("Test HTTP Resolve failed");
  }
  testFailed=true;
  KaaTcpTestClient tcpClient=null;
  try {
    tcpClient=new KaaTcpTestClient(kaaTcpHost,kaaTcpPort,"asdcasdcasdc",new HttpActivity(){
      @Override public void httpRequestComplete(      Exception e,      int id,      OperationsServerList response){
        if (e != null) {
          fail(e.toString());
        }
synchronized (httpSync) {
          List<OperationsServer> respList=response.getOperationsServerArray();
          assertEquals(update.size(),respList.size());
          for (          OperationsServer server : respList) {
            String host=server.getName();
            logger.info("Server Name {} 2",host);
            ThriftOperationsServer sendServ=getThriftOperationsServerByName(host,update);
            if (sendServ != null) {
              assertEquals(sendServ.priority,server.getPriority().intValue());
              assertEquals(sendServ.publicKey,server.getPublicKey());
              testFailed=false;
            }
 else {
              fail("Test failed, received Operations Server list don't have " + host + " but must");
            }
          }
          httpSync.notify();
        }
      }
    }
);
    executor.execute(tcpClient);
  }
 catch (  UnknownHostException e) {
    logger.error(e.toString(),e);
    testFailed=true;
  }
catch (  IOException e) {
    logger.error(e.toString(),e);
    testFailed=true;
  }
synchronized (httpSync) {
    try {
      httpSync.wait(10000);
      if (tcpClient != null) {
        if (tcpClient.isConnected()) {
          fail("KaaTcp Connection don't closed after Bootstrapresponse.");
        }
      }
      logger.info("Going to test Operations Server List using KaaTcp update..... complete.");
    }
 catch (    InterruptedException e) {
      fail(e.toString());
    }
  }
  if (testFailed) {
    fail("Test KaaTcp failed");
  }
}
