{
  KaaChannelManager manager=Mockito.mock(KaaChannelManager.class);
  AbstractHttpClient httpClient=Mockito.mock(AbstractHttpClient.class);
  Mockito.when(httpClient.executeHttpRequest(Mockito.anyString(),Mockito.any(LinkedHashMap.class),Mockito.anyBoolean())).thenReturn(new byte[]{5,5,5});
  AbstractKaaClient client=Mockito.mock(AbstractKaaClient.class);
  Mockito.when(client.createHttpClient(Mockito.anyString(),Mockito.any(PrivateKey.class),Mockito.any(PublicKey.class),Mockito.any(PublicKey.class))).thenReturn(httpClient);
  Mockito.when(client.getChannelMananager()).thenReturn(manager);
  KaaClientState state=Mockito.mock(KaaClientState.class);
  KaaDataMultiplexer multiplexer=Mockito.mock(KaaDataMultiplexer.class);
  KaaDataDemultiplexer demultiplexer=Mockito.mock(KaaDataDemultiplexer.class);
  DefaultBootstrapChannelFake channel=new DefaultBootstrapChannelFake(client,state,2);
  ServerInfo server=new HttpServerInfo(ServerType.BOOTSTRAP,"localhost",9889,KeyUtil.generateKeyPair().getPublic());
  channel.setServer(server);
  channel.sync(TransportType.BOOTSTRAP);
  channel.setDemultiplexer(demultiplexer);
  channel.setDemultiplexer(null);
  channel.sync(TransportType.BOOTSTRAP);
  channel.setMultiplexer(multiplexer);
  channel.setMultiplexer(null);
  channel.sync(TransportType.CONFIGURATION);
  channel.sync(TransportType.BOOTSTRAP);
  channel.syncAll();
  channel.verify();
}
