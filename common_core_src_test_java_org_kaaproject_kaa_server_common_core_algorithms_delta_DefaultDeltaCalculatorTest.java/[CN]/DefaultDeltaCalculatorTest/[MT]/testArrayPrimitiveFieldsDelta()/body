{
  URL protocolSchemaUrl=Thread.currentThread().getContextClassLoader().getResource("delta/arrayPrimitiveFieldsDeltaProtocolSchema.json");
  Schema protocolSchema=new Schema.Parser().parse(new File(protocolSchemaUrl.getPath()));
  URL schemaUrl=Thread.currentThread().getContextClassLoader().getResource("delta/arrayPrimitiveFieldsDeltaSchema.json");
  Schema schema=new Schema.Parser().parse(new File(schemaUrl.getPath()));
  DeltaCalculationAlgorithm calculator=new DefaultDeltaCalculationAlgorithm(protocolSchema,schema);
  ByteArrayOutputStream baosOld=new ByteArrayOutputStream();
  URL oldConfigUrl=Thread.currentThread().getContextClassLoader().getResource("delta/arrayPrimitiveFieldsDeltaCurrent.json");
  IOUtils.copy(new FileInputStream(oldConfigUrl.getPath()),baosOld,1024);
  String oldStr=new String(baosOld.toByteArray(),"UTF-8");
  ByteArrayOutputStream baosNew=new ByteArrayOutputStream();
  URL newConfigUrl=Thread.currentThread().getContextClassLoader().getResource("delta/arrayPrimitiveFieldsDeltaNew.json");
  IOUtils.copy(new FileInputStream(newConfigUrl.getPath()),baosNew,1024);
  String newStr=new String(baosNew.toByteArray(),"UTF-8");
  BaseData oldData=new BaseData(new BaseSchema(schema.toString()),oldStr);
  BaseData newData=new BaseData(new BaseSchema(schema.toString()),newStr);
  RawBinaryDelta deltaResult=calculator.calculate(oldData,newData);
  GenericRecord delta1=new GenericData.Record(getDeltaSchemaByFullName(protocolSchema,"org.kaa.config.testT"));
  GenericEnumSymbol reset=new GenericData.EnumSymbol(getSchemaByFullName(delta1.getSchema().getField("testField1").schema().getTypes(),"org.kaaproject.configuration.resetT"),"reset");
  byte[] rawUuid=new byte[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
  GenericFixed uuid=new GenericData.Fixed(delta1.getSchema().getField("__uuid").schema(),rawUuid);
  delta1.put("testField1",reset);
  delta1.put("__uuid",uuid);
  GenericRecord delta2=new GenericData.Record(getDeltaSchemaByFullName(protocolSchema,"org.kaa.config.testT"));
  delta2.put("__uuid",uuid);
  GenericArray<Integer> testField1=new GenericData.Array<Integer>(3,getArraySchema(delta2,"testField1"));
  testField1.add(321);
  testField1.add(456);
  testField1.add(654);
  delta2.put("testField1",testField1);
  AvroBinaryDelta deltaExpected=new AvroBinaryDelta(protocolSchema);
  deltaExpected.addDelta(delta1);
  deltaExpected.addDelta(delta2);
  assertArrayEquals(deltaExpected.getData(),deltaResult.getData());
}
