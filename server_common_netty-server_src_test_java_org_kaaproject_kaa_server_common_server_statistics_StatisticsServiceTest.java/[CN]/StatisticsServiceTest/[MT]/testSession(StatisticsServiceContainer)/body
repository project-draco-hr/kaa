{
  Map<UUID,Map<Track,List<Integer>>> sessions=new HashMap<>();
  container.updater.waitUpdate();
  int initUpdateCount=container.updater.updateCount;
  logger.info("InitUpdateCount {}",initUpdateCount);
  for (int k=0; k < 5; k++) {
    for (int i=0; i < 100; i++) {
      UUID uuid=UUID.randomUUID();
      Track track=container.service.newSession(uuid);
      Map<Track,List<Integer>> requests=new HashMap<>();
      requests.put(track,new LinkedList<Integer>());
      sessions.put(uuid,requests);
      for (int j=0; j < 100; j++) {
        int id=track.newRequest();
        sessions.get(uuid).get(track).add(new Integer(id));
      }
    }
    for (    UUID uuid : sessions.keySet()) {
      for (      Track track : sessions.get(uuid).keySet()) {
        for (        Integer id : sessions.get(uuid).get(track)) {
          track.setProcessTime(id.intValue(),20);
          track.closeRequest(id.intValue());
        }
      }
    }
    container.updater.waitUpdate();
    logger.info("Updater: updateCount {}, averageDeltaSync {}, averageOnlineSessions {}, averageProcessedRequests {}.",container.updater.updateCount,container.updater.averageDeltaSync,container.updater.averageOnlineSessions,container.updater.averageProcessedRequests);
    if (container.updater.updateCount == (1 + initUpdateCount)) {
      assertEquals(10,container.updater.averageDeltaSync);
      assertEquals(25,container.updater.averageOnlineSessions);
      assertEquals(5000,container.updater.averageProcessedRequests);
    }
 else     if (container.updater.updateCount == (2 + initUpdateCount)) {
      assertEquals(13,container.updater.averageDeltaSync);
      assertEquals(33,container.updater.averageOnlineSessions);
      assertEquals(6666,container.updater.averageProcessedRequests);
    }
 else     if (container.updater.updateCount == (3 + initUpdateCount)) {
      assertEquals(15,container.updater.averageDeltaSync);
      assertEquals(38,container.updater.averageOnlineSessions);
      assertEquals(7500,container.updater.averageProcessedRequests);
    }
 else     if (container.updater.updateCount == (4 + initUpdateCount)) {
      assertEquals(16,container.updater.averageDeltaSync);
      assertEquals(40,container.updater.averageOnlineSessions);
      assertEquals(8000,container.updater.averageProcessedRequests);
    }
 else     if (container.updater.updateCount == (5 + initUpdateCount)) {
      assertEquals(20,container.updater.averageDeltaSync);
      assertEquals(50,container.updater.averageOnlineSessions);
      assertEquals(10000,container.updater.averageProcessedRequests);
    }
 else {
      fail("Incorrect update value " + container.updater.updateCount);
    }
    for (    UUID uuid : sessions.keySet()) {
      container.service.closeSession(uuid);
    }
    sessions.clear();
  }
}
