{
  TcpTransport transport=new TcpTransport();
  try {
    LOG.debug("Initializing TCP server");
    final MessageHandler handler=Mockito.mock(MessageHandler.class);
    GenericTransportContext context=new GenericTransportContext(new TransportContext(new TransportProperties(new Properties()),null,new MessageHandler(){
      @Override public void process(      SessionInitMessage message){
        message.onSessionCreated(new SessionInfo(UUID.randomUUID(),1,Mockito.mock(ChannelContext.class),ChannelType.ASYNC,null,null,null,null,100,false));
        handler.process(message);
      }
      @Override public void process(      SessionAware message){
        handler.process(message);
      }
    }
),getTestConfig());
    transport.init(context);
    LOG.debug("Starting TCP server");
    transport.start();
    final Socket socket=new Socket(TEST_HOST,TEST_PORT);
    Connect connect=new Connect(1,1,new byte[0],new byte[0],new byte[0]);
    socket.getOutputStream().write(connect.getFrame().array());
    Mockito.verify(handler,Mockito.timeout(TIMEOUT)).process(Mockito.any(SessionInitMessage.class));
    PingRequest ping=new PingRequest();
    socket.getOutputStream().write(ping.getFrame().array());
    Mockito.verify(handler,Mockito.timeout(TIMEOUT)).process(Mockito.any(SessionPingMessage.class));
    Disconnect disconnect=new Disconnect(DisconnectReason.NONE);
    socket.getOutputStream().write(disconnect.getFrame().array());
    Mockito.verify(handler,Mockito.timeout(TIMEOUT)).process(Mockito.any(SessionDisconnectMessage.class));
    socket.close();
  }
  finally {
    LOG.debug("Shutdown TCP server");
    transport.stop();
  }
}
