{
  Timing timing=new Timing();
  TestingCluster cluster=new TestingCluster(3);
  cluster.start();
  try {
    OperationsNodeInfo endpointNodeInfo=buildOperationsNodeInfo();
    BootstrapNodeInfo bootstrapNodeInfo=buildBootstrapNodeInfo();
    BootstrapNode bootstrapNode=new BootstrapNode(bootstrapNodeInfo,cluster.getConnectString(),buildDefaultRetryPolicy());
    OperationsNodeListener mockListener=mock(OperationsNodeListener.class);
    bootstrapNode.addListener(mockListener);
    bootstrapNode.start();
    OperationsNode endpointNode=new OperationsNode(endpointNodeInfo,cluster.getConnectString(),buildDefaultRetryPolicy());
    endpointNode.start();
    timing.sleepABit();
    verify(mockListener).onNodeAdded(endpointNodeInfo);
    int random=new Random().nextInt();
    assertNotNull(endpointNodeInfo.getSupportedChannelsArray());
    assertEquals(3,endpointNodeInfo.getSupportedChannelsArray().size());
    assertNotNull(endpointNodeInfo.getSupportedChannelsArray().get(0));
    assertNotNull(endpointNodeInfo.getSupportedChannelsArray().get(0).getZkChannel());
    assertNotNull(endpointNodeInfo.getSupportedChannelsArray().get(0).getZkChannel().getChannelStatistics());
    ZkHttpStatistics stats=(ZkHttpStatistics)endpointNodeInfo.getSupportedChannelsArray().get(0).getZkChannel().getChannelStatistics();
    assertNotNull(stats);
    assertNotNull(stats.getZkStatistics());
    stats.getZkStatistics().setProcessedRequestCount(random);
    endpointNode.updateNodeData(endpointNodeInfo);
    timing.sleepABit();
    verify(mockListener).onNodeUpdated(endpointNodeInfo);
    endpointNode.updateNodeStatsValues(ZkChannelType.HTTP,5,5,5);
    timing.sleepABit();
    verify(mockListener).onNodeUpdated(endpointNodeInfo);
    endpointNode.updateNodeStatsValues(ZkChannelType.HTTP_LP,5,5,5);
    timing.sleepABit();
    verify(mockListener).onNodeUpdated(endpointNodeInfo);
    endpointNode.updateNodeStatsValues(ZkChannelType.KAATCP,5,5,5);
    timing.sleepABit();
    verify(mockListener).onNodeUpdated(endpointNodeInfo);
    assertNotNull(bootstrapNode.getCurrentOperationServerNodes());
    assertEquals(1,bootstrapNode.getCurrentOperationServerNodes().size());
    assertNotNull(bootstrapNode.getCurrentOperationServerNodes().get(0));
    assertNotNull(bootstrapNode.getCurrentOperationServerNodes().get(0).getSupportedChannelsArray());
    assertEquals(3,bootstrapNode.getCurrentOperationServerNodes().get(0).getSupportedChannelsArray().size());
    assertNotNull(bootstrapNode.getCurrentOperationServerNodes().get(0).getSupportedChannelsArray().get(0));
    assertNotNull(bootstrapNode.getCurrentOperationServerNodes().get(0).getSupportedChannelsArray().get(0).getZkChannel());
    assertNotNull(bootstrapNode.getCurrentOperationServerNodes().get(0).getSupportedChannelsArray().get(0).getZkChannel().getChannelStatistics());
    ZkHttpStatistics statsR=(ZkHttpStatistics)bootstrapNode.getCurrentOperationServerNodes().get(0).getSupportedChannelsArray().get(0).getZkChannel().getChannelStatistics();
    assertNotNull(statsR);
    assertNotNull(statsR.getZkStatistics());
    assertEquals(new Integer(5),statsR.getZkStatistics().getProcessedRequestCount());
    endpointNode.close();
    timing.sleepABit();
    verify(mockListener).onNodeRemoved(endpointNodeInfo);
    Assert.assertTrue(bootstrapNode.removeListener(mockListener));
    Assert.assertFalse(bootstrapNode.removeListener(mockListener));
    bootstrapNode.close();
  }
  finally {
    cluster.close();
  }
}
