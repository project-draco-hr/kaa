{
  Path logsPath=new Path("/logs" + Path.SEPARATOR + applicationToken+ Path.SEPARATOR+ logSchemaVersion+ Path.SEPARATOR+ "data*");
  FileStatus[] statuses=fileSystem.globStatus(logsPath);
  List<TestLogData> resultTestLogs=new ArrayList<>();
  Schema wrapperSchema=RecordWrapperSchemaGenerator.generateRecordWrapperSchema(TestLogData.getClassSchema().toString());
  for (  FileStatus status : statuses) {
    FileReader<GenericRecord> fileReader=null;
    try {
      SeekableInput input=new FsInput(status.getPath(),fileSystem.getConf());
      DatumReader<GenericRecord> datumReader=new SpecificDatumReader<>(wrapperSchema);
      fileReader=DataFileReader.openReader(input,datumReader);
      for (      GenericRecord record : fileReader) {
        RecordHeader recordHeader=(RecordHeader)record.get(RecordWrapperSchemaGenerator.RECORD_HEADER_FIELD);
        Assert.assertEquals(header,recordHeader);
        TestLogData recordData=(TestLogData)record.get(RecordWrapperSchemaGenerator.RECORD_DATA_FIELD);
        resultTestLogs.add(recordData);
      }
    }
  finally {
      IOUtils.closeQuietly(fileReader);
    }
  }
  Assert.assertEquals(testLogs,resultTestLogs);
}
