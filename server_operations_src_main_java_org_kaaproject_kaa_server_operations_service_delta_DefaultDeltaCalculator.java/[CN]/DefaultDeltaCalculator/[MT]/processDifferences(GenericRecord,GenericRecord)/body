{
  Schema oldSchema=oldRoot.getSchema();
  if (oldSchema.getField(UUID_FIELD) != null) {
    lastUuidRecords=new RecordTuple(oldRoot,newRoot);
  }
  boolean hasDifferences=false;
  LinkedList<RecordTuple> nextRecords=new LinkedList<RecordTuple>();
  for (  Field oldField : oldSchema.getFields()) {
    Object newValue=newRoot.get(oldField.name());
    Object oldValue=oldRoot.get(oldField.name());
    if (newValue instanceof GenericRecord && oldValue instanceof GenericRecord) {
      GenericRecord oldRecord=(GenericRecord)oldValue;
      GenericRecord newRecord=(GenericRecord)newValue;
      if (oldRecord.getSchema().getFullName().equals(newRecord.getSchema().getFullName())) {
        nextRecords.offer(new RecordTuple(oldRecord,newRecord));
      }
 else {
        hasDifferences=true;
        break;
      }
    }
 else     if (newValue instanceof List && oldValue instanceof List) {
      List<Object> oldArray=(List<Object>)oldValue;
      List<Object> newArray=(List<Object>)newValue;
      hasDifferences=!(oldArray.size() == newArray.size());
      if (!hasDifferences) {
        if (!newArray.isEmpty() && newArray.get(0) instanceof GenericRecord && oldArray.get(0) instanceof GenericRecord) {
          GenericRecord uuidCheckRecord=(GenericRecord)newArray.get(0);
          Schema uuidCheckSchema=uuidCheckRecord.getSchema();
          if (uuidCheckSchema.getField(UUID_FIELD) != null) {
            for (            Object oldItem : oldArray) {
              GenericRecord oldItemRecord=(GenericRecord)oldItem;
              boolean isRecordExists=false;
              GenericFixed uuid=(GenericFixed)oldItemRecord.get(UUID_FIELD);
              if (uuid != null) {
                for (                Object it : newArray) {
                  GenericRecord newItemRecord=(GenericRecord)it;
                  GenericFixed newUuid=(GenericFixed)newItemRecord.get(UUID_FIELD);
                  if (uuid.equals(newUuid)) {
                    nextRecords.offer(new RecordTuple(oldItemRecord,newItemRecord));
                    isRecordExists=true;
                    break;
                  }
                }
                if (!isRecordExists) {
                  hasDifferences=true;
                  break;
                }
              }
 else {
                hasDifferences=true;
                break;
              }
            }
          }
 else {
            hasDifferences=!newArray.equals(oldArray);
          }
          if (hasDifferences) {
            break;
          }
        }
 else         if (!newArray.equals(oldArray)) {
          hasDifferences=true;
          break;
        }
      }
    }
 else     if ((newValue == null && oldValue != null) || (newValue != null && !newValue.equals(oldValue))) {
      hasDifferences=true;
      break;
    }
  }
  String lastUuidRecordName=getFullName(lastUuidRecords.getOldRecord());
  if (hasDifferences && !processedRecords.contains(lastUuidRecords)) {
    Schema deltaSubSchema=getDeltaSchemaByFullName(lastUuidRecordName);
    if (deltaSubSchema == null) {
      throw new DeltaCalculatorException(new StringBuilder().append("Failed to find schema for \"").append(lastUuidRecordName).append("\"").toString());
    }
    GenericRecord delta=new GenericData.Record(deltaSubSchema);
    fillDelta(delta,lastUuidRecords.getOldRecord(),lastUuidRecords.getNewRecord(),new LinkedList<FieldAttribute>());
    resultDelta.addDelta(delta);
    processedRecords.add(lastUuidRecords);
  }
 else {
    RecordTuple currentUuidRecords=lastUuidRecords;
    for (    RecordTuple tuple : nextRecords) {
      processDifferences(tuple.getOldRecord(),tuple.getNewRecord());
      if (!lastUuidRecords.equals(currentUuidRecords)) {
        lastUuidRecords=currentUuidRecords;
      }
    }
  }
}
