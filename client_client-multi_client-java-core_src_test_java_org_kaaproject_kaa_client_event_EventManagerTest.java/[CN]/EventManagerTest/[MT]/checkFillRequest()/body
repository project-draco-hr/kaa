{
  KaaClientPropertiesState state=new KaaClientPropertiesState(new FilePersistentStorage(),CommonsBase64.getInstance(),KaaClientPropertiesStateTest.getProperties());
  EventTransport transport=Mockito.mock(EventTransport.class);
  EventManager eventManager=new DefaultEventManager(state,transport);
  EventSyncRequest request=new EventSyncRequest();
  eventManager.produceEvent("kaa.test.event.SomeEvent",new byte[0],"theTarget");
  eventManager.fillEventListenersSyncRequest(request);
  request.setEvents(eventManager.pollPendingEvents());
  assertNotNull(request.getEvents());
  assertEquals(1,request.getEvents().size());
  assertEquals("kaa.test.event.SomeEvent",request.getEvents().get(0).getEventClassFQN());
  assertEquals("theTarget",request.getEvents().get(0).getTarget());
  assertArrayEquals(new byte[0],request.getEvents().get(0).getEventData().array());
  request=new EventSyncRequest();
  List<String> eventFQNs=new ArrayList<String>();
  eventFQNs.add("eventFQN1");
  eventManager.findEventListeners(eventFQNs,new FindEventListenersCallback(){
    @Override public void onRequestFailed(){
    }
    @Override public void onEventListenersReceived(    List<String> eventListeners){
    }
  }
);
  eventManager.findEventListeners(eventFQNs,new FindEventListenersCallback(){
    @Override public void onRequestFailed(){
    }
    @Override public void onEventListenersReceived(    List<String> eventListeners){
    }
  }
);
  eventManager.fillEventListenersSyncRequest(request);
  assertNotNull(request.getEventListenersRequests());
  assertEquals(2,request.getEventListenersRequests().size());
  assertArrayEquals(eventFQNs.toArray(),request.getEventListenersRequests().get(0).getEventClassFQNs().toArray());
}
