{
switch (fieldSchema.getType()) {
case RECORD:
    return createGenericRecordFormRecordField((RecordField)formField,fieldSchema);
case STRING:
  return ((StringField)formField).getValue();
case INT:
return ((IntegerField)formField).getValue();
case LONG:
return ((LongField)formField).getValue();
case BOOLEAN:
return ((BooleanField)formField).getValue();
case ENUM:
String enumSymbol=((EnumField)formField).getValue().getEnumSymbol();
return new GenericData.EnumSymbol(fieldSchema,enumSymbol);
case ARRAY:
List<RecordField> arrayData=((ArrayField)formField).getValue();
GenericData.Array<GenericRecord> genericArrayData=new GenericData.Array<>(arrayData.size(),fieldSchema);
for (RecordField recordField : arrayData) {
GenericRecord record=createGenericRecordFormRecordField(recordField,fieldSchema.getElementType());
genericArrayData.add(record);
}
return genericArrayData;
case UNION:
if (formField.isNull()) {
if (hasType(fieldSchema,Schema.Type.NULL)) {
return null;
}
 else {
throw new UnsupportedOperationException("Avro field doesn't support null values!");
}
}
 else {
if (isNullTypeSchema(fieldSchema)) {
Schema notNullSchema=getNotNullType(fieldSchema);
if (notNullSchema != null) {
return convertValue(formField,notNullSchema);
}
 else {
throw new UnsupportedOperationException("Avro field doesn't support not null values!");
}
}
 else {
UnionField unionField=(UnionField)formField;
RecordField recordValue=unionField.getValue();
Schema recordSchema=findRecordSchema(fieldSchema,recordValue.getTypeFullname());
if (recordSchema != null) {
return createGenericRecordFormRecordField(unionField.getValue(),recordSchema);
}
 else {
throw new IllegalArgumentException("Union schema doesn't contains record value schema: " + recordValue.getTypeFullname());
}
}
}
default :
throw new UnsupportedOperationException("Unsupported avro field type: " + fieldSchema.getType());
}
}
