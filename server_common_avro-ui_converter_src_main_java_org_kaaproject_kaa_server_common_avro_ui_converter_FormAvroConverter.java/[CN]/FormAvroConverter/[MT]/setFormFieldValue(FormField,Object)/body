{
switch (field.getFieldType()) {
case RECORD:
    GenericRecord record=(GenericRecord)value;
  fillRecordFieldFromGenericRecord((RecordField)field,record);
break;
case UNION:
RecordField unionValue=createRecordFieldFromGenericRecord((GenericRecord)value);
((UnionField)field).setValue(unionValue);
break;
case STRING:
((StringField)field).setValue((String)value);
break;
case INTEGER:
((IntegerField)field).setValue((Integer)value);
break;
case LONG:
((LongField)field).setValue((Long)value);
break;
case BOOLEAN:
((BooleanField)field).setValue((Boolean)value);
break;
case ENUM:
EnumSymbol enumSymbol=(EnumSymbol)value;
EnumField enumField=(EnumField)field;
if (enumSymbol != null) {
enumField.setValueFromSymbol(enumSymbol.toString());
}
 else {
enumField.setValue(null);
}
break;
case ARRAY:
ArrayField arrayField=(ArrayField)field;
arrayField.getValue().clear();
GenericData.Array<GenericRecord> genericArrayData=(GenericData.Array<GenericRecord>)value;
for (GenericRecord arrayRecord : genericArrayData) {
((ArrayField)field).addArrayData(createRecordFieldFromGenericRecord(arrayRecord));
}
break;
default :
break;
}
}
