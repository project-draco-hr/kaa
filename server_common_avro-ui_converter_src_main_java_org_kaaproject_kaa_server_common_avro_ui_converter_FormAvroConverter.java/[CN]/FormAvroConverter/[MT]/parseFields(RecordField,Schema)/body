{
  List<Field> schemaFields=schema.getFields();
  for (  Field field : schemaFields) {
    String fieldName=field.name();
    String displayName=fieldName;
    JsonNode displayNameVal=field.getJsonProp(DISPLAY_NAME);
    if (displayNameVal != null && displayNameVal.isTextual()) {
      displayName=displayNameVal.asText();
    }
    JsonNode optionalVal=field.getJsonProp(OPTIONAL);
    boolean optional=false;
    if (optionalVal != null && optionalVal.isBoolean()) {
      optional=optionalVal.asBoolean();
    }
    FieldType fieldType=toFieldType(field.schema());
    FormField formField;
    if (fieldType == FieldType.UNION) {
      UnionField unionField=createField(fieldType,fieldName,displayName,optional);
      List<RecordField> acceptableValues=new ArrayList<>();
      List<Schema> acceptableTypes=field.schema().getTypes();
      for (int i=0; i < acceptableTypes.size(); i++) {
        RecordField acceptableValue=createRecordFieldFromSchema(acceptableTypes.get(i));
        acceptableValues.add(acceptableValue);
      }
      unionField.setAcceptableValues(acceptableValues);
      formField=unionField;
    }
 else     if (fieldType == FieldType.RECORD) {
      RecordField recordField=createField(fieldType,fieldName,displayName,optional);
      recordField.setTypeName(field.schema().getName());
      recordField.setTypeNamespace(field.schema().getNamespace());
      parseFields(recordField,field.schema());
      formField=recordField;
    }
 else     if (fieldType == FieldType.ARRAY) {
      ArrayField arrayField=createField(fieldType,fieldName,displayName,optional);
      JsonNode minRowCountVal=field.getJsonProp(MIN_ROW_COUNT);
      if (minRowCountVal != null && minRowCountVal.isInt()) {
        arrayField.setMinRowCount(minRowCountVal.asInt());
      }
      RecordField elementMetadata=createRecordFieldFromSchema(field.schema().getElementType());
      arrayField.setElementMetadata(elementMetadata);
      for (int i=0; i < arrayField.getMinRowCount(); i++) {
        arrayField.addArrayData((RecordField)elementMetadata.clone());
      }
      formField=arrayField;
    }
 else {
      JsonNode defaultValueVal=field.defaultValue();
      if (fieldType == FieldType.ENUM) {
        EnumField enumField=createField(fieldType,fieldName,displayName,optional);
        List<String> enumSymbols=field.schema().getEnumSymbols();
        List<FormEnum> enumValues=new ArrayList<>(enumSymbols.size());
        JsonNode displayNamesNode=field.getJsonProp(DISPLAY_NAMES);
        for (int i=0; i < enumSymbols.size(); i++) {
          String enumSymbol=enumSymbols.get(i);
          String displayValue=enumSymbol;
          if (displayNamesNode != null && displayNamesNode.isArray()) {
            displayValue=displayNamesNode.get(i).getTextValue();
          }
          FormEnum formEnum=new FormEnum(enumSymbol,displayValue);
          enumValues.add(formEnum);
        }
        enumField.setEnumValues(enumValues);
        String defaultValue=convertJsonValue(fieldType,defaultValueVal);
        enumField.setDefaultValueFromSymbol(defaultValue);
        enumField.setValueFromSymbol(defaultValue);
        formField=enumField;
      }
 else       if (fieldType == FieldType.BOOLEAN) {
        BooleanField booleanField=createField(fieldType,fieldName,displayName,optional);
        Boolean defaultValue=convertJsonValue(fieldType,defaultValueVal);
        booleanField.setDefaultValue(defaultValue);
        booleanField.setValue(defaultValue);
        formField=booleanField;
      }
 else {
        SizedField sizedField=createField(fieldType,fieldName,displayName,optional);
        JsonNode maxLengthVal=field.getJsonProp(MAX_LENGTH);
        if (maxLengthVal != null && maxLengthVal.isInt()) {
          sizedField.setMaxLength(maxLengthVal.asInt());
        }
        if (fieldType == FieldType.STRING) {
          String defaultValue=convertJsonValue(fieldType,defaultValueVal);
          ((StringField)sizedField).setDefaultValue(defaultValue);
          ((StringField)sizedField).setValue(defaultValue);
        }
 else         if (fieldType == FieldType.INTEGER) {
          Integer defaultValue=convertJsonValue(fieldType,defaultValueVal);
          ((IntegerField)sizedField).setDefaultValue(defaultValue);
          ((IntegerField)sizedField).setValue(defaultValue);
        }
 else         if (fieldType == FieldType.LONG) {
          Long defaultValue=convertJsonValue(fieldType,defaultValueVal);
          ((LongField)sizedField).setDefaultValue(defaultValue);
          ((LongField)sizedField).setValue(defaultValue);
        }
        formField=sizedField;
      }
      JsonNode weightVal=field.getJsonProp(WEIGHT);
      if (weightVal != null && weightVal.isNumber()) {
        Number weight=weightVal.getNumberValue();
        formField.setWeight(weight.floatValue());
      }
    }
    formData.addField(formField);
  }
}
