{
  ApplicationDto application=generateApplicationDto(null);
  EndpointGroupDto groupDto=generateEndpointGroupDto(application.getId());
  EndpointGroupDto groupDto2=generateEndpointGroupDto(application.getId(),"OTHER_GROUP");
  EndpointProfileSchemaDto schema=generateProfSchemaDto(application.getTenantId(),application.getId(),1).get(0);
  ServerProfileSchemaDto serverSchema=generateServerProfileSchema(application.getId(),application.getTenantId());
  ProfileFilterDto filterDto=generateFilterDto(schema.getId(),serverSchema.getId(),groupDto.getId(),1,false).get(0);
  Assert.assertNotNull(filterDto);
  filterDto.setId(null);
  filterDto.setEndpointGroupId(groupDto.getId());
  ProfileFilterDto savedOne=profileService.saveProfileFilter(filterDto);
  Assert.assertNotNull(savedOne);
  ChangeProfileFilterNotification activeOne=profileService.activateProfileFilter(savedOne.getId(),null);
  Assert.assertNotNull(activeOne);
  filterDto.setId(null);
  filterDto.setEndpointGroupId(groupDto2.getId());
  ProfileFilterDto savedTwo=profileService.saveProfileFilter(filterDto);
  Assert.assertNotNull(savedTwo);
  ChangeProfileFilterNotification activeTwo=profileService.activateProfileFilter(savedTwo.getId(),null);
  Assert.assertNotNull(activeTwo);
  List<ProfileFilterDto> activeList=profileService.findProfileFiltersByAppIdAndVersionsCombination(application.getId(),schema.getVersion(),serverSchema.getVersion());
  Assert.assertFalse(activeList.isEmpty());
  Set<String> groupIds=new HashSet<>();
  for (  ProfileFilterDto dto : activeList) {
    Assert.assertEquals(dto.getStatus(),UpdateStatus.ACTIVE);
    groupIds.add(dto.getEndpointGroupId());
  }
  Assert.assertEquals(2,groupIds.size());
}
