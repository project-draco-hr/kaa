{
  float prefWidth=0;
  prefWidth+=constructStringColumn(table,Utils.constants.version(),new StringValueProvider<T>(){
    @Override public String getValue(    T item){
      return item.getCtlSchemaDto().getMetaInfo().getVersion() + ".0";
    }
  }
,new Comparator<T>(){
    @Override public int compare(    T o1,    T o2){
      return o1.getCtlSchemaDto().getMetaInfo().getVersion().compareTo(o2.getCtlSchemaDto().getMetaInfo().getVersion());
    }
  }
,Boolean.FALSE,80);
  prefWidth+=constructStringColumn(table,Utils.constants.name(),new StringValueProvider<T>(){
    @Override public String getValue(    T item){
      return item.getCtlSchemaDto().getName();
    }
  }
,new Comparator<T>(){
    @Override public int compare(    T o1,    T o2){
      return o1.getCtlSchemaDto().getName().compareToIgnoreCase(o2.getCtlSchemaDto().getName());
    }
  }
,null,80);
  prefWidth+=constructStringColumn(table,Utils.constants.author(),new StringValueProvider<T>(){
    @Override public String getValue(    T item){
      return item.getCtlSchemaDto().getCreatedUsername();
    }
  }
,80);
  prefWidth+=constructStringColumn(table,Utils.constants.dateCreated(),new StringValueProvider<T>(){
    @Override public String getValue(    T item){
      return Utils.millisecondsToDateString(item.getProfileSchemaDto().getCreatedTime());
    }
  }
,new Comparator<T>(){
    @Override public int compare(    T o1,    T o2){
      return o1.getProfileSchemaDto().getCreatedTime().compareTo(o2.getProfileSchemaDto().getCreatedTime());
    }
  }
,Boolean.FALSE,80);
  return prefWidth;
}
