{
  logger.info("Loading 'Smart House Demo Application' data...");
  loginTenantAdmin(client);
  EventClassFamilyDto deviceEventClassFamily=new EventClassFamilyDto();
  deviceEventClassFamily.setName("Device Event Class Family");
  deviceEventClassFamily.setNamespace("org.kaaproject.kaa.demo.smarthouse.device");
  deviceEventClassFamily.setClassName("DeviceEventClassFamily");
  deviceEventClassFamily=client.editEventClassFamily(deviceEventClassFamily);
  client.addEventClassFamilySchema(deviceEventClassFamily.getId(),getResourcePath("deviceEventClassFamily.json"));
  EventClassFamilyDto thermoEventClassFamily=new EventClassFamilyDto();
  thermoEventClassFamily.setName("Thermo Event Class Family");
  thermoEventClassFamily.setNamespace("org.kaaproject.kaa.demo.smarthouse.thermo");
  thermoEventClassFamily.setClassName("ThermoEventClassFamily");
  thermoEventClassFamily=client.editEventClassFamily(thermoEventClassFamily);
  client.addEventClassFamilySchema(thermoEventClassFamily.getId(),getResourcePath("thermoEventClassFamily.json"));
  EventClassFamilyDto musicEventClassFamily=new EventClassFamilyDto();
  musicEventClassFamily.setName("Music Event Class Family");
  musicEventClassFamily.setNamespace("org.kaaproject.kaa.demo.smarthouse.music");
  musicEventClassFamily.setClassName("MusicEventClassFamily");
  musicEventClassFamily=client.editEventClassFamily(musicEventClassFamily);
  client.addEventClassFamilySchema(musicEventClassFamily.getId(),getResourcePath("musicEventClassFamily.json"));
  ApplicationDto smartHouseApplication=new ApplicationDto();
  smartHouseApplication.setName("Smart house");
  smartHouseApplication=client.editApplication(smartHouseApplication);
  sdkPropertiesDto.setApplicationId(smartHouseApplication.getId());
  sdkPropertiesDto.setApplicationToken(smartHouseApplication.getApplicationToken());
  sdkPropertiesDto.setProfileSchemaVersion(1);
  sdkPropertiesDto.setConfigurationSchemaVersion(1);
  sdkPropertiesDto.setNotificationSchemaVersion(1);
  sdkPropertiesDto.setLogSchemaVersion(1);
  loginTenantDeveloper(client);
  ApplicationEventFamilyMapDto deviceAefMap=mapEventClassFamily(client,smartHouseApplication,deviceEventClassFamily);
  ApplicationEventFamilyMapDto thermoAefMap=mapEventClassFamily(client,smartHouseApplication,thermoEventClassFamily);
  ApplicationEventFamilyMapDto musicAefMap=mapEventClassFamily(client,smartHouseApplication,musicEventClassFamily);
  List<String> aefMapIds=new ArrayList<>();
  aefMapIds.add(deviceAefMap.getId());
  aefMapIds.add(thermoAefMap.getId());
  aefMapIds.add(musicAefMap.getId());
  sdkPropertiesDto.setAefMapIds(aefMapIds);
  TrustfulVerifierConfig trustfulVerifierConfig=new TrustfulVerifierConfig();
  UserVerifierDto trustfulUserVerifier=new UserVerifierDto();
  trustfulUserVerifier.setApplicationId(smartHouseApplication.getId());
  trustfulUserVerifier.setName("Trustful verifier");
  trustfulUserVerifier.setPluginClassName(trustfulVerifierConfig.getPluginClassName());
  trustfulUserVerifier.setPluginTypeName(trustfulVerifierConfig.getPluginTypeName());
  RawSchema rawSchema=new RawSchema(trustfulVerifierConfig.getPluginConfigSchema().toString());
  DefaultRecordGenerationAlgorithm<RawData> algotithm=new DefaultRecordGenerationAlgorithmImpl<>(rawSchema,new RawDataFactory());
  RawData rawData=algotithm.getRootData();
  trustfulUserVerifier.setJsonConfiguration(rawData.getRawData());
  trustfulUserVerifier=client.editUserVerifierDto(trustfulUserVerifier);
  sdkPropertiesDto.setDefaultVerifierToken(trustfulUserVerifier.getVerifierToken());
  logger.info("Finished loading 'Smart House Demo Application' data.");
}
