{
  lineChart=(LineChartView)rootView.findViewById(R.id.lineChart);
  TextView yAxisView=(TextView)rootView.findViewById(R.id.lineChartYAxisText);
  TextView xAxisView=(TextView)rootView.findViewById(R.id.lineChartXAxisText);
  yAxisView.setTextColor(LINE_CHART_AXIS_TEXT_COLOR);
  yAxisView.setTextSize(TypedValue.COMPLEX_UNIT_SP,LINE_CHART_AXIS_TEXT_SIZE);
  yAxisView.setText(Y_AXIS_LABEL);
  xAxisView.setTextColor(LINE_CHART_AXIS_TEXT_COLOR);
  xAxisView.setTextSize(TypedValue.COMPLEX_UNIT_SP,LINE_CHART_AXIS_TEXT_SIZE);
  xAxisView.setText(X_AXIS_LABEL);
  lineChart.getChartRenderer().setMinViewportXValue((float)0);
  lineChart.getChartRenderer().setMaxViewportXValue((float)POINTS_COUNT);
  List<PointValue> values=new ArrayList<PointValue>();
  float maxValue=Float.MIN_VALUE;
  float minValue=Float.MAX_VALUE;
  int startPos=POINTS_COUNT - data.size() + 1;
  float latestValue=0.0f;
  for (int i=0; i < data.size(); i++) {
    if (i == 148) {
      System.out.println();
    }
    int pos=startPos + i;
    float value=0.0f;
    for (    DataPoint dp : data.get(i).getDataPoints()) {
      value+=convertVoltage(dp.getVoltage());
    }
    values.add(new PointValue(pos,value));
    minValue=Math.min(minValue,value);
    maxValue=Math.max(maxValue,value);
    latestValue=value;
  }
  for (int i=0; i < FUTURE_POINTS_COUNT; i++) {
    values.add(new PointValue(POINTS_COUNT + i + 1,latestValue));
  }
  lineChart.getChartRenderer().setMinViewportYValue(minValue - Y_AXIS_MIN_MAX_DIV);
  lineChart.getChartRenderer().setMaxViewportYValue(maxValue + Y_AXIS_MIN_MAX_DIV);
  line=new Line(values).setColor(LINE_CHART_LINE_COLOR).setCubic(LINE_CHART_IS_CUBIC).setHasLabels(false).setHasPoints(false).setFilled(true).setAreaTransparency(AREA_TRANSPARENCY);
  List<Line> lines=new ArrayList<Line>();
  lines.add(line);
  final LineChartData lineChartData=new LineChartData();
  lineChartData.setLines(lines);
  Axis axisX=new Axis();
  Axis axisY=new Axis().setHasLines(true);
  axisX.setTextSize(LINE_CHART_AXIS_SIZE);
  axisX.setTextColor(LINE_CHART_AXIS_COLOR);
  axisY.setTextSize(LINE_CHART_AXIS_SIZE);
  axisY.setTextColor(LINE_CHART_AXIS_COLOR);
  final Calendar calendar=new GregorianCalendar();
  final SimpleDateFormat ft=new SimpleDateFormat("hh:mm:ss a ____________",Locale.US);
  axisX.setAutoGenerated(true);
  axisX.setFormatter(new AxisValueFormatter(){
    @Override public int formatValueForManualAxis(    char[] formattedValue,    AxisValue axisValue){
      return format(calendar,ft,formattedValue,axisValue.getValue());
    }
    @Override public int formatValueForAutoGeneratedAxis(    char[] formattedValue,    float value,    int autoDecimalDigits){
      return format(calendar,ft,formattedValue,value);
    }
    private int format(    final Calendar calendar,    final SimpleDateFormat ft,    char[] formattedValue,    float value){
      long time=System.currentTimeMillis();
      calendar.setTimeInMillis(time);
      String formatedValue=null;
      if ((int)value == POINTS_COUNT) {
        formatedValue=ft.format(calendar.getTime());
      }
 else {
        int delta=POINTS_COUNT - (int)value;
        if (delta % INTERVAL_FOR_HORIZONTAL_AXIS == 0 && delta > INTERVAL_FOR_HORIZONTAL_AXIS) {
          formatedValue="- " + (delta / 2);
        }
      }
      if (formatedValue == null) {
        return 0;
      }
 else {
        char[] data=formatedValue.toCharArray();
        for (int i=0; i < data.length; i++) {
          formattedValue[formattedValue.length - data.length + i]=data[i];
        }
        return data.length;
      }
    }
  }
);
  lineChartData.setAxisXBottom(axisX);
  lineChartData.setAxisYLeft(axisY);
  lineChart.setLineChartData(lineChartData);
}
