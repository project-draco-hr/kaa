{
  final View rootView=inflater.inflate(R.layout.fragment_dashboard,container,false);
  androidKaaPlatformContext=new AndroidKaaPlatformContext(getActivity());
  kaaClient=Kaa.newClient(androidKaaPlatformContext);
  endpoint=DataEndpointFactory.createEndpoint(kaaClient.getConfiguration(),getActivity());
  Log.i(TAG,"Default configuration: " + kaaClient.getConfiguration().toString());
  kaaClient.addConfigurationListener(new ConfigurationListener(){
    @Override public void onConfigurationUpdate(    PowerPlantEndpointConfiguration config){
      endpoint.stop();
      endpoint=DataEndpointFactory.createEndpoint(config,getActivity());
      noEndpointUpdate=false;
      Log.i(TAG,"Updating configuration: " + config.toString());
      try {
        updateChartsExecutor.awaitTermination(5,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        Log.i(TAG,"Interrupted while waiting for update thread to be killed",e);
      }
      updateChartsExecutor.execute(updateThread);
    }
  }
);
  kaaClient.start();
  gaugeCharts.add((GaugeChart)rootView.findViewById(R.id.gaugeChart11));
  gaugeCharts.add((GaugeChart)rootView.findViewById(R.id.gaugeChart12));
  gaugeCharts.add((GaugeChart)rootView.findViewById(R.id.gaugeChart13));
  gaugeCharts.add((GaugeChart)rootView.findViewById(R.id.gaugeChart21));
  gaugeCharts.add((GaugeChart)rootView.findViewById(R.id.gaugeChart22));
  gaugeCharts.add((GaugeChart)rootView.findViewById(R.id.gaugeChart23));
  logBox=(TextView)rootView.findViewById(R.id.logBox);
  logBox.setMovementMethod(new ScrollingMovementMethod());
  updateThread=new Thread(new Runnable(){
    @Override public void run(){
      Log.i(TAG,"generating history data ");
      noEndpointUpdate=true;
      final List<DataReport> reports=endpoint.getHistoryData(0);
      if (reports == null) {
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            Toast.makeText(mActivity,"No Data!",Toast.LENGTH_LONG).show();
            try {
              Thread.sleep(3000);
            }
 catch (            InterruptedException e) {
            }
            mActivity.finish();
          }
        }
);
      }
 else {
        mActivity.runOnUiThread(new Runnable(){
          @Override public void run(){
            Log.i(TAG,"populating charts with data " + reports.size());
            prepareLineChart(rootView,reports);
            Log.i(TAG,"populated line chart with data ");
            if (!reports.isEmpty()) {
              preparePieChart(rootView,reports.get(reports.size() - 1));
            }
 else {
              preparePieChart(rootView,INITIAL_REPORT);
            }
            Log.i(TAG,"populated pie chart with data ");
          }
        }
);
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e1) {
          e1.printStackTrace();
        }
        DataReport previousReport=INITIAL_REPORT;
        if (!reports.isEmpty()) {
          previousReport=reports.get(reports.size() - 1);
        }
        long previousUpdate=0l;
        while (true) {
          boolean updated=false;
          while (!updated) {
            try {
              Thread.sleep(UPDATE_CHECK_PERIOD);
              long updateDelta=System.currentTimeMillis() - previousUpdate;
              if (updateDelta < UPDATE_PERIOD) {
                continue;
              }
 else {
                Log.i(TAG,"Updating since -" + (updateDelta / 1000.) + " s.");
              }
              DataReport latestDataCandidate=endpoint.getLatestData();
              latestDataCandidate=(latestDataCandidate == null ? previousReport : latestDataCandidate);
              Log.i(TAG,"Latest data: " + latestDataCandidate.toString());
              Log.i(TAG,"Previous data: " + previousReport.toString());
              if (latestDataCandidate.getTime() >= previousReport.getTime()) {
                previousReport=latestDataCandidate;
                updated=true;
                previousUpdate=System.currentTimeMillis();
              }
            }
 catch (            InterruptedException e) {
              Log.e(TAG,"Failed to fetch data",e);
            }
          }
          final DataReport latestData=previousReport;
          Log.i(TAG,"latest data: " + latestData.toString());
          mActivity.runOnUiThread(new Runnable(){
            @Override public void run(){
              float maxValue=Float.MIN_VALUE;
              float minValue=Float.MAX_VALUE;
              PieChartData data=pieChart.getPieChartData();
              float plantVoltage=0.0f;
              int counter=0;
              for (              DataPoint dp : latestData.getDataPoints()) {
                float curVoltage=convertVoltage(dp.getVoltage());
                plantVoltage+=curVoltage;
                SliceValue sliceValue=data.getValues().get(dp.getPanelId());
                sliceValue.setTarget(curVoltage);
                gaugeCharts.get(counter).setValue(dp.getAverageVoltage());
                showLogIfNeeded(counter,curVoltage * 1000);
                counter++;
                Log.i(TAG,dp.toString());
              }
              float gridVoltage=(latestData.getPowerConsumption() - plantVoltage * 1000) / 1000;
              pieChart.startDataAnimation(UPDATE_PERIOD / 2);
              updateLabels(plantVoltage * 1000,gridVoltage);
              int curPointIndex=line.getValues().size() - FUTURE_POINTS_COUNT;
              PointValue curPoint=line.getValues().get(curPointIndex);
              curPoint.set(curPoint.getX(),plantVoltage);
              for (              PointValue point : line.getValues()) {
                point.setTarget(point.getX() - 1,point.getY());
                minValue=Math.min(minValue,point.getY());
                maxValue=Math.max(maxValue,point.getY());
              }
              if (line.getValues().size() == (POINTS_COUNT + PAST_POINTS_COUNT + FUTURE_POINTS_COUNT)) {
                line.getValues().remove(0);
              }
              line.getValues().add(new PointValue(POINTS_COUNT + FUTURE_POINTS_COUNT,plantVoltage));
              lineChart.startDataAnimation(UPDATE_PERIOD / 2);
              lineChart.getChartRenderer().setMinViewportYValue(MIN_VOLTAGE);
              lineChart.getChartRenderer().setMaxViewportYValue((MAX_VOLTAGE * MAX_PANEL_PER_ZONE * NUM_ZONES) / 1000);
            }
          }
);
        }
      }
    }
  }
);
  updateChartsExecutor.execute(updateThread);
  return rootView;
}
