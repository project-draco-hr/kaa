{
  String sdkTemplateLocation=System.getProperty("server_home_dir") + "/" + CPP_SDK_DIR+ "/"+ CPP_SDK_PREFIX+ buildVersion+ ".tar.gz";
  LOG.debug("Lookup Java SDK template: {}",sdkTemplateLocation);
  CompressorStreamFactory csf=new CompressorStreamFactory();
  ArchiveStreamFactory asf=new ArchiveStreamFactory();
  CompressorInputStream cis=csf.createCompressorInputStream(CompressorStreamFactory.GZIP,new FileInputStream(sdkTemplateLocation));
  ArchiveInputStream templateArchive=asf.createArchiveInputStream(ArchiveStreamFactory.TAR,cis);
  ByteArrayOutputStream sdkOutput=new ByteArrayOutputStream();
  CompressorOutputStream cos=csf.createCompressorOutputStream(CompressorStreamFactory.GZIP,sdkOutput);
  ArchiveOutputStream sdkFile=asf.createArchiveOutputStream(ArchiveStreamFactory.TAR,cos);
  Map<String,TarEntryData> replacementData=new HashMap<String,TarEntryData>();
  List<TarEntryData> cppSources=new ArrayList<>();
  TarArchiveEntry entry=new TarArchiveEntry(SDK_DEFAULTS_PATH);
  byte[] data=generateKaaDefaults(bootstrapNodes,appToken,configurationSchemaVersion,profileSchemaVersion,notificationSchemaVersion,logSchemaVersion,configurationProtocolSchemaBody,defaultConfigurationData,eventFamilies,defaultVerifierToken);
  entry.setSize(data.length);
  TarEntryData tarEntry=new TarEntryData(entry,data);
  cppSources.add(tarEntry);
  entry=new TarArchiveEntry(PROFILE_SCHEMA_AVRO_SRC);
  data=profileSchemaBody.getBytes();
  entry.setSize(data.length);
  tarEntry=new TarEntryData(entry,data);
  cppSources.add(tarEntry);
  entry=new TarArchiveEntry(NOTIFICATION_SCHEMA_AVRO_SRC);
  data=notificationSchemaBody.getBytes();
  entry.setSize(data.length);
  tarEntry=new TarEntryData(entry,data);
  cppSources.add(tarEntry);
  if (logSchemaBody != null) {
    entry=new TarArchiveEntry(LOG_RECORD_SCHEMA_AVRO_SRC);
    data=logSchemaBody.getBytes();
    entry.setSize(data.length);
    tarEntry=new TarEntryData(entry,data);
    cppSources.add(tarEntry);
    Schema logSchema=new Schema.Parser().parse(logSchemaBody);
    String logRecordHpp=SdkGenerator.readResource(LOG_RECORD_TEMPLATE);
    entry=new TarArchiveEntry(LOG_RECORD_PATH);
    byte[] logRecordData=replaceVar(logRecordHpp,LOG_RECORD_CLASS_NAME_VAR,logSchema.getName()).getBytes();
    entry.setSize(logRecordData.length);
    tarEntry=new TarEntryData(entry,logRecordData);
    cppSources.add(tarEntry);
    String iLogCollectorHpp=SdkGenerator.readResource(ILOG_COLLECTOR_TEMPLATE);
    entry=new TarArchiveEntry(ILOG_COLLECTOR_PATH);
    byte[] iLogCollectorData=replaceVar(iLogCollectorHpp,LOG_RECORD_CLASS_NAME_VAR,logSchema.getName()).getBytes();
    entry.setSize(iLogCollectorData.length);
    tarEntry=new TarEntryData(entry,iLogCollectorData);
    cppSources.add(tarEntry);
    String logCollectorHpp=SdkGenerator.readResource(LOG_COLLECTOR_TEMPLATE);
    entry=new TarArchiveEntry(LOG_COLLECTOR_PATH);
    byte[] logCollectorData=replaceVar(logCollectorHpp,LOG_RECORD_CLASS_NAME_VAR,logSchema.getName()).getBytes();
    entry.setSize(logCollectorData.length);
    tarEntry=new TarEntryData(entry,logCollectorData);
    cppSources.add(tarEntry);
  }
  if (eventFamilies != null && !eventFamilies.isEmpty()) {
    cppSources.addAll(CppEventSourcesGenerator.generateEventSources(eventFamilies));
  }
  for (  TarEntryData entryData : cppSources) {
    replacementData.put(entryData.getEntry().getName(),entryData);
  }
  ArchiveEntry e=null;
  while ((e=templateArchive.getNextEntry()) != null) {
    if (!e.isDirectory()) {
      if (replacementData.containsKey(e.getName())) {
        TarEntryData entryData=replacementData.remove(e.getName());
        sdkFile.putArchiveEntry(entryData.getEntry());
        sdkFile.write(entryData.getData());
      }
 else {
        sdkFile.putArchiveEntry(e);
        IOUtils.copy(templateArchive,sdkFile);
      }
    }
 else {
      sdkFile.putArchiveEntry(e);
    }
    sdkFile.closeArchiveEntry();
  }
  templateArchive.close();
  for (  String entryName : replacementData.keySet()) {
    TarEntryData entryData=replacementData.get(entryName);
    sdkFile.putArchiveEntry(entryData.getEntry());
    sdkFile.write(entryData.getData());
    sdkFile.closeArchiveEntry();
  }
  sdkFile.finish();
  sdkFile.close();
  String sdkFileName=MessageFormatter.arrayFormat(CPP_SDK_NAME_PATTERN,new Object[]{profileSchemaVersion,configurationSchemaVersion,notificationSchemaVersion,logSchemaVersion}).getMessage();
  byte[] sdkData=sdkOutput.toByteArray();
  Sdk sdk=new Sdk();
  sdk.setFileName(sdkFileName);
  sdk.setData(sdkData);
  return sdk;
}
