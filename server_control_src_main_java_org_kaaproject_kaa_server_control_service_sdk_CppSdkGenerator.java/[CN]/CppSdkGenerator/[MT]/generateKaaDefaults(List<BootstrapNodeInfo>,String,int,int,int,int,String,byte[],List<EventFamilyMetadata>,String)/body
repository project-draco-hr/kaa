{
  String kaaDefaultsString=SdkGenerator.readResource(SDK_DEFAULTS_TEMPLATE);
  LOG.debug("[sdk generateClientProperties] bootstrapNodes.size(): {}",bootstrapNodes.size());
  kaaDefaultsString=replaceVar(kaaDefaultsString,BUILD_VERSION,Version.PROJECT_VERSION);
  kaaDefaultsString=replaceVar(kaaDefaultsString,BUILD_COMMIT_HASH,Version.COMMIT_HASH);
  kaaDefaultsString=replaceVar(kaaDefaultsString,APPLICATION_TOKEN_VAR,appToken);
  kaaDefaultsString=replaceVar(kaaDefaultsString,PROFILE_VERSION_VAR,profileSchemaVersion + "");
  kaaDefaultsString=replaceVar(kaaDefaultsString,CONFIG_VERSION_VAR,configurationSchemaVersion + "");
  kaaDefaultsString=replaceVar(kaaDefaultsString,SYSTEM_NF_VERSION_VAR,"1");
  kaaDefaultsString=replaceVar(kaaDefaultsString,USER_NF_VERSION_VAR,notificationSchemaVersion + "");
  kaaDefaultsString=replaceVar(kaaDefaultsString,LOG_SCHEMA_VERSION_VAR,logSchemaVersion + "");
  kaaDefaultsString=replaceVar(kaaDefaultsString,POLLING_PERIOD_SECONDS_VAR,"5");
  kaaDefaultsString=replaceVar(kaaDefaultsString,CLIENT_PUB_KEY_LOCATION_VAR,"key.public");
  kaaDefaultsString=replaceVar(kaaDefaultsString,CLIENT_PRIV_KEY_LOCATION_VAR,"key.private");
  kaaDefaultsString=replaceVar(kaaDefaultsString,CLIENT_STATUS_FILE_LOCATION_VAR,"kaa.status");
  kaaDefaultsString=replaceVar(kaaDefaultsString,DEFAULT_USER_VERIFIER_TOKEN,defaultVerifierToken != null ? defaultVerifierToken : "");
  String bootstrapServers="";
  LOG.debug("[sdk generateClientProperties] bootstrapNodes.size(): {}",bootstrapNodes.size());
  for (  BootstrapNodeInfo node : bootstrapNodes) {
    List<TransportMetaData> supportedChannels=node.getTransports();
    int accessPointId=ServerNameUtil.crc32(node.getConnectionInfo());
    for (    TransportMetaData transport : supportedChannels) {
      for (      VersionConnectionInfoPair pair : transport.getConnectionInfo()) {
        String serverPattern="listOfServers.push_back(createTransportInfo(";
        serverPattern+="0x" + Integer.toHexString(accessPointId);
        serverPattern+=", ";
        serverPattern+="0x" + Integer.toHexString(transport.getId());
        serverPattern+=", ";
        serverPattern+=pair.getVersion();
        serverPattern+=", \"";
        serverPattern+=Base64.encodeBase64String(pair.getConenctionInfo().array());
        serverPattern+="\"";
        serverPattern+="));\n";
        bootstrapServers+=serverPattern;
      }
    }
  }
  kaaDefaultsString=replaceVar(kaaDefaultsString,BOOTSTRAP_SERVERS_INFO_VAR,bootstrapServers);
  kaaDefaultsString=replaceVar(kaaDefaultsString,CONFIG_SCHEMA_DEFAULT_VAR,configurationProtocolSchemaBody.replace("\"","\\\""));
  kaaDefaultsString=replaceVar(kaaDefaultsString,CONFIG_DATA_DEFAULT_VAR,Base64.encodeBase64String(defaultConfigurationData));
  String eventFamilyVersions="";
  for (int i=0; i < eventFamilies.size(); i++) {
    EventFamilyMetadata eventFamily=eventFamilies.get(i);
    if (i > 0) {
      eventFamilyVersions+=", ";
    }
    eventFamilyVersions+="{\"" + eventFamily.getEcfName() + "\","+ eventFamily.getVersion()+ "}";
  }
  eventFamilyVersions="{ " + eventFamilyVersions + " }";
  kaaDefaultsString=replaceVar(kaaDefaultsString,EVENT_FAMILY_VERSION_VAR,eventFamilyVersions);
  return kaaDefaultsString.getBytes();
}
