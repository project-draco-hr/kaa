{
  StringWriter writer=new StringWriter();
  IOUtils.copy(kaaDefaultsStream,writer);
  String kaaDefaultsString=writer.toString();
  LOG.debug("[sdk generateClientProperties] bootstrapNodes.size(): {}",bootstrapNodes.size());
  kaaDefaultsString=replaceVar(kaaDefaultsString,BUILD_VERSION,Version.PROJECT_VERSION);
  kaaDefaultsString=replaceVar(kaaDefaultsString,BUILD_COMMIT_HASH,Version.COMMIT_HASH);
  kaaDefaultsString=replaceVar(kaaDefaultsString,APPLICATION_TOKEN_VAR,appToken);
  kaaDefaultsString=replaceVar(kaaDefaultsString,PROFILE_VERSION_VAR,profileSchemaVersion + "");
  kaaDefaultsString=replaceVar(kaaDefaultsString,CONFIG_VERSION_VAR,configurationSchemaVersion + "");
  kaaDefaultsString=replaceVar(kaaDefaultsString,USER_NF_VERSION_VAR,notificationSchemaVersion + "");
  kaaDefaultsString=replaceVar(kaaDefaultsString,LOG_SCHEMA_VERSION_VAR,logSchemaVersion + "");
  kaaDefaultsString=replaceVar(kaaDefaultsString,CLIENT_PUB_KEY_LOCATION_VAR,"key.public");
  kaaDefaultsString=replaceVar(kaaDefaultsString,CLIENT_PRIV_KEY_LOCATION_VAR,"key.private");
  kaaDefaultsString=replaceVar(kaaDefaultsString,CLIENT_STATUS_FILE_LOCATION_VAR,"kaa.status");
  kaaDefaultsString=replaceVar(kaaDefaultsString,POLLING_PERIOD_SECONDS_VAR,"5");
  kaaDefaultsString=replaceVar(kaaDefaultsString,SYSTEM_NF_VERSION_VAR,"1");
  String bootstrapServers="";
  LOG.debug("[sdk generateClientProperties] bootstrapNodes.size(): {}",bootstrapNodes.size());
  for (int nodeIndex=0; nodeIndex < bootstrapNodes.size(); ++nodeIndex) {
    if (nodeIndex > 0) {
      bootstrapServers+="\n                                          , ";
    }
    BootstrapNodeInfo node=bootstrapNodes.get(nodeIndex);
    List<BootstrapSupportedChannel> supportedChannels=node.getSupportedChannelsArray();
    String encodedPublicKey=Base64.encodeBase64String(node.getConnectionInfo().getPublicKey().array());
    for (int chIndex=0; chIndex < supportedChannels.size(); ++chIndex) {
      if (chIndex > 0) {
        bootstrapServers+="\n                                          , ";
      }
      String serverPattern="createServerInfo(";
      ZkSupportedChannel channel=supportedChannels.get(chIndex).getZkChannel();
      serverPattern+=channel.getChannelType().ordinal();
      serverPattern+=", ";
      if (channel.getChannelType() == ZkChannelType.HTTP) {
        ZkHttpComunicationParameters params=(ZkHttpComunicationParameters)channel.getCommunicationParameters();
        serverPattern+="\"" + params.getZkComunicationParameters().getHostName() + "\"";
        serverPattern+=", ";
        serverPattern+=params.getZkComunicationParameters().getPort();
      }
 else       if (channel.getChannelType() == ZkChannelType.HTTP_LP) {
        ZkHttpLpComunicationParameters params=(ZkHttpLpComunicationParameters)channel.getCommunicationParameters();
        serverPattern+="\"" + params.getZkComunicationParameters().getHostName() + "\"";
        serverPattern+=", ";
        serverPattern+=params.getZkComunicationParameters().getPort();
      }
 else       if (channel.getChannelType() == ZkChannelType.KAATCP) {
        ZkKaaTcpComunicationParameters params=(ZkKaaTcpComunicationParameters)channel.getCommunicationParameters();
        serverPattern+="\"" + params.getZkComunicationParameters().getHostName() + "\"";
        serverPattern+=", ";
        serverPattern+=params.getZkComunicationParameters().getPort();
      }
      serverPattern+=", ";
      serverPattern+="\"" + encodedPublicKey + "\"";
      serverPattern+=")";
      bootstrapServers+=serverPattern;
    }
  }
  kaaDefaultsString=replaceVar(kaaDefaultsString,BOOTSTRAP_SERVERS_INFO_VAR,bootstrapServers);
  kaaDefaultsString=replaceVar(kaaDefaultsString,CONFIG_SCHEMA_DEFAULT_VAR,configurationProtocolSchemaBody.replace("\"","\\\""));
  kaaDefaultsString=replaceVar(kaaDefaultsString,CONFIG_DATA_DEFAULT_VAR,Base64.encodeBase64String(defaultConfigurationData));
  String eventFamilyVersions="";
  for (int i=0; i < eventFamilies.size(); i++) {
    EventFamilyMetadata eventFamily=eventFamilies.get(i);
    if (i > 0) {
      eventFamilyVersions+=", ";
    }
    eventFamilyVersions+="{\"" + eventFamily.getEcfName() + "\","+ eventFamily.getVersion()+ "}";
  }
  eventFamilyVersions="{ " + eventFamilyVersions + " }";
  kaaDefaultsString=replaceVar(kaaDefaultsString,EVENT_FAMILY_VERSION_VAR,eventFamilyVersions);
  return kaaDefaultsString.getBytes();
}
