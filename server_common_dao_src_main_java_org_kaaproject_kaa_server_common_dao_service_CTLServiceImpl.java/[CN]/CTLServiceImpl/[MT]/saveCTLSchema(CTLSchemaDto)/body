{
  validateCTLSchemaObject(unSavedSchema);
  CTLSchemaMetaInfoDto metaInfo=unSavedSchema.getMetaInfo();
  CTLSchemaScopeDto currentScope=null;
  if (isBlank(unSavedSchema.getTenantId())) {
    currentScope=SYSTEM;
  }
 else   if (!isBlank(unSavedSchema.getTenantId())) {
    currentScope=TENANT;
  }
 else   if (!isBlank(unSavedSchema.getAppId())) {
    currentScope=APPLICATION;
  }
  metaInfo.setScope(currentScope);
  CTLSchemaDto dto;
synchronized (this) {
    CTLSchemaMetaInfo uniqueMetaInfo;
    try {
      uniqueMetaInfo=schemaMetaInfoDao.save(new CTLSchemaMetaInfo(metaInfo));
    }
 catch (    Exception e) {
      uniqueMetaInfo=schemaMetaInfoDao.findByFqnAndVersion(metaInfo.getFqn(),metaInfo.getVersion());
    }
    schemaMetaInfoDao.lockRequest(lockOptions).setScope(true).lock(uniqueMetaInfo);
switch (uniqueMetaInfo.getScope()) {
case SYSTEM:
      throw new RuntimeException("Disable to store system ctl schema with same fqn and version.");
case TENANT:
    if (currentScope == SYSTEM) {
      throw new RuntimeException("Disable to store system ctl schema. Tenant's scope schema already exists with the same fqn and version.");
    }
  break;
case APPLICATION:
break;
default :
break;
}
CTLSchema ctlSchema=new CTLSchema(unSavedSchema);
ctlSchema.setMetaInfo(uniqueMetaInfo);
schemaMetaInfoDao.incrementCount(uniqueMetaInfo);
dto=getDto(ctlSchemaDao.save(ctlSchema,true));
}
return dto;
}
