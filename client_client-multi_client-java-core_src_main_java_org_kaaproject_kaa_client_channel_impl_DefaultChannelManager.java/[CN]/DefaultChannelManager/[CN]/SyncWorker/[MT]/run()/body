{
  LOG.debug("[{}] Worker started",channel.getId());
  while (!stop) {
    try {
      BlockingQueue<SyncTask> taskQueue=syncTaskQueueMap.get(channel.getId());
      SyncTask task=taskQueue.take();
      List<SyncTask> additionalTasks=new ArrayList<SyncTask>();
      if (taskQueue.drainTo(additionalTasks) > 0) {
        LOG.debug("[{}] Merging task {} with {}",channel.getId(),task,additionalTasks);
        task=SyncTask.merge(task,additionalTasks);
      }
      if (task.isAll()) {
        LOG.debug("[{}] Going to invoke syncAll method for types {}",channel.getId(),task.getTypes());
        channel.syncAll();
      }
 else       if (task.isAckOnly()) {
        LOG.debug("[{}] Going to invoke syncAck method for types {}",channel.getId(),task.getTypes());
        channel.syncAck(task.getTypes());
      }
 else {
        LOG.debug("[{}] Going to invoke sync method",channel.getId());
        channel.sync(task.getTypes());
      }
    }
 catch (    InterruptedException e) {
      if (stop) {
        LOG.debug("[{}] Worker is interrupted.",channel.getId());
      }
 else {
        LOG.warn("[{}] Worker is interrupted. Stack trace: ",channel.getId(),e);
      }
    }
  }
  LOG.debug("[{}] Worker stopped",channel.getId());
}
