{
  OperationStatus status=OperationStatus.FAILED;
  waitConnected();
  try {
    getDriver().sendCommand(SEND_COMMAND_PING);
    status=waitResponse(COMMAND_PING);
    if (status == OperationStatus.SUCESSFULL) {
      LOG.trace("Ping response sucessfull");
      if (pingCallback != null) {
        if (recivedResponse != null) {
          LOG.trace("Ping response: " + recivedResponse);
          Pattern p=Pattern.compile(COMMAND_PING);
          Matcher m=p.matcher(recivedResponse);
          if (m.matches()) {
            String ls=m.group(1);
            int l=Integer.parseInt(ls);
            if (l >= DISTANCE_TO_WALL) {
              LOG.trace("Ping response: " + recivedResponse + " status EMPTY");
              pingCallback.pong(PongStatus.EMPTY);
            }
 else {
              LOG.trace("Ping response: " + recivedResponse + " status WALL");
              pingCallback.pong(PongStatus.WALL);
            }
          }
 else {
            LOG.error("Send command Ping: recivedResponse don't matches to " + COMMAND_PING);
            if (errorCallback != null) {
              errorCallback.error(new BotException("Ping: recivedResponse don't matches to " + COMMAND_PING));
            }
          }
        }
 else {
          LOG.error("Send command Ping: recived response not initialized");
          if (errorCallback != null) {
            errorCallback.error(new BotException("Ping: recived response not initialized"));
          }
        }
      }
    }
 else {
      LOG.error("Send command Ping: status failed");
      if (errorCallback != null) {
        errorCallback.error(new BotException("Ping status: failed."));
      }
    }
  }
 catch (  Exception e) {
    LOG.error("Send command() failed",e);
    if (errorCallback != null) {
      errorCallback.error(e);
    }
  }
}
