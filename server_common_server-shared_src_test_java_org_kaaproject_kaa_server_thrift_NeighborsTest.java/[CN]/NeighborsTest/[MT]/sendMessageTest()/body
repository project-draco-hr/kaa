{
  ConnectionInfo connectionInfo1=new ConnectionInfo("thriftHost",9999,ByteBuffer.allocate(10));
  NeighborTemplate<Event> template=(NeighborTemplate<Event>)mock(NeighborTemplate.class);
  Neighbors<NeighborTemplate<Event>,Event> neighbors=new Neighbors<>(KaaThriftService.OPERATIONS_SERVICE,template,1);
  ReflectionTestUtils.setField(neighbors,"zkId","someZkId");
  NeighborConnection<NeighborTemplate<Event>,Event> neighborConnection=new NeighborConnection<>(connectionInfo1,1,null);
  LinkedBlockingQueue<Event> eventQueue=spy(new LinkedBlockingQueue<Event>());
  ReflectionTestUtils.setField(neighborConnection,"messageQueue",eventQueue);
  ConcurrentMap<String,NeighborConnection<NeighborTemplate<Event>,Event>> neighborMap=spy((ConcurrentMap<String,NeighborConnection<NeighborTemplate<Event>,Event>>)ReflectionTestUtils.getField(neighbors,"neigbors"));
  ReflectionTestUtils.setField(neighbors,"neigbors",neighborMap);
  when(neighborMap.get(anyString())).thenReturn(neighborConnection);
  Collection<Event> messages=new ArrayList<>();
  Event e=new Event(10,"FQN",null,null,null);
  messages.add(e);
  Collection<Event> messagesSpy=spy(messages);
  neighbors.sendMessages(connectionInfo1,messagesSpy);
  verify(messagesSpy,timeout(1000)).iterator();
  verify(eventQueue,timeout(1000)).offer(eq(e),anyLong(),any(TimeUnit.class));
  neighbors.shutdown();
}
