{
  Properties clientProperties=new Properties();
  clientProperties.load(clientPropertiesStream);
  String bootstrapServers="";
  LOG.debug("[sdk generateClientProperties] bootstrapNodes.size(): {}",bootstrapNodes.size());
  for (int nodeIndex=0; nodeIndex < bootstrapNodes.size(); ++nodeIndex) {
    BootstrapNodeInfo node=bootstrapNodes.get(nodeIndex);
    List<TransportMetaData> supportedChannels=node.getTransports();
    int accessPointId=ServerNameUtil.crc32(node.getConnectionInfo());
    for (int chIndex=0; chIndex < supportedChannels.size(); ++chIndex) {
      TransportMetaData transport=supportedChannels.get(chIndex);
      for (      VersionConnectionInfoPair pair : transport.getConnectionInfo()) {
        bootstrapServers+=accessPointId;
        bootstrapServers+=SEPARATOR;
        bootstrapServers+=transport.getId();
        bootstrapServers+=SEPARATOR;
        bootstrapServers+=pair.getVersion();
        bootstrapServers+=SEPARATOR;
        bootstrapServers+=Base64.encodeBase64String(pair.getConenctionInfo().array());
        bootstrapServers+=";";
      }
    }
  }
  String ecfs="";
  if (eventFamilies != null) {
    for (int i=0; i < eventFamilies.size(); i++) {
      if (i > 0) {
        ecfs+=";";
      }
      ecfs+=eventFamilies.get(i).getEcfName() + SEPARATOR + eventFamilies.get(i).getVersion();
    }
  }
  clientProperties.put(BUILD_VERSION,Version.PROJECT_VERSION);
  clientProperties.put(BUILD_COMMIT_HASH,Version.COMMIT_HASH);
  clientProperties.put(BOOTSTRAP_SERVERS_PROPERTY,bootstrapServers);
  clientProperties.put(SDK_TOKEN_PROPERTY,sdkToken);
  clientProperties.put(CONFIG_SCHEMA_DEFAULT_PROPERTY,configurationProtocolSchemaBody);
  clientProperties.put(CONFIG_DATA_DEFAULT_PROPERTY,Base64.encodeBase64String(defaultConfigurationData));
  clientProperties.put(EVENT_CLASS_FAMILY_VERSION_PROPERTY,ecfs);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  clientProperties.store(baos,"");
  return baos.toByteArray();
}
