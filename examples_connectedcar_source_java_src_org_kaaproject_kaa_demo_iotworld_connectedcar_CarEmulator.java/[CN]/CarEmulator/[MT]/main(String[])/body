{
  KaaClient kaaClient=Kaa.newClient(new DesktopKaaPlatformContext());
  final Set<String> homeTags=Collections.newSetFromMap(new ConcurrentHashMap<String,Boolean>());
  final Set<String> nearTags=Collections.newSetFromMap(new ConcurrentHashMap<String,Boolean>());
  kaaClient.setLogUploadStrategy(new DefaultLogUploadStrategy(){
    @Override public LogUploadStrategyDecision isUploadNeeded(    LogStorageStatus status){
      return status.getRecordCount() >= 1 ? LogUploadStrategyDecision.UPLOAD : LogUploadStrategyDecision.NOOP;
    }
    @Override public void onFailure(    org.kaaproject.kaa.client.logging.LogFailoverCommand controller,    org.kaaproject.kaa.common.endpoint.gen.LogDeliveryErrorCode code){
      LOG.info("Log upload failed due to {}",code);
    }
  }
);
  applyConfiguration(homeTags,nearTags,kaaClient.getConfiguration());
  kaaClient.addConfigurationListener(new ConfigurationListener(){
    @Override public void onConfigurationUpdate(    GeofancingConfiguration conf){
      applyConfiguration(homeTags,nearTags,conf);
    }
  }
);
  kaaClient.start();
  try {
    while (true) {
      BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
      System.out.println("Enter tag");
      String tag=br.readLine();
      if (!tag.equalsIgnoreCase("exit")) {
        LOG.info("User entered tag : {}",tag);
        try {
          byte[] tagData=toByteArray(tag);
          kaaClient.addLogRecord(new RfidLog(ByteBuffer.wrap(tagData)));
          if (homeTags.contains(tag)) {
            LOG.info("This is HOME tag. TODO: Broadcast event!");
          }
          if (nearTags.contains(tag)) {
            LOG.info("This is NEAR tag. TODO: Broadcast event!");
          }
        }
 catch (        Exception e) {
          LOG.error("Failed to decode tag: {}",e.getMessage(),e);
        }
      }
 else {
        break;
      }
    }
  }
 catch (  IOException e) {
    LOG.error("IOException was caught",e);
  }
}
