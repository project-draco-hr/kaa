{
  EndpointProfileSchemaDto profileSchema=profileService.findProfileSchemaByAppIdAndVersion(sdkProfile.getApplicationId(),sdkProfile.getProfileSchemaVersion());
  if (profileSchema == null) {
    throw new NotFoundException("Profile schema not found!");
  }
  ConfigurationSchemaDto configurationSchema=configurationService.findConfSchemaByAppIdAndVersion(sdkProfile.getApplicationId(),sdkProfile.getConfigurationSchemaVersion());
  if (configurationSchema == null) {
    throw new NotFoundException("Configuration schema not found!");
  }
  ConfigurationDto defaultConfiguration=configurationService.findDefaultConfigurationBySchemaId(configurationSchema.getId());
  if (defaultConfiguration == null) {
    throw new NotFoundException("Default configuration not found!");
  }
  NotificationSchemaDto notificationSchema=notificationService.findNotificationSchemaByAppIdAndTypeAndVersion(sdkProfile.getApplicationId(),NotificationTypeDto.USER,sdkProfile.getNotificationSchemaVersion());
  if (notificationSchema == null) {
    throw new NotFoundException("Notification schema not found!");
  }
  LogSchemaDto logSchema=logSchemaService.findLogSchemaByAppIdAndVersion(sdkProfile.getApplicationId(),sdkProfile.getLogSchemaVersion());
  if (logSchema == null) {
    throw new NotFoundException("Log schema not found!");
  }
  CTLSchemaDto logCtlSchema=ctlService.findCTLSchemaById(logSchema.getCtlSchemaId());
  if (logCtlSchema == null) {
    throw new NotFoundException("Log CTL schema not found!");
  }
  String logSchemaBodyString=ctlService.flatExportAsString(logCtlSchema);
  CTLSchemaDto profileCtlSchema=ctlService.findCTLSchemaById(profileSchema.getCtlSchemaId());
  if (profileCtlSchema == null) {
    throw new NotFoundException("Profile CTL schema not found!");
  }
  String profileSchemaBodyString=ctlService.flatExportAsString(profileCtlSchema);
  CTLSchemaDto notificationCtlSchema=ctlService.findCTLSchemaById(notificationSchema.getCtlSchemaId());
  if (notificationCtlSchema == null) {
    throw new NotFoundException("Profile CTL schema not found!");
  }
  String notificationSchemaBodyString=ctlService.flatExportAsString(notificationCtlSchema);
  DataSchema profileDataSchema=new DataSchema(profileSchemaBodyString);
  DataSchema notificationDataSchema=new DataSchema(notificationSchemaBodyString);
  ProtocolSchema protocolSchema=new ProtocolSchema(configurationSchema.getProtocolSchema());
  DataSchema logDataSchema=new DataSchema(logSchemaBodyString);
  String profileSchemaBody=profileDataSchema.getRawSchema();
  byte[] defaultConfigurationData=GenericAvroConverter.toRawData(defaultConfiguration.getBody(),configurationSchema.getBaseSchema());
  List<EventFamilyMetadata> eventFamilies=new ArrayList<>();
  if (sdkProfile.getAefMapIds() != null) {
    List<ApplicationEventFamilyMapDto> aefMaps=applicationEventMapService.findApplicationEventFamilyMapsByIds(sdkProfile.getAefMapIds());
    for (    ApplicationEventFamilyMapDto aefMap : aefMaps) {
      EventFamilyMetadata efm=new EventFamilyMetadata();
      efm.setVersion(aefMap.getVersion());
      efm.setEventMaps(aefMap.getEventMaps());
      EventClassFamilyDto ecf=eventClassService.findEventClassFamilyById(aefMap.getEcfId());
      efm.setEcfName(ecf.getName());
      efm.setEcfNamespace(ecf.getNamespace());
      efm.setEcfClassName(ecf.getClassName());
      List<EventSchemaVersionDto> ecfSchemas=ecf.getSchemas();
      for (      EventSchemaVersionDto ecfSchema : ecfSchemas) {
        if (ecfSchema.getVersion() == efm.getVersion()) {
          efm.setEcfSchema(ecfSchema.getSchema());
          break;
        }
      }
      eventFamilies.add(efm);
    }
  }
  LOG.debug("Sdk profile for sdk generation: {}",sdkProfile);
  SdkGenerator generator=SdkGeneratorFactory.createSdkGenerator(platform);
  FileData sdkFile=null;
  try {
    sdkFile=generator.generateSdk(Version.PROJECT_VERSION,controlZKService.getCurrentBootstrapNodes(),sdkProfile,profileSchemaBody,notificationDataSchema.getRawSchema(),protocolSchema.getRawSchema(),configurationSchema.getBaseSchema(),defaultConfigurationData,eventFamilies,logDataSchema.getRawSchema());
  }
 catch (  Exception e) {
    LOG.error("Unable to generate SDK",e);
    throw new ControlServiceException(e);
  }
  sdkFile.setContentType(platform.getContentType());
  return sdkFile;
}
