{
  ApplicationDto application=applicationService.findAppById(sdkProperties.getApplicationId());
  if (application == null) {
    throw new NotFoundException("Application not found!");
  }
  ProfileSchemaDto profileSchema=profileService.findProfileSchemaByAppIdAndVersion(sdkProperties.getApplicationId(),sdkProperties.getProfileSchemaVersion());
  if (profileSchema == null) {
    throw new NotFoundException("Profile schema not found!");
  }
  ConfigurationSchemaDto configurationSchema=configurationService.findConfSchemaByAppIdAndVersion(sdkProperties.getApplicationId(),sdkProperties.getConfigurationSchemaVersion());
  if (configurationSchema == null) {
    throw new NotFoundException("Configuration schema not found!");
  }
  ConfigurationDto defaultConfiguration=configurationService.findDefaultConfigurationBySchemaId(configurationSchema.getId());
  if (defaultConfiguration == null) {
    throw new NotFoundException("Default configuration not found!");
  }
  NotificationSchemaDto notificationSchema=notificationService.findNotificationSchemaByAppIdAndTypeAndVersion(sdkProperties.getApplicationId(),NotificationTypeDto.USER,sdkProperties.getNotificationSchemaVersion());
  if (notificationSchema == null) {
    throw new NotFoundException("Notification schema not found!");
  }
  LogSchemaDto logSchema=logSchemaService.findLogSchemaByAppIdAndVersion(sdkProperties.getApplicationId(),sdkProperties.getLogSchemaVersion());
  if (logSchema == null) {
    throw new NotFoundException("Log schema not found!");
  }
  DataSchema profileDataSchema=new DataSchema(profileSchema.getSchema());
  DataSchema notificationDataSchema=new DataSchema(notificationSchema.getSchema());
  ProtocolSchema protocolSchema=new ProtocolSchema(configurationSchema.getProtocolSchema());
  DataSchema logDataSchema=new DataSchema(logSchema.getSchema());
  String appToken=application.getApplicationToken();
  String profileSchemaBody=profileDataSchema.getRawSchema();
  byte[] defaultConfigurationData=GenericAvroConverter.toRawData(defaultConfiguration.getBody(),configurationSchema.getBaseSchema());
  List<EventFamilyMetadata> eventFamilies=new ArrayList<>();
  if (sdkProperties.getAefMapIds() != null) {
    List<ApplicationEventFamilyMapDto> aefMaps=applicationEventMapService.findApplicationEventFamilyMapsByIds(sdkProperties.getAefMapIds());
    for (    ApplicationEventFamilyMapDto aefMap : aefMaps) {
      EventFamilyMetadata efm=new EventFamilyMetadata();
      efm.setVersion(aefMap.getVersion());
      efm.setEventMaps(aefMap.getEventMaps());
      EventClassFamilyDto ecf=eventClassService.findEventClassFamilyById(aefMap.getEcfId());
      efm.setEcfName(ecf.getName());
      efm.setEcfNamespace(ecf.getNamespace());
      efm.setEcfClassName(ecf.getClassName());
      List<EventSchemaVersionDto> ecfSchemas=ecf.getSchemas();
      for (      EventSchemaVersionDto ecfSchema : ecfSchemas) {
        if (ecfSchema.getVersion() == efm.getVersion()) {
          efm.setEcfSchema(ecfSchema.getSchema());
          break;
        }
      }
      eventFamilies.add(efm);
    }
  }
  sdkProperties.setApplicationToken(appToken);
  sdkProperties=sdkProfileService.saveSdkProfile(sdkProperties);
  String sdkToken=new SdkProfile(sdkProperties).getToken();
  LOG.debug("Sdk properties for sdk generation: {}",sdkProperties);
  SdkGenerator generator=SdkGeneratorFactory.createSdkGenerator(platform);
  FileData sdkFile=null;
  try {
    sdkFile=generator.generateSdk(Version.PROJECT_VERSION,controlZKService.getCurrentBootstrapNodes(),sdkToken,sdkProperties,profileSchemaBody,notificationDataSchema.getRawSchema(),protocolSchema.getRawSchema(),configurationSchema.getBaseSchema(),defaultConfigurationData,eventFamilies,logDataSchema.getRawSchema());
  }
 catch (  Exception e) {
    LOG.error("Unable to generate SDK",e);
    throw new ControlServiceException(e);
  }
  sdkFile.setContentType(platform.getContentType());
  return sdkFile;
}
