{
  ApplicationDto application=applicationService.findAppById(key.getApplicationId());
  if (application == null) {
    throw new NotFoundException("Application not found!");
  }
  FileData data=new FileData();
  if (RecordFiles.LOG_LIBRARY.equals(key.getRecordFiles())) {
    data=generateRecordStructureLibrary(key.getApplicationId(),key.getSchemaVersion());
  }
 else {
    AbstractSchemaDto schemaDto=null;
    ConfigurationSchemaDto confSchemaDto=null;
    String fileName=null;
    String schema=null;
switch (key.getRecordFiles()) {
case LOG_SCHEMA:
      throw new RuntimeException("Not implemented!");
case CONFIGURATION_SCHEMA:
    throw new RuntimeException("Not implemented!");
case CONFIGURATION_BASE_SCHEMA:
  confSchemaDto=configurationService.findConfSchemaByAppIdAndVersion(key.getApplicationId(),key.getSchemaVersion());
checkSchema(confSchemaDto,RecordFiles.CONFIGURATION_BASE_SCHEMA);
schema=confSchemaDto.getBaseSchema();
fileName=MessageFormatter.arrayFormat(DATA_NAME_PATTERN,new Object[]{"configuration-base",key.getSchemaVersion()}).getMessage();
break;
case CONFIGURATION_OVERRIDE_SCHEMA:
confSchemaDto=configurationService.findConfSchemaByAppIdAndVersion(key.getApplicationId(),key.getSchemaVersion());
checkSchema(confSchemaDto,RecordFiles.CONFIGURATION_OVERRIDE_SCHEMA);
schema=confSchemaDto.getOverrideSchema();
fileName=MessageFormatter.arrayFormat(DATA_NAME_PATTERN,new Object[]{"configuration-override",key.getSchemaVersion()}).getMessage();
break;
case NOTIFICATION_SCHEMA:
throw new RuntimeException("Not implemented!");
case PROFILE_SCHEMA:
throw new RuntimeException("Not implemented!");
case SERVER_PROFILE_SCHEMA:
throw new RuntimeException("Not implemented!");
default :
break;
}
byte[] schemaData=schema.getBytes(StandardCharsets.UTF_8);
data.setFileName(fileName);
data.setFileData(schemaData);
}
return data;
}
