{
  LOG.debug("[{}] Lookup registration information based on credentials ID [{}]",applicationId,credentialsId);
  try {
    Optional<EndpointRegistrationDto> endpointRegistrationOptional=endpointRegistrationService.findEndpointRegistrationByCredentialsId(credentialsId);
    if (endpointRegistrationOptional.isPresent()) {
      EndpointRegistrationDto endpointRegistration=endpointRegistrationOptional.get();
      LOG.debug("[{}] Found endpoint registration information [{}]",applicationId,endpointRegistration);
      if (endpointRegistration.getEndpointId() != null) {
        checkNeighbors();
        ApplicationDto appDto=getApplication(endpointRegistration.getApplicationId());
        ThriftEndpointDeregistrationMessage nf=new ThriftEndpointDeregistrationMessage();
        nf.setAddress(new ThriftEntityAddress(appDto.getTenantId(),appDto.getApplicationToken(),ThriftClusterEntityType.ENDPOINT,ByteBuffer.wrap(Base64Util.decode(endpointRegistration.getEndpointId()))));
        nf.setActorClassifier(ThriftActorClassifier.APPLICATION);
        neighbors.brodcastMessage(OperationsServiceMsg.fromDeregistration(nf));
      }
      endpointRegistrationService.removeEndpointRegistrationById(endpointRegistration.getId());
      LOG.debug("[{}] endpoint registration information [{}] removed",applicationId,endpointRegistration);
    }
 else {
      LOG.debug("[{}] No endpoint registration information provisioned for credentials ID [{}]",applicationId,credentialsId);
    }
  }
 catch (  EndpointRegistrationServiceException cause) {
    String message=MessageFormat.format("An unexpected exception occured while lookup registration information based on credentails ID [{0}]",credentialsId);
    LOG.error(message,cause);
    throw new ControlServiceException(cause);
  }
}
