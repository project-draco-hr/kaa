{
  String sdkToken=sdkProfile.getToken();
  Integer configurationSchemaVersion=sdkProfile.getConfigurationSchemaVersion();
  Integer profileSchemaVersion=sdkProfile.getProfileSchemaVersion();
  Integer notificationSchemaVersion=sdkProfile.getNotificationSchemaVersion();
  Integer logSchemaVersion=sdkProfile.getLogSchemaVersion();
  String defaultVerifierToken=sdkProfile.getDefaultVerifierToken();
  String sdkTemplateLocation=Environment.getServerHomeDir() + "/" + CPP_SDK_DIR+ "/"+ CPP_SDK_PREFIX+ buildVersion+ ".tar.gz";
  LOG.debug("Lookup Java SDK template: {}",sdkTemplateLocation);
  CompressorStreamFactory csf=new CompressorStreamFactory();
  ArchiveStreamFactory asf=new ArchiveStreamFactory();
  CompressorInputStream cis=csf.createCompressorInputStream(CompressorStreamFactory.GZIP,new FileInputStream(sdkTemplateLocation));
  ArchiveInputStream templateArchive=asf.createArchiveInputStream(ArchiveStreamFactory.TAR,cis);
  ByteArrayOutputStream sdkOutput=new ByteArrayOutputStream();
  CompressorOutputStream cos=csf.createCompressorOutputStream(CompressorStreamFactory.GZIP,sdkOutput);
  ArchiveOutputStream sdkFile=asf.createArchiveOutputStream(ArchiveStreamFactory.TAR,cos);
  Map<String,TarEntryData> replacementData=new HashMap<>();
  List<TarEntryData> cppSources=new ArrayList<>();
  TarArchiveEntry entry=new TarArchiveEntry(SDK_DEFAULTS_PATH);
  byte[] data=generateKaaDefaults(bootstrapNodes,sdkToken,defaultConfigurationData,defaultVerifierToken);
  entry.setSize(data.length);
  TarEntryData tarEntry=new TarEntryData(entry,data);
  cppSources.add(tarEntry);
  Map<String,String> profileVars=new HashMap<>();
  profileVars.put(SDK_PROFILE_VERSION_VAR,profileSchemaVersion.toString());
  cppSources.addAll(processFeatureSchema(profileSchemaBody,PROFILE_SCHEMA_AVRO_SRC,PROFILE_DEFINITIONS_TEMPLATE,PROFILE_DEFINITIONS_PATH,profileVars));
  cppSources.addAll(processFeatureSchema(notificationSchemaBody,NOTIFICATION_SCHEMA_AVRO_SRC,NOTIFICATION_DEFINITIONS_TEMPLATE,NOTIFICATION_DEFINITIONS_PATH,null));
  cppSources.addAll(processFeatureSchema(logSchemaBody,LOG_SCHEMA_AVRO_SRC,LOG_DEFINITIONS_TEMPLATE,LOG_DEFINITIONS_PATH,null));
  cppSources.addAll(processFeatureSchema(configurationBaseSchema,CONFIGURATION_SCHEMA_AVRO_SRC,CONFIGURATION_DEFINITIONS_TEMPLATE,CONFIGURATION_DEFINITIONS_PATH,null));
  if (eventFamilies != null && !eventFamilies.isEmpty()) {
    cppSources.addAll(CppEventSourcesGenerator.generateEventSources(eventFamilies));
  }
  for (  TarEntryData entryData : cppSources) {
    replacementData.put(entryData.getEntry().getName(),entryData);
  }
  ArchiveEntry e=null;
  while ((e=templateArchive.getNextEntry()) != null) {
    if (!e.isDirectory()) {
      if (replacementData.containsKey(e.getName())) {
        TarEntryData entryData=replacementData.remove(e.getName());
        sdkFile.putArchiveEntry(entryData.getEntry());
        sdkFile.write(entryData.getData());
      }
 else {
        sdkFile.putArchiveEntry(e);
        IOUtils.copy(templateArchive,sdkFile);
      }
    }
 else {
      sdkFile.putArchiveEntry(e);
    }
    sdkFile.closeArchiveEntry();
  }
  templateArchive.close();
  for (  String entryName : replacementData.keySet()) {
    TarEntryData entryData=replacementData.get(entryName);
    sdkFile.putArchiveEntry(entryData.getEntry());
    sdkFile.write(entryData.getData());
    sdkFile.closeArchiveEntry();
  }
  sdkFile.finish();
  sdkFile.close();
  String sdkFileName=MessageFormatter.arrayFormat(CPP_SDK_NAME_PATTERN,new Object[]{profileSchemaVersion,configurationSchemaVersion,notificationSchemaVersion,logSchemaVersion}).getMessage();
  byte[] sdkData=sdkOutput.toByteArray();
  FileData sdk=new FileData();
  sdk.setFileName(sdkFileName);
  sdk.setFileData(sdkData);
  return sdk;
}
