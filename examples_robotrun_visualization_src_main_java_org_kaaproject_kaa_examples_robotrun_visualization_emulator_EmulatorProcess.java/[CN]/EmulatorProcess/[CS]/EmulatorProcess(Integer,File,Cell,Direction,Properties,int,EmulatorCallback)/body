{
  this.id=id;
  this.callback=callback;
  String workingDir=System.getProperty("user.dir");
  File emulatorWorkingDir=new File(new File(workingDir),EMULATOR_ID_PREFIX + id);
  if (!emulatorWorkingDir.exists()) {
    emulatorWorkingDir.mkdirs();
  }
 else {
    try {
      FileUtils.cleanDirectory(emulatorWorkingDir);
    }
 catch (    IOException e) {
      LOG.error("Unable to clean emulator directory {}",emulatorWorkingDir);
      throw new RuntimeException("Unable to clean emulator directory!");
    }
  }
  outFile=new File(emulatorWorkingDir,OUT_FILE);
  try {
    emulatorStdout=new PrintWriter(outFile);
  }
 catch (  IOException e) {
    LOG.error("Unable to create emulator stdout {}",outFile);
    throw new RuntimeException("Unable to create emulator stdout!");
  }
  String separator=System.getProperty("path.separator");
  String classPath=System.getProperty("java.class.path");
  String[] classPathUnits=classPath.split(separator);
  StringBuilder normalizedClassPath=new StringBuilder();
  for (int i=0; i < classPathUnits.length; i++) {
    File classPathUnitFile=new File(classPathUnits[i]);
    if (classPathUnitFile.exists()) {
      if (i > 0) {
        normalizedClassPath.append(separator);
      }
      normalizedClassPath.append(classPathUnitFile.getAbsolutePath());
    }
  }
  List<String> command=new ArrayList<>();
  command.add("java");
  command.add("-cp");
  command.add(normalizedClassPath.toString());
  if (debugPort > -1) {
    command.add("-Xdebug");
    command.add("-Xrunjdwp:server=y,transport=dt_socket,address=" + debugPort + ",suspend=n");
  }
  command.add(EmulatorMain.class.getName());
  command.add(labyrinthFile.getAbsolutePath());
  command.add("" + startCell.getX());
  command.add("" + startCell.getY());
  command.add(startDirection.name());
  command.add("" + id);
  if (robotProperties != null) {
    for (    Object key : robotProperties.keySet()) {
      String val=robotProperties.getProperty("" + key);
      command.add(key + "=" + val);
    }
  }
  StringBuilder emulatorStartCommand=new StringBuilder();
  for (  String arg : command) {
    emulatorStartCommand.append(arg + " ");
  }
  emulatorStdout.println("Starting emulator using the following command:");
  emulatorStdout.println(emulatorStartCommand.toString());
  processBuilder=new ProcessBuilder(command);
  processBuilder.directory(emulatorWorkingDir);
  processBuilder.redirectErrorStream(true);
}
