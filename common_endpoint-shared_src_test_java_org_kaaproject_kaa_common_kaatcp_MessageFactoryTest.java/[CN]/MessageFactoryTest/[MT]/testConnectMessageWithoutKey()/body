{
  KeyPair clientPair=KeyUtil.generateKeyPair();
  AvroByteArrayConverter<org.kaaproject.kaa.common.endpoint.gen.SyncRequest> requestConverter=new AvroByteArrayConverter<>(org.kaaproject.kaa.common.endpoint.gen.SyncRequest.class);
  org.kaaproject.kaa.common.endpoint.gen.SyncRequest request=new org.kaaproject.kaa.common.endpoint.gen.SyncRequest();
  request.setRequestId(42);
  SyncRequestMetaData md=new SyncRequestMetaData();
  md.setApplicationToken("AppToken");
  md.setEndpointPublicKeyHash(ByteBuffer.wrap(SHA1HashUtils.hashToBytes(clientPair.getPublic().getEncoded())));
  request.setSyncRequestMetaData(md);
  final byte[] rawData=requestConverter.toByteArray(request);
  final byte connectHeader[]=new byte[]{0x10,0x37,0x00,0x06,'K','a','a','t','c','p',0x01,0x02,0x00,0x00,0x00,(byte)0xC8};
  ByteBuffer connectBuffer=ByteBuffer.allocate(rawData.length + 16);
  connectBuffer.put(connectHeader);
  connectBuffer.put(rawData);
  connectBuffer.position(0);
  MessageFactory factory=new MessageFactory();
  factory.getFramer().pushBytes(connectBuffer.array());
  ConnectListener listener=Mockito.spy(new ConnectListener(){
    @Override public void onMessage(    Connect message){
      Assert.assertEquals(200,message.getKeepAlive());
      Assert.assertArrayEquals(rawData,message.getSyncRequest());
    }
  }
);
  factory.registerMessageListener(listener);
  factory.getFramer().pushBytes(connectBuffer.array());
  Mockito.verify(listener,Mockito.times(1)).onMessage(Mockito.any(Connect.class));
}
