{
  Assert.assertEquals(5,message.getMessageId());
  Assert.assertEquals(false,message.isZipped());
  Assert.assertEquals(false,message.isEncrypted());
  Assert.assertEquals(false,message.isRequest());
  Assert.assertNotNull(message.getOperationsServers());
  Assert.assertEquals(2,message.getOperationsServers().size());
  Map<String,OperationsServerRecord> records=message.getOperationsServers();
  Assert.assertNotNull(records.get("server1"));
  Assert.assertNotNull(records.get("server1").supportedChannelsList);
  Assert.assertNotNull(records.get("server1").name);
  Assert.assertEquals("server1",records.get("server1").name);
  Assert.assertEquals(BootstrapResponse.PublicKeyType.RSA_PKSC8,records.get("server1").publicKeyType);
  Assert.assertNotNull(records.get("server1").publicKey);
  final byte[] operationServer1PublicKey=new byte[]{(byte)0x00,0x01,0x02,0x03,0x00,0x01,0x02,0x03,0x00,0x01,0x02,0x03,0x00,0x01,0x02,0x03};
  Assert.assertArrayEquals(operationServer1PublicKey,records.get("server1").publicKey);
  Assert.assertEquals(10,records.get("server1").priority);
  Assert.assertEquals(3,records.get("server1").supportedChannelsList.size());
  Assert.assertNotNull(records.get("server1").supportedChannelsList.get(0).hostName);
  Assert.assertEquals("hostname1.example.com",records.get("server1").supportedChannelsList.get(0).hostName);
  Assert.assertEquals("hostname1.example.com",records.get("server1").supportedChannelsList.get(1).hostName);
  Assert.assertEquals("hostname1.example.com",records.get("server1").supportedChannelsList.get(2).hostName);
  Assert.assertEquals(BootstrapResponse.SupportedChannelType.HTTP,records.get("server1").supportedChannelsList.get(0).supportedChannelType);
  Assert.assertEquals(BootstrapResponse.SupportedChannelType.HTTPLP,records.get("server1").supportedChannelsList.get(1).supportedChannelType);
  Assert.assertEquals(BootstrapResponse.SupportedChannelType.KAATCP,records.get("server1").supportedChannelsList.get(2).supportedChannelType);
  Assert.assertEquals(1212,records.get("server1").supportedChannelsList.get(0).port);
  Assert.assertEquals(1213,records.get("server1").supportedChannelsList.get(1).port);
  Assert.assertEquals(1214,records.get("server1").supportedChannelsList.get(2).port);
  Assert.assertNotNull(records.get("server22"));
  Assert.assertNotNull(records.get("server22").supportedChannelsList);
  Assert.assertNotNull(records.get("server22").name);
  Assert.assertEquals("server22",records.get("server22").name);
  Assert.assertEquals(BootstrapResponse.PublicKeyType.RSA_PKSC8,records.get("server22").publicKeyType);
  Assert.assertNotNull(records.get("server22").publicKey);
  final byte[] operationServer2PublicKey=new byte[]{(byte)0x10,0x11,0x12,0x13,0x10,0x11,0x12,0x13,0x10,0x11,0x12,0x13,0x10,0x11,0x12,0x13};
  Assert.assertArrayEquals(operationServer2PublicKey,records.get("server22").publicKey);
  Assert.assertEquals(20,records.get("server22").priority);
  Assert.assertEquals(3,records.get("server22").supportedChannelsList.size());
  Assert.assertNotNull(records.get("server22").supportedChannelsList.get(0).hostName);
  Assert.assertEquals("hostname2.example.com",records.get("server22").supportedChannelsList.get(0).hostName);
  Assert.assertEquals("hostname2.example.com",records.get("server22").supportedChannelsList.get(1).hostName);
  Assert.assertEquals("hostname22.example.com",records.get("server22").supportedChannelsList.get(2).hostName);
  Assert.assertEquals(BootstrapResponse.SupportedChannelType.HTTP,records.get("server22").supportedChannelsList.get(0).supportedChannelType);
  Assert.assertEquals(BootstrapResponse.SupportedChannelType.HTTPLP,records.get("server22").supportedChannelsList.get(1).supportedChannelType);
  Assert.assertEquals(BootstrapResponse.SupportedChannelType.KAATCP,records.get("server22").supportedChannelsList.get(2).supportedChannelType);
  Assert.assertEquals(1212,records.get("server22").supportedChannelsList.get(0).port);
  Assert.assertEquals(1213,records.get("server22").supportedChannelsList.get(1).port);
  Assert.assertEquals(1214,records.get("server22").supportedChannelsList.get(2).port);
}
