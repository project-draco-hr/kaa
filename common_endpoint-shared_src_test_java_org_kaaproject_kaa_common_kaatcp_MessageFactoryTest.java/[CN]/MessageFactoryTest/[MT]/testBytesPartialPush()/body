{
  final byte syncRequest[]=new byte[]{(byte)0xF0,0x0D,0x00,0x06,'K','a','a','t','c','p',0x01,0x00,0x05,0x15,(byte)0xFF};
  final byte bootstrapResolve[]=new byte[]{(byte)0xF0,0x18,0x00,0x06,'K','a','a','t','c','p',0x01,0x00,0x05,0x21,'a','p','p','l','i','c','a','t','i','o','n','1'};
  final byte bootstrapResponse[]=new byte[]{(byte)-16,-88,2,0,6,75,97,97,116,99,112,1,0,5,32,0,0,0,2,0,0,0,-120,0,0,0,7,115,101,114,118,101,114,49,0,0,0,0,10,1,0,0,16,0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3,0,0,0,3,0,0,0,25,1,21,4,-68,104,111,115,116,110,97,109,101,49,46,101,120,97,109,112,108,101,46,99,111,109,0,0,0,0,0,0,25,2,21,4,-67,104,111,115,116,110,97,109,101,49,46,101,120,97,109,112,108,101,46,99,111,109,0,0,0,0,0,0,25,3,21,4,-66,104,111,115,116,110,97,109,101,49,46,101,120,97,109,112,108,101,46,99,111,109,0,0,0,0,0,0,-120,0,0,0,8,115,101,114,118,101,114,50,50,0,0,0,20,1,0,0,16,16,17,18,19,16,17,18,19,16,17,18,19,16,17,18,19,0,0,0,3,0,0,0,25,1,21,4,-68,104,111,115,116,110,97,109,101,50,46,101,120,97,109,112,108,101,46,99,111,109,0,0,0,0,0,0,25,2,21,4,-67,104,111,115,116,110,97,109,101,50,46,101,120,97,109,112,108,101,46,99,111,109,0,0,0,0,0,0,26,3,22,4,-66,104,111,115,116,110,97,109,101,50,50,46,101,120,97,109,112,108,101,46,99,111,109,0,0};
  int totalLength=syncRequest.length + bootstrapResolve.length + bootstrapResponse.length;
  ByteBuffer totalBuffer=ByteBuffer.allocate(totalLength);
  totalBuffer.put(syncRequest);
  totalBuffer.put(bootstrapResolve);
  totalBuffer.put(bootstrapResponse);
  totalBuffer.position(0);
  byte[] firstBuffer=new byte[syncRequest.length - 2];
  totalBuffer.get(firstBuffer);
  byte[] secondBuffer=new byte[bootstrapResolve.length + 4];
  totalBuffer.get(secondBuffer);
  byte[] thirdBuffer=new byte[bootstrapResponse.length - 2];
  totalBuffer.get(thirdBuffer);
  MessageFactory factory=new MessageFactory();
  BootstrapResponseListener bootstrapResponseListener=Mockito.spy(new BootstrapResponseListener(){
    @Override public void onMessage(    BootstrapResponse message){
      checkBootstrapResponse(message);
    }
  }
);
  factory.registerMessageListener(bootstrapResponseListener);
  SyncRequestListener syncRequestListener=Mockito.spy(new SyncRequestListener(){
    @Override public void onMessage(    SyncRequest message){
      Assert.assertEquals(1,message.getAvroObject().length);
      Assert.assertEquals(0xFF,message.getAvroObject()[0] & 0xFF);
      Assert.assertEquals(5,message.getMessageId());
      Assert.assertEquals(false,message.isZipped());
      Assert.assertEquals(true,message.isEncrypted());
      Assert.assertEquals(true,message.isRequest());
    }
  }
);
  factory.registerMessageListener(syncRequestListener);
  BootstrapResolveListener bootstrapResolveListener=Mockito.spy(new BootstrapResolveListener(){
    @Override public void onMessage(    BootstrapResolve message){
      Assert.assertEquals("application1",message.getApplicationToken());
      Assert.assertEquals(5,message.getMessageId());
      Assert.assertEquals(false,message.isZipped());
      Assert.assertEquals(false,message.isEncrypted());
      Assert.assertEquals(true,message.isRequest());
    }
  }
);
  factory.registerMessageListener(bootstrapResolveListener);
  int i=factory.getFramer().pushBytes(firstBuffer);
  Assert.assertEquals(firstBuffer.length,i);
  i=factory.getFramer().pushBytes(secondBuffer);
  Assert.assertEquals(secondBuffer.length,i);
  i=factory.getFramer().pushBytes(thirdBuffer);
  Assert.assertEquals(thirdBuffer.length,i);
  Mockito.verify(bootstrapResolveListener,Mockito.times(1)).onMessage(Mockito.any(BootstrapResolve.class));
  Mockito.verify(bootstrapResponseListener,Mockito.times(1)).onMessage(Mockito.any(BootstrapResponse.class));
  Mockito.verify(syncRequestListener,Mockito.times(1)).onMessage(Mockito.any(SyncRequest.class));
}
