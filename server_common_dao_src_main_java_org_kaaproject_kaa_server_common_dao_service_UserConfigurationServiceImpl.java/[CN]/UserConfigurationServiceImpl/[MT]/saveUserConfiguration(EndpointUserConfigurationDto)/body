{
  EndpointUserConfigurationDto userConfigurationDto=null;
  if (userConfig != null) {
    String userConfigBody=userConfig.getBody();
    if (isNotBlank(userConfigBody)) {
      String appToken=userConfig.getAppToken();
      ApplicationDto applicationDto=applicationService.findAppByApplicationToken(appToken);
      if (applicationDto != null) {
        int schemaVersion=userConfig.getSchemaVersion();
        ConfigurationSchemaDto schemaDto=configurationService.findConfSchemaByAppIdAndVersion(applicationDto.getId(),schemaVersion);
        if (schemaDto != null) {
          OverrideSchema overrideSchema=new OverrideSchema(schemaDto.getOverrideSchema());
          LOG.debug("Create default UUID validator with override schema: {}",overrideSchema.getRawSchema());
          UuidValidator<OverrideData> uuidValidator=new DefaultUuidValidator<>(overrideSchema,new OverrideDataFactory());
          GenericAvroConverter<GenericRecord> avroConverter=new GenericAvroConverter<>(overrideSchema.getRawSchema());
          try {
            GenericRecord configRecord=avroConverter.decodeJson(userConfigBody);
            KaaData<OverrideSchema> body=uuidValidator.validateUuidFields(configRecord,null);
            if (body != null) {
              userConfig.setBody(body.getRawData());
              userConfigurationDto=getDto(endpointUserConfigurationDao.save(userConfig));
            }
 else {
              LOG.warn("Validated endpoint user configuration body is empty");
            }
          }
 catch (          IOException e) {
            LOG.error("Invalid endpoint user configuration for override schema.",e);
          }
        }
 else {
          LOG.warn("Can't find configuration schema with version {} for endpoint user configuration.",schemaVersion);
        }
      }
 else {
        LOG.warn("Can't find application with token {} for endpoint user configuration.",appToken);
      }
    }
 else {
      LOG.warn("Invalid endpoint user configuration. Configuration body is empty");
    }
  }
  return userConfigurationDto;
}
