{
  if (configuration != null) {
    LOG.info("Init kafka log event dao...");
    this.configuration=configuration;
    this.topicName=configuration.getTopic();
    this.partitionCount=configuration.getPartitionCount();
    Properties kafkaProperties=new Properties();
    StringBuilder serverList=new StringBuilder();
    for (    KafkaServer server : configuration.getKafkaServers()) {
      serverList.append(server.getHost() + ":" + server.getPort()+ ",");
    }
    LOG.info("Init kafka cluster with property {}={}",ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,serverList);
    kafkaProperties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,serverList.toString());
    LOG.info("Init kafka cluster with property {}={}",ProducerConfig.ACKS_CONFIG,configuration.getKafkaAcknowledgement());
    kafkaProperties.put(ProducerConfig.ACKS_CONFIG,parseAcknowledgement(configuration.getKafkaAcknowledgement().name()));
    LOG.info("Init kafka cluster with property {}={}",ProducerConfig.BUFFER_MEMORY_CONFIG,configuration.getBufferMemorySize());
    kafkaProperties.put(ProducerConfig.BUFFER_MEMORY_CONFIG,configuration.getBufferMemorySize());
    LOG.info("Init kafka cluster with property {}={}",ProducerConfig.COMPRESSION_TYPE_CONFIG,configuration.getKafkaCompression());
    kafkaProperties.put(ProducerConfig.COMPRESSION_TYPE_CONFIG,configuration.getKafkaCompression().name().toLowerCase());
    LOG.info("Init kafka cluster with property {}={}",ProducerConfig.RETRIES_CONFIG,configuration.getRetries());
    kafkaProperties.put(ProducerConfig.RETRIES_CONFIG,configuration.getRetries());
    LOG.info("Init kafka cluster with property {}={}",ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,KEY_SERIALIZER);
    kafkaProperties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,KEY_SERIALIZER);
    LOG.info("Init kafka cluster with property {}={}",ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,VALUE_SERIALIZER);
    kafkaProperties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,VALUE_SERIALIZER);
    producer=new KafkaProducer<String,String>(kafkaProperties);
  }
}
