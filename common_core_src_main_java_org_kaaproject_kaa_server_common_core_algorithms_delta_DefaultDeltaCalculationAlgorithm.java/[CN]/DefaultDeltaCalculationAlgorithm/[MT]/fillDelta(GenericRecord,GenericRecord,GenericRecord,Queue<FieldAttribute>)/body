{
  boolean hasChanges=false;
  Set<String> resetFields=new HashSet<String>();
  Map<String,List<byte[]>> uuidsToRemove=new HashMap<String,List<byte[]>>();
  Schema oldSchema=oldRoot.getSchema();
  Schema newSchema=newRoot.getSchema();
  if (oldSchema.getField(UUID_FIELD) != null) {
    lastUuidDelta=new RecordTuple(oldRoot,newRoot);
    fieldQueue.clear();
  }
  RecordTuple currentUuidRecord=lastUuidDelta;
  for (  Field newField : newSchema.getFields()) {
    Object oldValue=oldRoot.get(newField.name());
    Object newValue=newRoot.get(newField.name());
    if (newValue instanceof List) {
      List<byte[]> uuids=new LinkedList<byte[]>();
      List<Object> oldArrayItems=(oldValue instanceof List) ? (List)oldValue : null;
      List<Object> newArrayItems=new LinkedList<Object>((List<Object>)newValue);
      if (!newArrayItems.isEmpty()) {
        if (newArrayItems.get(0) instanceof GenericRecord) {
          if (oldArrayItems != null && !oldArrayItems.isEmpty() && oldArrayItems.get(0) instanceof GenericRecord) {
            for (            Object oldItem : oldArrayItems) {
              GenericRecord oldItemRecord=(GenericRecord)oldItem;
              Schema oldItemSchema=oldItemRecord.getSchema();
              if (oldItemSchema.getField(UUID_FIELD) != null) {
                boolean isRecordExists=false;
                GenericFixed uuid=(GenericFixed)oldItemRecord.get(UUID_FIELD);
                Iterator it=newArrayItems.iterator();
                while (it.hasNext()) {
                  GenericRecord newItemRecord=(GenericRecord)it.next();
                  if (uuid.equals(newItemRecord.get(UUID_FIELD))) {
                    processDifferences(oldItemRecord,newItemRecord);
                    isRecordExists=true;
                    it.remove();
                    break;
                  }
                }
                if (!isRecordExists) {
                  GenericFixed uuidFixed=(GenericFixed)oldItemRecord.get(UUID_FIELD);
                  byte[] uuidRaw=uuidFixed.bytes();
                  uuids.add(uuidRaw);
                  hasChanges=true;
                }
              }
 else {
                boolean itemChanged=true;
                if (oldArrayItems.size() == newArrayItems.size()) {
                  Iterator it=newArrayItems.iterator();
                  while (it.hasNext()) {
                    GenericRecord newItemRecord=(GenericRecord)it.next();
                    if (newItemRecord.equals(oldItemRecord)) {
                      it.remove();
                      itemChanged=false;
                      break;
                    }
                  }
                }
                if (itemChanged) {
                  resetFields.add(newField.name());
                  newArrayItems=new LinkedList<Object>((List<Object>)newValue);
                  hasChanges=true;
                  break;
                }
              }
            }
          }
 else           if (oldArrayItems != null && !oldArrayItems.isEmpty()) {
            resetFields.add(newField.name());
          }
          if (!newArrayItems.isEmpty()) {
            Schema arraySchema=getArraySchema(delta,newField.name());
            GenericArray deltaArray=new GenericData.Array(newArrayItems.size(),arraySchema);
            for (            Object item : newArrayItems) {
              GenericContainer newItemRecord=(GenericContainer)item;
              addComplexItemToArray(newItemRecord,deltaArray);
            }
            delta.put(newField.name(),deltaArray);
            hasChanges=true;
          }
 else {
            putUnchanged(delta,newField.name());
          }
        }
 else {
          if (!newArrayItems.equals(oldArrayItems)) {
            if (oldArrayItems != null) {
              resetFields.add(newField.name());
            }
            Schema arraySchema=getArraySchema(delta,newField.name());
            GenericArray deltaArray=new GenericData.Array(arraySchema,newArrayItems);
            delta.put(newField.name(),deltaArray);
            hasChanges=true;
          }
 else {
            putUnchanged(delta,newField.name());
          }
        }
      }
 else       if (oldArrayItems == null) {
        delta.put(newField.name(),new GenericData.Array(0,getArraySchema(delta,newField.name())));
        hasChanges=true;
      }
 else       if (!oldArrayItems.isEmpty()) {
        resetFields.add(newField.name());
        hasChanges=true;
      }
 else {
        putUnchanged(delta,newField.name());
      }
      if (!uuids.isEmpty()) {
        if (oldArrayItems != null && uuids.size() == oldArrayItems.size()) {
          resetFields.add(newField.name());
        }
 else {
          uuidsToRemove.put(newField.name(),uuids);
        }
      }
    }
 else     if (newValue instanceof GenericContainer) {
      GenericContainer newRecordValue=(GenericContainer)newValue;
      GenericContainer oldRecordValue=(oldValue instanceof GenericContainer) ? (GenericContainer)oldValue : null;
      processComplexField(delta,newField.name(),newRecordValue,oldRecordValue,fieldQueue);
    }
 else     if ((newValue == null && oldValue != null) || (newValue != null && !newValue.equals(oldValue))) {
      delta.put(newField.name(),newValue);
      hasChanges=true;
    }
 else {
      putUnchanged(delta,newField.name());
    }
  }
  lastUuidDelta=currentUuidRecord;
  if (!uuidsToRemove.isEmpty() || !resetFields.isEmpty()) {
    GenericRecord arrayDelta=new GenericData.Record(getDeltaSchemaByFullName(getFullName(lastUuidDelta.getNewRecord())));
    GenericFixed uuid=(GenericFixed)lastUuidDelta.getNewRecord().get(UUID_FIELD);
    arrayDelta.put(UUID_FIELD,uuid);
    Queue<FieldAttribute> newFieldQueue=new LinkedList<FieldAttribute>(fieldQueue);
    fillDeltaArrayFields(arrayDelta,resetFields,uuidsToRemove,newFieldQueue);
    resultDelta.addDelta(arrayDelta);
  }
  return hasChanges;
}
