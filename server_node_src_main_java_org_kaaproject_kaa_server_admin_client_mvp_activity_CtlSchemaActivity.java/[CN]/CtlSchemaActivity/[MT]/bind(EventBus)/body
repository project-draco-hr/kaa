{
  if (create) {
    detailsView.getSchemaForm().setFormDataLoader(this);
  }
 else {
    registrations.add(detailsView.getVersion().addValueChangeHandler(new ValueChangeHandler<Integer>(){
      @Override public void onValueChange(      ValueChangeEvent<Integer> event){
        detailsView.getVersion().setValue(version);
        if (place.getScope() == CTLSchemaScopeDto.APPLICATION) {
          goTo(new CtlSchemaPlace(place.getMetaInfoId(),event.getValue(),place.getScope(),place.getApplicationId(),place.isEditable(),false));
        }
 else         if (place.getScope() == CTLSchemaScopeDto.TENANT) {
          goTo(new CtlSchemaPlace(place.getMetaInfoId(),event.getValue(),place.getScope(),place.getEcfId(),place.getEcfVersionId(),place.getEcfVersion(),place.isEditable(),false));
        }
      }
    }
));
    registrations.add(detailsView.getCreateNewSchemaVersionButton().addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent event){
        Integer version=detailsView.getVersion().getValue();
        CtlSchemaPlace newPlace=null;
        if (place.getScope() == CTLSchemaScopeDto.APPLICATION) {
          newPlace=new CtlSchemaPlace(place.getMetaInfoId(),version,place.getScope(),place.getApplicationId(),true,true);
        }
 else         if (place.getScope() == CTLSchemaScopeDto.TENANT) {
          newPlace=new CtlSchemaPlace(place.getMetaInfoId(),version,place.getScope(),place.getEcfId(),place.getEcfVersionId(),place.getEcfVersion(),true,true);
        }
        newPlace.setPreviousPlace(place);
        goTo(newPlace);
      }
    }
));
    registrations.add(detailsView.getUpdateSchemaScopeButton().addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent event){
        CTLSchemaMetaInfoDto metaInfo=entity.getMetaInfo();
        KaaAdmin.getDataSource().promoteScopeToTenant(metaInfo.getApplicationId(),metaInfo.getFqn(),new BusyAsyncCallback<CTLSchemaMetaInfoDto>(){
          @Override public void onFailureImpl(          Throwable caught){
            Utils.handleException(caught,detailsView);
          }
          @Override public void onSuccessImpl(          CTLSchemaMetaInfoDto result){
            CtlSchemaPlace place=null;
            if (CtlSchemaActivity.this.place.getScope() == CTLSchemaScopeDto.APPLICATION) {
              place=new CtlSchemaPlace(result.getId(),version,result.getScope(),CtlSchemaActivity.this.place.getApplicationId(),result.getScope() == CTLSchemaScopeDto.APPLICATION,false);
            }
 else             if (CtlSchemaActivity.this.place.getScope() == CTLSchemaScopeDto.TENANT) {
              place=new CtlSchemaPlace(result.getId(),version,result.getScope(),CtlSchemaActivity.this.place.getEcfId(),CtlSchemaActivity.this.place.getEcfVersionId(),CtlSchemaActivity.this.place.getEcfVersion(),result.getScope() == CTLSchemaScopeDto.TENANT,false);
            }
            goTo(place);
          }
        }
);
      }
    }
));
    registrations.add(detailsView.getDeleteSchemaVersionButton().addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent event){
        final Integer version=detailsView.getVersion().getValue();
        final String fqn=entity.getMetaInfo().getFqn();
        ConfirmDialog.ConfirmListener listener=new ConfirmDialog.ConfirmListener(){
          @Override public void onNo(){
          }
          @Override public void onYes(){
            KaaAdmin.getDataSource().deleteCTLSchemaByFqnVersionTenantIdAndApplicationId(fqn,version,entity.getMetaInfo().getTenantId(),place.getApplicationId(),new BusyAsyncCallback<Void>(){
              @Override public void onSuccessImpl(              Void result){
                List<Integer> versions=entity.getMetaInfo().getVersions();
                versions.remove(version);
                if (versions.isEmpty()) {
                  goTo(place.getPreviousPlace());
                }
 else {
                  if (place.getScope() == CTLSchemaScopeDto.APPLICATION) {
                    goTo(new CtlSchemaPlace(place.getMetaInfoId(),versions.get(versions.size() - 1),place.getScope(),place.getApplicationId(),true,false));
                  }
 else                   if (place.getScope() == CTLSchemaScopeDto.TENANT) {
                    goTo(new CtlSchemaPlace(place.getMetaInfoId(),versions.get(versions.size() - 1),place.getScope(),place.getEcfId(),place.getEcfVersionId(),place.getEcfVersion(),true,false));
                  }
                }
              }
              @Override public void onFailureImpl(              Throwable caught){
                Utils.handleException(caught,detailsView);
              }
            }
);
          }
        }
;
        ConfirmDialog dialog=new ConfirmDialog(listener,Utils.messages.deleteCommonTypeVersionTitle(),Utils.messages.deleteCommonTypeVersionQuestion(fqn,version.toString()));
        dialog.center();
        dialog.show();
      }
    }
));
  }
  super.bind(eventBus);
}
