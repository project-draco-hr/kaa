{
  Schema schema=TestAvroSchemas.getUnionSchema();
  RecordField field=FormAvroConverter.createRecordFieldFromSchema(schema);
  Assert.assertNotNull(field);
  Assert.assertNotNull(field.getValue());
  Assert.assertEquals(1,field.getValue().size());
  FormField formField=field.getValue().get(0);
  Assert.assertNotNull(formField);
  Assert.assertTrue(formField instanceof UnionField);
  UnionField unionField=(UnionField)formField;
  Assert.assertNull(unionField.getValue());
  Assert.assertNotNull(unionField.getAcceptableValues());
  Assert.assertEquals(2,unionField.getAcceptableValues().size());
  checkSingleFieldRecord(unionField.getAcceptableValues().get(0));
  checkSingleFieldRecord(unionField.getAcceptableValues().get(1));
  RecordField unionValue=(RecordField)unionField.getAcceptableValues().get(1).clone();
  StringField stringField=(StringField)unionValue.getValue().get(0);
  stringField.setValue("field value of union record");
  unionField.setValue(unionValue);
  GenericRecord record=FormAvroConverter.createGenericRecordFormRecordField(field,schema);
  Assert.assertNotNull(record);
  Object val=record.get("unionField");
  Assert.assertNotNull(val);
  Assert.assertTrue(val instanceof GenericRecord);
  GenericRecord unionValueRecord=(GenericRecord)val;
  val=unionValueRecord.get("test");
  Assert.assertNotNull(val);
  Assert.assertTrue(val instanceof String);
  Assert.assertEquals("field value of union record",(String)val);
  RecordField convertedField=FormAvroConverter.createRecordFieldFromGenericRecord(record);
  Assert.assertNotNull(convertedField);
  Assert.assertEquals(field,convertedField);
}
