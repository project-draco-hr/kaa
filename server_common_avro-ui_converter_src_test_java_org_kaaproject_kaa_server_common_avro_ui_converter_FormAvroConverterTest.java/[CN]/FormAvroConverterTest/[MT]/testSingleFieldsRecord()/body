{
  int fieldNum=0;
  Schema schema=TestAvroSchemas.getSingleFieldsSchema();
  RecordField field=FormAvroConverter.createRecordFieldFromSchema(schema);
  Assert.assertNotNull(field);
  Assert.assertNotNull(field.getValue());
  Assert.assertEquals(6,field.getValue().size());
  FormField formField=field.getValue().get(fieldNum++);
  Assert.assertTrue(formField instanceof StringField);
  Assert.assertEquals(1000,((StringField)formField).getMaxLength());
  Assert.assertEquals("testString",formField.getFieldName());
  Assert.assertEquals("Test string field",formField.getDisplayName());
  Assert.assertEquals("default string",((StringField)formField).getDefaultValue());
  Assert.assertEquals(InputType.PLAIN,((StringField)formField).getInputType());
  ((StringField)formField).setValue("new string");
  formField=field.getValue().get(fieldNum++);
  Assert.assertTrue(formField instanceof StringField);
  Assert.assertEquals(1000,((StringField)formField).getMaxLength());
  Assert.assertEquals("testPasswordString",formField.getFieldName());
  Assert.assertEquals("Test password string field",formField.getDisplayName());
  Assert.assertEquals("default password",((StringField)formField).getDefaultValue());
  Assert.assertEquals(InputType.PASSWORD,((StringField)formField).getInputType());
  formField=field.getValue().get(fieldNum++);
  Assert.assertTrue(formField instanceof IntegerField);
  Assert.assertEquals(1000,((IntegerField)formField).getMaxLength());
  Assert.assertEquals("testInteger",formField.getFieldName());
  Assert.assertEquals("Test integer field",formField.getDisplayName());
  Assert.assertEquals(20,((IntegerField)formField).getDefaultValue().intValue());
  ((IntegerField)formField).setValue(25);
  formField=field.getValue().get(fieldNum++);
  Assert.assertTrue(formField instanceof LongField);
  Assert.assertEquals(1000,((LongField)formField).getMaxLength());
  Assert.assertEquals("testLong",formField.getFieldName());
  Assert.assertEquals("Test long field",formField.getDisplayName());
  Assert.assertEquals(30,((LongField)formField).getDefaultValue().longValue());
  ((LongField)formField).setValue(35l);
  formField=field.getValue().get(fieldNum++);
  Assert.assertTrue(formField instanceof BooleanField);
  Assert.assertEquals("testBoolean",formField.getFieldName());
  Assert.assertEquals("Test boolean field",formField.getDisplayName());
  Assert.assertEquals(true,((BooleanField)formField).getDefaultValue().booleanValue());
  ((BooleanField)formField).setValue(false);
  formField=field.getValue().get(fieldNum++);
  Assert.assertTrue(formField instanceof EnumField);
  Assert.assertEquals("testEnum",formField.getFieldName());
  Assert.assertEquals("Test enum field",formField.getDisplayName());
  Assert.assertEquals(Arrays.asList(new FormEnum("VALUE_ONE","Value One"),new FormEnum("VALUE_TWO","Value Two"),new FormEnum("VALUE_THREE","Value Three")),((EnumField)formField).getEnumValues());
  Assert.assertEquals("VALUE_TWO",((EnumField)formField).getDefaultValue().getEnumSymbol());
  ((EnumField)formField).setValue(new FormEnum("VALUE_THREE","Value Three"));
  GenericRecord record=FormAvroConverter.createGenericRecordFormRecordField(field,schema);
  Assert.assertNotNull(record);
  Object val=record.get("testString");
  Assert.assertNotNull(val);
  Assert.assertTrue(val instanceof String);
  Assert.assertEquals("new string",(String)val);
  val=record.get("testInteger");
  Assert.assertNotNull(val);
  Assert.assertTrue(val instanceof Integer);
  Assert.assertEquals(25,((Integer)val).intValue());
  val=record.get("testLong");
  Assert.assertNotNull(val);
  Assert.assertTrue(val instanceof Long);
  Assert.assertEquals(35l,((Long)val).longValue());
  val=record.get("testBoolean");
  Assert.assertNotNull(val);
  Assert.assertTrue(val instanceof Boolean);
  Assert.assertEquals(false,((Boolean)val).booleanValue());
  val=record.get("testEnum");
  Assert.assertNotNull(val);
  Assert.assertTrue(val instanceof EnumSymbol);
  Assert.assertEquals("VALUE_THREE",((EnumSymbol)val).toString());
  RecordField convertedField=FormAvroConverter.createRecordFieldFromGenericRecord(record);
  Assert.assertNotNull(convertedField);
  Assert.assertEquals(field,convertedField);
}
