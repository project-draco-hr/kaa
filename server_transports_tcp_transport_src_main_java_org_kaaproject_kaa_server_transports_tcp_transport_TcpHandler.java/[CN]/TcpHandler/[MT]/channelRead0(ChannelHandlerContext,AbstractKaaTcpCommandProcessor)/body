{
  MqttFrame frame=msg.getRequest();
  LOG.trace("[{}] Processing {}",uuid,frame);
  if (frame.getMessageType() == MessageType.CONNECT) {
    ChannelFuture closeFuture=ctx.channel().closeFuture();
    closeFuture.addListener(new GenericFutureListener<Future<? super Void>>(){
      @Override public void operationComplete(      Future<? super Void> future) throws Exception {
        if (!sessionDisconnected) {
          handler.process(new NettyTcpDisconnectMessage(session));
          sessionDisconnected=true;
          LOG.trace("[{}] Channel is closed - sending disconnect");
        }
 else {
          LOG.trace("[{}] Channel is closed and disconnect is already sent");
        }
      }
    }
);
    if (session == null) {
      handler.process(new NettyTcpConnectMessage(uuid,new NettyChannelContext(ctx),(Connect)frame,ChannelType.ASYNC,this,connectResponseConverter,connectErrorConverter));
    }
 else {
      LOG.warn("[{}] Ignoring duplicate {} message ",uuid,MessageType.CONNECT);
    }
  }
 else {
    if (session != null) {
switch (frame.getMessageType()) {
case KAASYNC:
        if (((KaaSync)frame).getKaaSyncMessageType() == KaaSyncMessageType.SYNC) {
          handler.process(new NettyTcpSyncMessage((SyncRequest)frame,session,syncResponseConverter,syncErrorConverter));
        }
      break;
case PINGREQ:
    handler.process(new NettyTcpPingMessage(session));
  break;
case DISCONNECT:
sessionDisconnected=true;
handler.process(new NettyTcpDisconnectMessage(session));
break;
default :
break;
}
}
 else {
LOG.warn("[{}] Ignoring {} message due to incomplete CONNECT sequence",uuid,frame.getMessageType());
}
}
}
