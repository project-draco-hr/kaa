{
  UUID channelId=UUID.randomUUID();
  ChannelContext ctx=Mockito.mock(ChannelContext.class);
  ChannelType channelType=ChannelType.ASYNC;
  CipherPair sessionKey=Mockito.mock(CipherPair.class);
  EndpointObjectHash key=EndpointObjectHash.fromSHA1("key");
  String applicationToken="AppToken";
  int keepAlive=100;
  SessionInfo session=new SessionInfo(channelId,Constants.KAA_PLATFORM_PROTOCOL_AVRO_ID,ctx,channelType,sessionKey,key,applicationToken,keepAlive,true);
  Connect command=new Connect(keepAlive,Constants.KAA_PLATFORM_PROTOCOL_AVRO_ID,"aesSessionKey".getBytes(),"syncRequest".getBytes(),"signature".getBytes());
  SessionCreateListener listener=Mockito.mock(SessionCreateListener.class);
  MessageBuilder responseBuilder=Mockito.mock(MessageBuilder.class);
  ErrorBuilder errorBuilder=Mockito.mock(ErrorBuilder.class);
  NettyTcpConnectMessage message=new NettyTcpConnectMessage(channelId,ctx,command,channelType,listener,responseBuilder,errorBuilder);
  Assert.assertEquals(channelId,message.getChannelUuid());
  Assert.assertEquals(channelType,message.getChannelType());
  Assert.assertEquals(ctx,message.getChannelContext());
  Assert.assertEquals(responseBuilder,message.getMessageBuilder());
  Assert.assertEquals(errorBuilder,message.getErrorBuilder());
  Assert.assertArrayEquals("syncRequest".getBytes(),message.getEncodedMessageData());
  Assert.assertArrayEquals("aesSessionKey".getBytes(),message.getEncodedSessionKey());
  Assert.assertArrayEquals("signature".getBytes(),message.getSessionKeySignature());
  message.onSessionCreated(session);
  Mockito.verify(listener).onSessionCreated(session);
  Assert.assertNotNull(message.toString());
}
