{
  EndpointProfileDto profile=new EndpointProfileDto();
  profile.setEndpointKeyHash(ENDPOINT_KEY_HASH_BYTES);
  List<String> subscriptions=new ArrayList<>();
  subscriptions.add(T1);
  subscriptions.add(T3);
  profile.setSubscriptions(subscriptions);
  List<EndpointGroupStateDto> groupStates=new ArrayList<>();
  groupStates.add(new EndpointGroupStateDto(EG1,PF1,CF1));
  groupStates.add(new EndpointGroupStateDto(EG2,PF2,null));
  groupStates.add(new EndpointGroupStateDto(EG3,PF2,null));
  profile.setGroupState(groupStates);
  EndpointGroupDto eg1=new EndpointGroupDto();
  eg1.setId(EG1);
  eg1.setTopics(Collections.singletonList(T1));
  EndpointGroupDto eg2=new EndpointGroupDto();
  eg2.setId(EG2);
  List<String> topicIds=new ArrayList<>();
  topicIds.add(T3);
  topicIds.add(T5);
  eg2.setTopics(topicIds);
  EndpointGroupDto eg3=new EndpointGroupDto();
  eg3.setId(EG3);
  TopicDto t1=new TopicDto();
  t1.setId(T1);
  t1.setName(T1);
  t1.setType(TopicTypeDto.MANDATORY);
  TopicDto t3=new TopicDto();
  t3.setId(T3);
  t3.setName(T3);
  t3.setType(TopicTypeDto.OPTIONAL);
  TopicDto t5=new TopicDto();
  t5.setId(T5);
  t5.setName(T5);
  t5.setType(TopicTypeDto.MANDATORY);
  Mockito.when(cacheService.getEndpointGroupById(EG1)).thenReturn(eg1);
  Mockito.when(cacheService.getEndpointGroupById(EG2)).thenReturn(eg2);
  Mockito.when(cacheService.getEndpointGroupById(EG3)).thenReturn(eg3);
  Mockito.when(cacheService.getTopicById(T1)).thenReturn(t1);
  Mockito.when(cacheService.getTopicById(T3)).thenReturn(t3);
  Mockito.when(cacheService.getTopicById(T5)).thenReturn(t5);
  TopicListCacheEntry cacheEntry=notificationDeltaService.getTopicListHash("APP_TOKEN","ENDPOINT_ID",profile);
  Assert.assertNotNull(cacheEntry);
  Assert.assertNotNull(cacheEntry.getTopics());
  Assert.assertEquals(130150,cacheEntry.getSimpleHash());
  Assert.assertEquals(3,cacheEntry.getTopics().size());
}
