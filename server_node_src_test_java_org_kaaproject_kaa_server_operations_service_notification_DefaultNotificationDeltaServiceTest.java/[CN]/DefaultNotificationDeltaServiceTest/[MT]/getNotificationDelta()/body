{
  EndpointProfileDto profile=new EndpointProfileDto();
  profile.setEndpointKeyHash(ENDPOINT_KEY_HASH_BYTES);
  List<String> subscriptions=new ArrayList<>();
  subscriptions.add(T1);
  subscriptions.add(T3);
  profile.setSubscriptions(subscriptions);
  List<SubscriptionCommand> subscriptionCommands=new ArrayList<>();
  subscriptionCommands.add(new SubscriptionCommand(T1,SubscriptionCommandType.ADD));
  subscriptionCommands.add(new SubscriptionCommand(T2,SubscriptionCommandType.ADD));
  subscriptionCommands.add(new SubscriptionCommand(T3,SubscriptionCommandType.REMOVE));
  subscriptionCommands.add(new SubscriptionCommand(T4,SubscriptionCommandType.REMOVE));
  List<String> acceptedUnicastNotifications=new ArrayList<>();
  acceptedUnicastNotifications.add(PNF_ID_1);
  List<TopicState> topicStates=new ArrayList<>();
  topicStates.add(new TopicState(T1,42));
  topicStates.add(new TopicState(T3,1));
  HistoryDelta historyDelta=new HistoryDelta();
  historyDelta.setAllChanged();
  List<EndpointGroupStateDto> history=new ArrayList<>();
  history.add(new EndpointGroupStateDto(EG1,PF1,CF1));
  history.add(new EndpointGroupStateDto(EG2,PF2,null));
  history.add(new EndpointGroupStateDto(EG3,PF2,null));
  historyDelta.setEndpointGroupStates(history);
  EndpointGroupDto eg1=new EndpointGroupDto();
  eg1.setId(EG1);
  eg1.setTopics(Collections.singletonList(T1));
  EndpointGroupDto eg2=new EndpointGroupDto();
  eg2.setId(EG2);
  List<String> topicIds=new ArrayList<>();
  topicIds.add(T3);
  topicIds.add(T5);
  eg2.setTopics(topicIds);
  EndpointGroupDto eg3=new EndpointGroupDto();
  eg3.setId(EG3);
  TopicDto t1=new TopicDto();
  t1.setId(T1);
  t1.setName(T1);
  t1.setType(TopicTypeDto.MANDATORY);
  TopicDto t3=new TopicDto();
  t3.setId(T3);
  t3.setName(T3);
  t3.setType(TopicTypeDto.OPTIONAL);
  TopicDto t5=new TopicDto();
  t5.setId(T5);
  t5.setName(T5);
  t5.setType(TopicTypeDto.MANDATORY);
  Mockito.when(cacheService.getEndpointGroupById(EG1)).thenReturn(eg1);
  Mockito.when(cacheService.getEndpointGroupById(EG2)).thenReturn(eg2);
  Mockito.when(cacheService.getEndpointGroupById(EG3)).thenReturn(eg3);
  Mockito.when(cacheService.getTopicById(T1)).thenReturn(t1);
  Mockito.when(cacheService.getTopicById(T3)).thenReturn(t3);
  Mockito.when(cacheService.getTopicById(T5)).thenReturn(t5);
  Mockito.when(endpointService.findEndpointGroupById(EG1)).thenReturn(eg1);
  Mockito.when(endpointService.findEndpointGroupById(EG2)).thenReturn(eg2);
  Mockito.when(endpointService.findEndpointGroupById(EG3)).thenReturn(eg3);
  Mockito.when(topicService.findTopicById(T1)).thenReturn(t1);
  Mockito.when(topicService.findTopicById(T3)).thenReturn(t3);
  Mockito.when(topicService.findTopicById(T5)).thenReturn(t5);
  NotificationDto t1Nf43=new NotificationDto();
  t1Nf43.setId(T1NF43);
  t1Nf43.setSecNum(43);
  t1Nf43.setExpiredAt(new Date(System.currentTimeMillis() + TimeUnit.DAYS.toMillis(7)));
  Mockito.when(notificationService.findNotificationsByTopicIdAndVersionAndStartSecNum(T1,42,0,0)).thenReturn(Collections.singletonList(t1Nf43));
  EndpointNotificationDto pnf2=new EndpointNotificationDto();
  NotificationDto nfDto=new NotificationDto();
  pnf2.setId(PNF_ID_2);
  pnf2.setNotificationDto(nfDto);
  nfDto.setExpiredAt(new Date(System.currentTimeMillis() + TimeUnit.DAYS.toMillis(7)));
  Mockito.when(notificationService.findUnicastNotificationsByKeyHash(ENDPOINT_KEY_HASH_BYTES)).thenReturn(Collections.singletonList(pnf2));
  GetNotificationRequest request=new GetNotificationRequest(profile,subscriptionCommands,acceptedUnicastNotifications,topicStates);
  GetNotificationResponse response=notificationDeltaService.getNotificationDelta(request,historyDelta);
  Mockito.verify(cacheService).getEndpointGroupById(EG1);
  Mockito.verify(cacheService).getEndpointGroupById(EG2);
  Mockito.verify(cacheService).getEndpointGroupById(EG3);
  Mockito.verify(cacheService).getTopicById(T1);
  Mockito.verify(cacheService).getTopicById(T3);
  Mockito.verify(cacheService).getTopicById(T5);
  Mockito.verify(notificationService).findNotificationsByTopicIdAndVersionAndStartSecNum(T1,42,0,0);
  Mockito.verify(notificationService).findNotificationsByTopicIdAndVersionAndStartSecNum(T2,0,0,0);
  Mockito.verify(notificationService).findNotificationsByTopicIdAndVersionAndStartSecNum(T5,0,0,0);
  Mockito.verify(notificationService).removeUnicastNotificationById(PNF_ID_1);
  Assert.assertNotNull(response);
  Assert.assertNotNull(response.getNotifications());
  Assert.assertEquals(2,response.getNotifications().size());
  Assert.assertEquals(T1NF43,response.getNotifications().get(0).getId());
  Assert.assertEquals(PNF_ID_2,response.getNotifications().get(1).getId());
  Assert.assertNotNull(response.getSubscriptionStates());
  Assert.assertEquals(3,response.getSubscriptionStates().size());
  Assert.assertEquals(new Integer(43),response.getSubscriptionStates().get(T1));
  Assert.assertEquals(new Integer(0),response.getSubscriptionStates().get(T2));
  Assert.assertEquals(new Integer(0),response.getSubscriptionStates().get(T5));
  Assert.assertNotNull(response.getTopicList());
  Assert.assertEquals(3,response.getTopicList().size());
}
