{
  this.context=context;
  this.stateListener=listener;
  if (context.getProperties() != null) {
    this.properties=context.getProperties();
  }
 else {
    this.properties=new KaaClientProperties(context.getBase64());
  }
  Map<TransportProtocolId,List<TransportConnectionInfo>> bootstrapServers=this.properties.getBootstrapServers();
  if (bootstrapServers == null || bootstrapServers.isEmpty()) {
    throw new RuntimeException("Unable to obtain list of bootstrap servers.");
  }
  for (  Map.Entry<TransportProtocolId,List<TransportConnectionInfo>> cursor : bootstrapServers.entrySet()) {
    Collections.shuffle(cursor.getValue());
  }
  kaaClientState=new KaaClientPropertiesState(context.createPersistentStorage(),context.getBase64(),this.properties);
  BootstrapTransport bootstrapTransport=new DefaultBootstrapTransport(this.properties.getApplicationToken());
  ProfileTransport profileTransport=new DefaultProfileTransport();
  EventTransport eventTransport=new DefaultEventTransport(kaaClientState);
  NotificationTransport notificationTransport=new DefaultNotificationTransport();
  ConfigurationTransport configurationTransport=new DefaultConfigurationTransport();
  UserTransport userTransport=new DefaultUserTransport();
  RedirectionTransport redirectionTransport=new DefaultRedirectionTransport();
  LogTransport logTransport=new DefaultLogTransport();
  operationsDataProcessor.setConfigurationTransport(configurationTransport);
  operationsDataProcessor.setEventTransport(eventTransport);
  operationsDataProcessor.setMetaDataTransport(metaDataTransport);
  operationsDataProcessor.setNotificationTransport(notificationTransport);
  operationsDataProcessor.setProfileTransport(profileTransport);
  operationsDataProcessor.setRedirectionTransport(redirectionTransport);
  operationsDataProcessor.setUserTransport(userTransport);
  operationsDataProcessor.setLogTransport(logTransport);
  bootstrapDataProcessor.setBootstrapTransport(bootstrapTransport);
  profileManager=new DefaultProfileManager(profileTransport);
  bootstrapManager=new DefaultBootstrapManager(bootstrapTransport);
  notificationManager=new DefaultNotificationManager(kaaClientState,context.getExecutorContext(),notificationTransport);
  eventManager=new DefaultEventManager(kaaClientState,context.getExecutorContext(),eventTransport);
  eventFamilyFactory=new EventFamilyFactory(eventManager,context.getExecutorContext());
  endpointRegistrationManager=new DefaultEndpointRegistrationManager(kaaClientState,context.getExecutorContext(),userTransport,profileTransport);
  channelManager=new DefaultChannelManager(bootstrapManager,bootstrapServers);
  channelManager.setConnectivityChecker(context.createConnectivityChecker());
  logCollector=new DefaultLogCollector(logTransport,context.getExecutorContext(),channelManager);
  KaaDataChannel bootstrapChannel=new DefaultBootstrapChannel(this,kaaClientState);
  bootstrapChannel.setMultiplexer(bootstrapDataProcessor);
  bootstrapChannel.setDemultiplexer(bootstrapDataProcessor);
  channelManager.addChannel(bootstrapChannel);
  KaaDataChannel operationsChannel=new DefaultOperationTcpChannel(kaaClientState,channelManager);
  operationsChannel.setMultiplexer(operationsDataProcessor);
  operationsChannel.setDemultiplexer(operationsDataProcessor);
  channelManager.addChannel(operationsChannel);
  bootstrapManager.setChannelManager(channelManager);
  publicKeyHash=EndpointObjectHash.fromSHA1(kaaClientState.getPublicKey().getEncoded());
  metaDataTransport.setClientProperties(this.properties);
  metaDataTransport.setClientState(kaaClientState);
  metaDataTransport.setEndpointPublicKeyhash(publicKeyHash);
  metaDataTransport.setTimeout(LONG_POLL_TIMEOUT);
  bootstrapTransport.setBootstrapManager(bootstrapManager);
  configurationManager=new ResyncConfigurationManager(properties);
  initTransport(bootstrapTransport);
  profileTransport.setProfileManager(profileManager);
  profileTransport.setClientProperties(this.properties);
  initTransport(profileTransport);
  eventTransport.setEventManager(eventManager);
  initTransport(eventTransport);
  notificationTransport.setNotificationProcessor(notificationManager);
  initTransport(notificationTransport);
  configurationTransport.setConfigurationHashContainer(configurationManager.getConfigurationHashContainer());
  configurationTransport.setConfigurationProcessor(configurationManager.getConfigurationProcessor());
  configurationTransport.setResyncOnly(true);
  initTransport(configurationTransport);
  userTransport.setEndpointRegistrationProcessor(endpointRegistrationManager);
  initTransport(userTransport);
  redirectionTransport.setBootstrapManager(bootstrapManager);
  initTransport(logTransport);
  logTransport.setLogProcessor(logCollector);
}
