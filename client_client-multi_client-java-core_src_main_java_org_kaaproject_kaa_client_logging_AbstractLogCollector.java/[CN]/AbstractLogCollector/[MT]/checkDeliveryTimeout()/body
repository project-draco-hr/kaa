{
  long currentTime=System.currentTimeMillis();
  LOG.debug("Checking delivery timeout using time {}",currentTime);
  boolean isTimeout=false;
  List<Integer> toRemove=new ArrayList<Integer>();
  for (  Map.Entry<Integer,Long> logRequest : timeoutMap.entrySet()) {
    LOG.info("processing timeoutMap pair: {}, {}",logRequest.getKey(),logRequest.getValue());
    if (currentTime >= logRequest.getValue()) {
      storage.notifyUploadFailed(logRequest.getKey());
      toRemove.add(logRequest.getKey());
      isTimeout=true;
    }
  }
  timeoutMap.entrySet().removeAll(toRemove);
  if (isTimeout) {
    LOG.info("Log delivery timeout detected.");
    final LogFailoverCommand controller=this.controller;
    executorContext.getCallbackExecutor().execute(new Runnable(){
      @Override public void run(){
        strategy.onTimeout(controller);
      }
    }
);
  }
  return isTimeout;
}
