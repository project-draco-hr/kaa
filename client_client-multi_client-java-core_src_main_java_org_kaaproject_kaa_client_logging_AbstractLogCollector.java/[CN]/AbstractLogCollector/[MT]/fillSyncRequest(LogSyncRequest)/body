{
  LogBlock group=null;
  if (storage.getStatus().getRecordCount() == 0) {
    LOG.debug("Log storage is empty");
    return;
  }
  group=storage.getRecordBlock(strategy.getBatchSize(),strategy.getBatchCount());
  if (group != null) {
    List<LogRecord> recordList=group.getRecords();
    if (!recordList.isEmpty()) {
      LOG.trace("Sending {} log records",recordList.size());
      List<LogEntry> logs=new LinkedList<>();
      for (      LogRecord record : recordList) {
        logs.add(new LogEntry(ByteBuffer.wrap(record.getData())));
      }
      request.setRequestId(group.getBlockId());
      request.setLogEntries(logs);
      final LogBlock timeoutGroup=group;
      Future<?> timeoutFuture=executorContext.getScheduledExecutor().schedule(new Runnable(){
        @Override public void run(){
          if (!Thread.currentThread().isInterrupted()) {
            checkDeliveryTimeout(timeoutGroup.getBlockId());
          }
 else {
            LOG.debug("Timeout check worker for block: {} was interrupted",timeoutGroup.getBlockId());
          }
        }
      }
,strategy.getTimeout(),TimeUnit.SECONDS);
      LOG.info("Adding following bucket id [{}] for timeout tracking",group.getBlockId());
      timeouts.put(group.getBlockId(),timeoutFuture);
    }
  }
 else {
    LOG.warn("Log group is null: log group size is too small");
  }
}
