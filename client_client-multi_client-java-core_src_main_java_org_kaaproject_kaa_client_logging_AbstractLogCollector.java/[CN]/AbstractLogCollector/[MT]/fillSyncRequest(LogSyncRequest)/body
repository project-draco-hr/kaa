{
  if (!isUploadAllowed()) {
    return;
  }
  LogBucket bucket=storage.getNextBucket();
  if (bucket == null || bucket.getRecords().isEmpty()) {
    LOG.warn("No logs to send");
    return;
  }
  List<LogRecord> recordList=bucket.getRecords();
  LOG.trace("Sending {} log records",recordList.size());
  List<LogEntry> logs=new LinkedList<>();
  for (  LogRecord record : recordList) {
    logs.add(new LogEntry(ByteBuffer.wrap(record.getData())));
  }
  request.setRequestId(bucket.getBucketId());
  request.setLogEntries(logs);
  final int bucketId=bucket.getBucketId();
  Future<?> timeoutFuture=executorContext.getScheduledExecutor().schedule(new Runnable(){
    @Override public void run(){
      if (!Thread.currentThread().isInterrupted()) {
        checkDeliveryTimeout(bucketId);
      }
 else {
        LOG.debug("Timeout check worker for log bucket: {} was interrupted",bucketId);
      }
    }
  }
,strategy.getTimeout(),TimeUnit.SECONDS);
  LOG.info("Adding following bucket id [{}] for timeout tracking",bucket.getBucketId());
  timeouts.put(bucket.getBucketId(),timeoutFuture);
}
