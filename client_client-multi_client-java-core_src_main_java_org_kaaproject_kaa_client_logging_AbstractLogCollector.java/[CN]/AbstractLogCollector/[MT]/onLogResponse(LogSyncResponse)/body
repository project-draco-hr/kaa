{
  if (logSyncResponse.getDeliveryStatuses() != null) {
    boolean isAlreadyScheduled=false;
    for (    LogDeliveryStatus response : logSyncResponse.getDeliveryStatuses()) {
      final int requestId=response.getRequestId();
      final BucketInfo bucketInfo=bucketInfoMap.get(requestId);
      bucketInfoMap.remove(requestId);
      if (response.getResult() == SyncResponseResultType.SUCCESS) {
        storage.removeRecordBlock(response.getRequestId());
        executorContext.getCallbackExecutor().execute(new Runnable(){
          @Override public void run(){
            if (logDeliveryListener != null) {
              logDeliveryListener.onLogDeliverySuccess(bucketInfo);
            }
            futureMap.get(requestId).setValue(bucketInfo);
          }
        }
);
      }
 else {
        storage.notifyUploadFailed(response.getRequestId());
        final LogDeliveryErrorCode errorCode=response.getErrorCode();
        final LogFailoverCommand controller=this.controller;
        executorContext.getCallbackExecutor().execute(new Runnable(){
          @Override public void run(){
            strategy.onFailure(controller,errorCode);
            if (logDeliveryListener != null) {
              logDeliveryListener.onLogDeliveryFailure(bucketInfo);
            }
          }
        }
);
        isAlreadyScheduled=true;
      }
      LOG.info("Removing bucket id from timeouts: {}",response.getRequestId());
      Future<?> timeoutFuture=timeouts.remove(response.getRequestId());
      timeoutFuture.cancel(true);
    }
    if (!isAlreadyScheduled) {
      processUploadDecision(strategy.isUploadNeeded(storage.getStatus()));
    }
  }
}
