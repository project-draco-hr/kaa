{
  int maxSeqNum=topicLastSeqNumDao.getLastTopicSequenceNumber(topicId);
  int startBatchNum=seqNum / MAX_BATCH_SIZE;
  int endBatchNum=maxSeqNum / MAX_BATCH_SIZE;
  CassandraNfSchemaVersionType[] inArray;
  if (startBatchNum >= endBatchNum) {
    inArray=new CassandraNfSchemaVersionType[2];
    generateSchemaVersionArray(inArray,sysNfVersion,userNfVersion,startBatchNum,0);
  }
 else {
    int batchCount=endBatchNum - startBatchNum + 1;
    inArray=new CassandraNfSchemaVersionType[batchCount * 2];
    for (int i=0; i < batchCount * 2; i+=2) {
      generateSchemaVersionArray(inArray,sysNfVersion,userNfVersion,startBatchNum++,i);
    }
  }
  Where query=select().from(getColumnFamilyName()).where(eq(NF_TOPIC_ID_PROPERTY,topicId)).and(in(NF_SCHEMA_VER_USER_TYPE_NAME,inArray)).and(QueryBuilder.gt(NF_SEQ_NUM_PROPERTY,seqNum));
  List<CassandraNotification> resultList=findListByStatement(query);
  LOG.trace("Execute query {}",query);
  if (LOG.isTraceEnabled()) {
    LOG.trace("Found notifications {} by topic id {}, seqNum {}, sysVer {}, userVer {} ",Arrays.toString(resultList.toArray()),topicId,seqNum,sysNfVersion,userNfVersion);
  }
  return resultList;
}
