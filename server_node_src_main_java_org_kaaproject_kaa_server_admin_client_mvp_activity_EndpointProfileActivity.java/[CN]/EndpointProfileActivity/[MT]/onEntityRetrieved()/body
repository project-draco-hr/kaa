{
  detailsView.reset();
  final EndpointProfileDto profileDto=entity.getEndpointProfileDto();
  EndpointUserDto userDto=entity.getEndpointUserDto();
  final ProfileSchemaDto profileSchemaDto=entity.getProfileSchemaDto();
  final ServerProfileSchemaDto serverProfileSchemaDto=entity.getServerProfileSchemaDto();
  detailsView.getKeyHash().setValue(BaseEncoding.base64().encode(profileDto.getEndpointKeyHash()));
  if (userDto != null) {
    detailsView.getUserID().setValue(userDto.getId());
    detailsView.getUserExternalID().setValue(userDto.getExternalId());
    for (    Widget widget : detailsView.getUserInfoList()) {
      widget.setVisible(true);
    }
  }
 else {
    for (    Widget widget : detailsView.getUserInfoList()) {
      widget.setVisible(false);
    }
  }
  detailsView.getEndpointProfSchemaName().setText(profileSchemaDto.getName());
  registrations.add(detailsView.getEndpointProfSchemaName().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent clickEvent){
      ProfileSchemaPlace endpointProfSchemaPlace=new ProfileSchemaPlace(place.getApplicationId(),profileSchemaDto.getId());
      endpointProfSchemaPlace.setPreviousPlace(place);
      goTo(endpointProfSchemaPlace);
    }
  }
));
  final RecordField endpointProfileRecord=entity.getEndpointProfileRecord();
  if (endpointProfileRecord != null) {
    detailsView.getEndpointProfForm().reset();
    detailsView.getEndpointProfForm().setValue(endpointProfileRecord);
  }
  RecordField serverProfileRecord=entity.getServerProfileRecord();
  detailsView.getServerProfForm().reset();
  detailsView.getServerProfForm().setValue(serverProfileRecord);
  detailsView.getServerProfForm().setReadOnly(true);
  detailsView.getServerProfEditor().setValue(serverProfileRecord);
  if (serverProfileRecord != null && serverProfileSchemaDto.getId() != null) {
    detailsView.getAddServerSchemaButton().setEnabled(false);
    detailsView.getEditButton().setEnabled(true);
    detailsView.getDeleteButton().setEnabled(true);
  }
 else {
    detailsView.getAddServerSchemaButton().setEnabled(true);
    detailsView.getDeleteButton().setEnabled(false);
    detailsView.getEditButton().setEnabled(false);
  }
  if (serverProfileSchemaDto != null) {
    String serverProfName=serverProfileSchemaDto.getName();
    detailsView.getServerProfSchemaName().setText(serverProfName != null ? serverProfName : "");
    serverProfNameClickHandler=detailsView.getServerProfSchemaName().addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent clickEvent){
        ServerProfileSchemaPlace serverProfSchemaPlace=new ServerProfileSchemaPlace(place.getApplicationId(),serverProfileSchemaDto.getId());
        serverProfSchemaPlace.setPreviousPlace(place);
        goTo(serverProfSchemaPlace);
      }
    }
);
    registrations.add(serverProfNameClickHandler);
  }
  registrations.add(detailsView.getServerProfEditor().addValueChangeHandler(new ValueChangeHandler<RecordField>(){
    @Override public void onValueChange(    ValueChangeEvent<RecordField> valueChangeEvent){
      detailsView.getSaveProfileButton().setEnabled(valueChangeEvent.getValue().isValid());
    }
  }
));
  KaaAdmin.getDataSource().loadServerProfileSchemas(place.getApplicationId(),new AsyncCallback<List<ServerProfileSchemaDto>>(){
    @Override public void onFailure(    Throwable throwable){
      org.kaaproject.kaa.server.admin.client.util.Utils.handleException(throwable,detailsView);
    }
    @Override public void onSuccess(    List<ServerProfileSchemaDto> result){
      if (!result.isEmpty()) {
        detailsView.getServerSchemasListBox().setValue(result.get(0));
      }
      detailsView.getServerSchemasListBox().setAcceptableValues(result);
    }
  }
);
  registrations.add(detailsView.getServerSchemasListBox().addValueChangeHandler(new ValueChangeHandler<ServerProfileSchemaDto>(){
    @Override public void onValueChange(    ValueChangeEvent<ServerProfileSchemaDto> valueChangeEvent){
      String ctlSchemaId=valueChangeEvent.getValue().getCtlSchemaId();
    }
  }
));
  registrations.add(detailsView.getDeleteButton().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent clickEvent){
      deleteItem(profileDto);
    }
  }
));
  registrations.add(detailsView.getEditButton().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent clickEvent){
      detailsView.getServerProfEditor().setValue(detailsView.getServerProfForm().getValue());
    }
  }
));
  registrations.add(detailsView.getAddServerSchemaButton().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent clickEvent){
      if (detailsView.getServerProfEditor().getValue() != null) {
        String schemaId=detailsView.getServerSchemasListBox().getValue().getCtlSchemaId();
      }
    }
  }
));
  registrations.add(detailsView.getSaveProfileButton().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent clickEvent){
      EndpointProfileRecordFieldDto endpointProfileRecordFieldDto=new EndpointProfileRecordFieldDto();
      final RecordField value=detailsView.getServerProfEditor().getValue();
      endpointProfileRecordFieldDto.setProfileRecord(value);
      final int serverSchemaVersion=detailsView.getServerSchemasListBox().getValue().getVersion();
      final String serverSchemaName=detailsView.getServerSchemasListBox().getValue().getName();
      final String serverSchemaId=detailsView.getServerSchemasListBox().getValue().getId();
      profileDto.setServerProfileVersion(serverSchemaVersion);
      endpointProfileRecordFieldDto.setEndpointKeyHash(profileDto.getEndpointKeyHash());
      KaaAdmin.getDataSource().updateEndpointProfile(endpointProfileRecordFieldDto,new AsyncCallback<EndpointProfileRecordFieldDto>(){
        @Override public void onFailure(        Throwable throwable){
          org.kaaproject.kaa.server.admin.client.util.Utils.handleException(throwable,detailsView);
        }
        @Override public void onSuccess(        EndpointProfileRecordFieldDto endpointProfileDto){
          detailsView.getServerProfSchemaName().setText(serverSchemaName);
          addServerProfNameClickHandler(serverSchemaId);
          detailsView.getServerProfForm().reset();
          detailsView.getServerProfForm().setValue(value);
          detailsView.getServerProfEditor().clear();
          detailsView.getServerProfEditor().setValue(null);
          detailsView.getAddServerSchemaButton().setEnabled(false);
          detailsView.getEditButton().setEnabled(true);
          detailsView.getDeleteButton().setEnabled(true);
        }
      }
);
    }
  }
));
  List<EndpointGroupDto> groupDtoList=entity.getGroupDtoList();
  if (groupDtoList != null) {
    detailsView.getGroupsGrid().getDataGrid().setRowData(groupDtoList);
  }
  List<TopicDto> endpointNotificationTopics=entity.getEndpointNotificationTopics();
  if (endpointNotificationTopics != null) {
    detailsView.getTopicsGrid().getDataGrid().setRowData(endpointNotificationTopics);
  }
 else   detailsView.getTopicsGrid().getDataGrid().setRowData(new ArrayList<TopicDto>());
}
