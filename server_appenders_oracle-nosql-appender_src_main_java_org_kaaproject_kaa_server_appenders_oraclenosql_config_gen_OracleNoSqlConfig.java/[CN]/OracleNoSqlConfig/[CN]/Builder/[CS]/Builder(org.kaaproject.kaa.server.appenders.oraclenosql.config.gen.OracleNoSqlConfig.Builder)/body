{
  super(other);
  if (isValidValue(fields()[0],other.storeName)) {
    this.storeName=data().deepCopy(fields()[0].schema(),other.storeName);
    fieldSetFlags()[0]=true;
  }
  if (isValidValue(fields()[1],other.kvStoreNodes)) {
    this.kvStoreNodes=data().deepCopy(fields()[1].schema(),other.kvStoreNodes);
    fieldSetFlags()[1]=true;
  }
  if (isValidValue(fields()[2],other.username)) {
    this.username=data().deepCopy(fields()[2].schema(),other.username);
    fieldSetFlags()[2]=true;
  }
  if (isValidValue(fields()[3],other.walletDir)) {
    this.walletDir=data().deepCopy(fields()[3].schema(),other.walletDir);
    fieldSetFlags()[3]=true;
  }
  if (isValidValue(fields()[4],other.pwdFile)) {
    this.pwdFile=data().deepCopy(fields()[4].schema(),other.pwdFile);
    fieldSetFlags()[4]=true;
  }
  if (isValidValue(fields()[5],other.securityFile)) {
    this.securityFile=data().deepCopy(fields()[5].schema(),other.securityFile);
    fieldSetFlags()[5]=true;
  }
  if (isValidValue(fields()[6],other.transport)) {
    this.transport=data().deepCopy(fields()[6].schema(),other.transport);
    fieldSetFlags()[6]=true;
  }
  if (isValidValue(fields()[7],other.ssl)) {
    this.ssl=data().deepCopy(fields()[7].schema(),other.ssl);
    fieldSetFlags()[7]=true;
  }
  if (isValidValue(fields()[8],other.sslCipherSuites)) {
    this.sslCipherSuites=data().deepCopy(fields()[8].schema(),other.sslCipherSuites);
    fieldSetFlags()[8]=true;
  }
  if (isValidValue(fields()[9],other.sslProtocols)) {
    this.sslProtocols=data().deepCopy(fields()[9].schema(),other.sslProtocols);
    fieldSetFlags()[9]=true;
  }
  if (isValidValue(fields()[10],other.sslHostnameVerifier)) {
    this.sslHostnameVerifier=data().deepCopy(fields()[10].schema(),other.sslHostnameVerifier);
    fieldSetFlags()[10]=true;
  }
  if (isValidValue(fields()[11],other.sslTrustStore)) {
    this.sslTrustStore=data().deepCopy(fields()[11].schema(),other.sslTrustStore);
    fieldSetFlags()[11]=true;
  }
  if (isValidValue(fields()[12],other.sslTrustStoreType)) {
    this.sslTrustStoreType=data().deepCopy(fields()[12].schema(),other.sslTrustStoreType);
    fieldSetFlags()[12]=true;
  }
}
