{
  if (key == null) {
    throw new InvalidParameterException("Cache key can't be null");
  }
  while (true) {
    Future<V> f=cache.get(key);
    if (f == null) {
      Callable<V> eval=new Callable<V>(){
        public V call() throws InterruptedException {
          return worker.compute(key);
        }
      }
;
      FutureTask<V> ft=new FutureTask<V>(eval);
      f=cache.putIfAbsent(key,ft);
      if (f == null) {
        f=ft;
        try {
          ft.run();
        }
  finally {
          cache.remove(key,ft);
        }
      }
    }
    try {
      return f.get();
    }
 catch (    CancellationException e) {
      cache.remove(key,f);
    }
catch (    ExecutionException|InterruptedException e) {
      throw launderThrowable(e);
    }
  }
}
