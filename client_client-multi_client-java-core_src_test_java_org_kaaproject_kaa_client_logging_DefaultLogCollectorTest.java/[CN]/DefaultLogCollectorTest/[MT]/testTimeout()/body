{
  long timeout=2;
  KaaChannelManager channelManager=Mockito.mock(KaaChannelManager.class);
  LogTransport transport=Mockito.mock(LogTransport.class);
  DefaultLogCollector logCollector=new DefaultLogCollector(transport,channelManager);
  LogUploadFailoverStrategy failoverStrategy=Mockito.mock(LogUploadFailoverStrategy.class);
  DefaultLogUploadConfiguration conf=new DefaultLogUploadConfiguration.Builder().setBatchVolume(15).setVolumeThreshold(25).setMaximumAllowedVolume(50).setLogUploadTimeout(timeout).build();
  logCollector.setConfiguration(conf);
  logCollector.setFailoverStrategy(failoverStrategy);
  try {
    SuperRecord record=new SuperRecord();
    record.setLogdata("test");
    logCollector.addLogRecord(record);
    logCollector.addLogRecord(record);
    logCollector.addLogRecord(record);
    logCollector.addLogRecord(record);
    logCollector.addLogRecord(record);
    logCollector.addLogRecord(record);
    Mockito.verify(failoverStrategy,Mockito.times(0)).onTimeout();
    LogSyncRequest request1=Mockito.mock(LogSyncRequest.class);
    logCollector.fillSyncRequest(request1);
    Thread.sleep(timeout / 2 * 1000);
    Mockito.verify(failoverStrategy,Mockito.times(0)).onTimeout();
    Thread.sleep(timeout / 2 * 1000);
    logCollector.addLogRecord(record);
    Mockito.verify(failoverStrategy,Mockito.times(1)).onTimeout();
  }
 catch (  Exception e) {
    Assert.assertTrue("Exception: " + e.toString(),false);
  }
}
