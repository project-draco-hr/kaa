{
  KaaChannelManager channelManager=Mockito.mock(KaaChannelManager.class);
  FailoverManager failoverManager=Mockito.mock(FailoverManager.class);
  LogDeliveryListener deliveryListener=Mockito.mock(LogDeliveryListener.class);
  LogTransport transport=Mockito.mock(LogTransport.class);
  AbstractLogCollector logCollector=new DefaultLogCollector(transport,executorContext,channelManager,failoverManager);
  DefaultLogUploadStrategy strategy=Mockito.spy(new DefaultLogUploadStrategy());
  strategy.setRetryPeriod(0);
  logCollector.setStrategy(strategy);
  LogStorage storage=Mockito.mock(LogStorage.class);
  logCollector.setStorage(storage);
  Log record=new Log();
  Mockito.when(storage.addLogRecord(Mockito.any(LogRecord.class))).thenReturn(new BucketInfo(1,1));
  Mockito.when(storage.getStatus()).thenReturn(new LogStorageStatus(){
    @Override public long getRecordCount(){
      return 1;
    }
    @Override public long getConsumedVolume(){
      return 1;
    }
  }
);
  logCollector.addLogRecord(record);
  logCollector.addLogRecord(record);
  logCollector.addLogRecord(record);
  logCollector.addLogRecord(record);
  logCollector.addLogRecord(record);
  Mockito.when(storage.addLogRecord(Mockito.any(LogRecord.class))).thenReturn(new BucketInfo(1,1));
  Mockito.when(storage.getStatus()).thenReturn(new LogStorageStatus(){
    @Override public long getRecordCount(){
      return 1;
    }
    @Override public long getConsumedVolume(){
      return 1024 * 1024;
    }
  }
);
  logCollector.addLogRecord(record);
  Mockito.when(storage.getNextBucket()).thenReturn(new LogBucket(1,Arrays.asList(new LogRecord(record),new LogRecord(record),new LogRecord(record))));
  LogSyncRequest request1=new LogSyncRequest();
  logCollector.fillSyncRequest(request1);
  Assert.assertEquals(3,request1.getLogEntries().size());
  LogSyncResponse uploadResponse=new LogSyncResponse();
  LogDeliveryStatus status=new LogDeliveryStatus(request1.getRequestId(),SyncResponseResultType.FAILURE,LogDeliveryErrorCode.NO_APPENDERS_CONFIGURED);
  uploadResponse.setDeliveryStatuses(Collections.singletonList(status));
  logCollector.setLogDeliveryListener(deliveryListener);
  logCollector.onLogResponse(uploadResponse);
  LogFailoverCommand controller=(LogFailoverCommand)ReflectionTestUtils.getField(logCollector,"controller");
  verify(deliveryListener,Mockito.timeout(1000)).onLogDeliveryFailure(Mockito.any(BucketInfo.class));
  verify(strategy,Mockito.timeout(1000)).onFailure(controller,LogDeliveryErrorCode.NO_APPENDERS_CONFIGURED);
  verify(transport,Mockito.timeout(1000).times(2)).sync();
  reset(transport);
  Thread.sleep(1000);
  verify(transport,never()).sync();
}
