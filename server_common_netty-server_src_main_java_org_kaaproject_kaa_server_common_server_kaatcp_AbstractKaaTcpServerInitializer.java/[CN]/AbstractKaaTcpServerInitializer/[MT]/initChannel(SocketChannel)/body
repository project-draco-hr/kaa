{
  final ChannelPipeline p=ch.pipeline();
  final UUID uuid=UUID.randomUUID();
  LOG.info("KaaTcpServerInitializer Initializing Channel {} connection from {}:{}",uuid,ch.remoteAddress().getAddress().toString(),ch.remoteAddress().getPort());
  Attribute<UUID> uuidAttr=ch.attr(AbstractNettyServer.UUID_KEY);
  uuidAttr.set(uuid);
  if (conf.getSessionTrack() != null) {
    Track track=conf.getSessionTrack().newSession(uuid);
    Attribute<Track> trackAttr=ch.attr(NettyHttpServer.TRACK_KEY);
    trackAttr.set(track);
  }
  p.addLast("binaryDecoder",new ByteArrayDecoder());
  p.addLast("kaaTcpDecoder",new KaaTcpDecoder(commandFactory));
  p.addLast("binaryEncoder",new ByteArrayEncoder());
  p.addLast("kaaTcpEncoder",new KaaTcpEncoder());
  p.addLast("mainHandler",getMainHandler(uuid));
  p.addLast("kaaTcpExceptionHandler",new KaaTcpExceptionHandler());
  ChannelFuture closeFuture=ch.closeFuture();
  closeFuture.addListener(new GenericFutureListener<Future<? super Void>>(){
    @Override public void operationComplete(    Future<? super Void> future) throws Exception {
      if (conf.getSessionTrack() != null) {
        conf.getSessionTrack().closeSession(uuid);
      }
    }
  }
);
}
