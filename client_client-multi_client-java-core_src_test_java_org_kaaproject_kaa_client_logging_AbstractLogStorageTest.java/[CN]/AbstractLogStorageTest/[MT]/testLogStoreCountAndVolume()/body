{
  long bucketSize=9;
  int recordCount=3;
  LogStorage storage=(LogStorage)getStorage(bucketSize,recordCount);
  LogRecord record=new LogRecord();
  int insertionCount=9;
  int receivedCount=0;
  int iter=insertionCount;
  while (iter-- > 0) {
    storage.addLogRecord(record);
  }
  LogBucket logBlock=storage.getNextBucket();
  receivedCount=addIfNotEmpty(receivedCount,logBlock);
  Assert.assertEquals(insertionCount - receivedCount,storage.getStatus().getRecordCount());
  Assert.assertEquals((insertionCount - receivedCount) * 3,storage.getStatus().getConsumedVolume());
  logBlock=storage.getNextBucket();
  receivedCount=addIfNotEmpty(receivedCount,logBlock);
  Assert.assertEquals(insertionCount - receivedCount,storage.getStatus().getRecordCount());
  Assert.assertEquals((insertionCount - receivedCount) * 3,storage.getStatus().getConsumedVolume());
  logBlock=storage.getNextBucket();
  receivedCount=addIfNotEmpty(receivedCount,logBlock);
  Assert.assertEquals(insertionCount - receivedCount,storage.getStatus().getRecordCount());
  Assert.assertEquals((insertionCount - receivedCount) * 3,storage.getStatus().getConsumedVolume());
  storage.rollbackBucket(logBlock.getBucketId());
  receivedCount-=logBlock.getRecords().size();
  Assert.assertEquals(insertionCount - receivedCount,storage.getStatus().getRecordCount());
  Assert.assertEquals((insertionCount - receivedCount) * 3,storage.getStatus().getConsumedVolume());
  storage.close();
}
