{
  Cell target=null;
  List<Cell> path=null;
  Queue<Cell> queue=new LinkedList<>();
  Map<Cell,Cell> visitGraph=new HashMap<>();
  queue.add(source);
  visitGraph.put(source,null);
  LOG.trace("Constructing graph");
  while (queue.size() > 0) {
    Cell node=queue.poll();
    LOG.trace("Processing node {}",node);
    if (isTargetFound(node)) {
      LOG.trace("Target candidate found {}",node);
      target=node;
      if (!isOtherNearer(visitGraph,others,target)) {
        LOG.trace("Target found {}",node);
        break;
      }
    }
 else {
      List<Cell> neightbors=getNeighbors(labyrinth,node);
      LOG.trace("Processing {} neightbors",neightbors.size());
      if (neightbors != null && neightbors.size() > 0) {
        for (        Cell neighbor : neightbors) {
          if (!visitGraph.containsKey(neighbor)) {
            LOG.trace("Adding to queue {}",neighbor);
            queue.add(neighbor);
            visitGraph.put(neighbor,node);
          }
        }
      }
    }
  }
  if (target != null) {
    LOG.trace("Compiling path");
    path=compilePath(visitGraph,target);
  }
  return path;
}
