{
  KaaClientState state=new KaaClientPropertiesState(new FilePersistentStorage(),CommonsBase64.getInstance(),getProperties());
  Topic topic1=Topic.newBuilder().setId(1234).setName("testName").setSubscriptionType(SubscriptionType.OPTIONAL_SUBSCRIPTION).build();
  Topic topic2=Topic.newBuilder().setId(4321).setName("testName").setSubscriptionType(SubscriptionType.MANDATORY_SUBSCRIPTION).build();
  state.addTopic(topic1);
  state.addTopic(topic2);
  state.updateTopicSubscriptionInfo(topic2.getId(),1);
  state.updateTopicSubscriptionInfo(topic1.getId(),0);
  state.updateTopicSubscriptionInfo(topic1.getId(),1);
  Map<Long,Integer> expected=new HashMap<>();
  expected.put(topic2.getId(),1);
  assertEquals(expected,state.getNfSubscriptions());
  state.persist();
  state=new KaaClientPropertiesState(new FilePersistentStorage(),CommonsBase64.getInstance(),getProperties());
  assertEquals(expected,state.getNfSubscriptions());
  state.addTopicSubscription(topic1.getId());
  expected.put(topic1.getId(),0);
  assertEquals(expected,state.getNfSubscriptions());
  state.updateTopicSubscriptionInfo(topic1.getId(),5);
  expected.put(topic1.getId(),5);
  assertEquals(expected,state.getNfSubscriptions());
  state.removeTopic(topic1.getId());
  state.persist();
  state=new KaaClientPropertiesState(new FilePersistentStorage(),CommonsBase64.getInstance(),getProperties());
  expected.remove(topic1.getId());
  assertEquals(expected,state.getNfSubscriptions());
}
