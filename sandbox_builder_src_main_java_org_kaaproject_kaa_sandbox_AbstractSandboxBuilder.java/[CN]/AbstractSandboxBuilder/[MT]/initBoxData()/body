{
  String changeKaaHostFileTemplate=FileUtils.readResource(CHANGE_KAA_HOST_TEMPLATE);
  String stopServices="";
  String setNewHosts="";
  String startServices="";
  for (  KaaPackage kaaPackage : KaaPackage.values()) {
    if (kaaPackage.getHostProperties() != null && kaaPackage.getHostProperties().length > 0) {
      if (StringUtils.isNotBlank(stopServices)) {
        stopServices+="\n";
        startServices+="\n";
      }
      stopServices+=osType.getStopServiceTemplate().replaceAll(SERVICE_NAME_VAR,kaaPackage.getServiceName());
      startServices+=osType.getStartServiceTemplate().replaceAll(SERVICE_NAME_VAR,kaaPackage.getServiceName());
      for (      String propertyName : kaaPackage.getHostProperties()) {
        if (StringUtils.isNotBlank(setNewHosts)) {
          setNewHosts+="\n";
        }
        setNewHosts+="setNewHost " + kaaPackage.getPropertiesFile() + " "+ propertyName;
      }
    }
  }
  String changeKaaHostFileSource=changeKaaHostFileTemplate.replaceAll(STOP_SERVICES_VAR,stopServices).replaceAll(SET_NEW_HOSTS,setNewHosts).replaceAll(START_SERVICES_VAR,startServices);
  File changeKaaHostFile=new File(distroPath,CHANGE_KAA_HOST);
  FileOutputStream fos=new FileOutputStream(changeKaaHostFile);
  fos.write(changeKaaHostFileSource.getBytes());
  fos.flush();
  fos.close();
  AdminClient adminClient=new AdminClient(DEFAULT_HOST,webAdminForwardPort);
  List<DemoBuilder> demoBuilders=DemoBuildersRegistry.getRegisteredDemoBuilders();
  List<Project> projects=new ArrayList<>();
  for (  DemoBuilder demoBuilder : demoBuilders) {
    demoBuilder.buildDemoApplication(adminClient);
    projects.addAll(demoBuilder.getProjectConfigs());
  }
  File projectsXmlFile=new File(demoProjectsPath,DEMO_PROJECTS_XML);
  ProjectsConfig projectsConfig=new ProjectsConfig();
  projectsConfig.getProjects().addAll(projects);
  JAXBContext jc=JAXBContext.newInstance("org.kaaproject.kaa.sandbox.demo.projects");
  Marshaller marshaller=jc.createMarshaller();
  marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);
  marshaller.marshal(projectsConfig,projectsXmlFile);
  String sandboxSplashFileTemplate=FileUtils.readResource(SANDBOX_SPLASH_PY_TEMPLATE);
  String sandboxSplashFileSource=AbstractDemoBuilder.updateCredentialsInfo(sandboxSplashFileTemplate);
  sandboxSplashFileSource=sandboxSplashFileSource.replaceAll(WEB_ADMIN_PORT_VAR,DEFAULT_WEB_ADMIN_PORT + "").replaceAll(SSH_FORWARD_PORT_VAR,DEFAULT_SSH_FORWARD_PORT + "");
  File sandboxSplashFile=new File(distroPath,SANDBOX_SPLASH_PY);
  fos=new FileOutputStream(sandboxSplashFile);
  fos.write(sandboxSplashFileSource.getBytes());
  fos.flush();
  fos.close();
  scheduleSudoSshCommand("rm -rf " + SANDBOX_FOLDER + "/"+ DEMO_PROJECTS);
  scheduleSudoSshCommand("rm -f " + SANDBOX_FOLDER + "/"+ CHANGE_KAA_HOST);
  scheduleSudoSshCommand("rm -f " + SANDBOX_FOLDER + "/"+ SANDBOX_SPLASH_PY);
  scheduleSudoSshCommand("cp -r " + DEMO_PROJECTS_PATH + " "+ SANDBOX_FOLDER+ "/");
  scheduleSudoSshCommand("chown -R " + SSH_USERNAME + ":"+ SSH_USERNAME+ " "+ SANDBOX_FOLDER+ "/"+ DEMO_PROJECTS);
  scheduleSudoSshCommand("cp -r " + SANDBOX_PATH + "/*"+ " "+ ADMIN_FOLDER+ "/");
  scheduleSudoSshCommand("chown -R " + SSH_USERNAME + ":"+ SSH_USERNAME+ " "+ ADMIN_FOLDER+ "/webapps");
  scheduleSudoSshCommand("sed -i \"s/\\(tenant_developer_user=\\).*\\$/\\1" + AbstractDemoBuilder.tenantDeveloperUser + "/\" "+ ADMIN_FOLDER+ "/conf/sandbox-server.properties");
  scheduleSudoSshCommand("sed -i \"s/\\(tenant_developer_password=\\).*\\$/\\1" + AbstractDemoBuilder.tenantDeveloperPassword + "/\" "+ ADMIN_FOLDER+ "/conf/sandbox-server.properties");
  String stopAdminCommand=osType.getStopServiceTemplate().replaceAll(SERVICE_NAME_VAR,KaaPackage.ADMIN.getServiceName());
  scheduleSudoSshCommand(stopAdminCommand);
  executeScheduledSshCommands();
  transferFile(changeKaaHostFile.getAbsolutePath(),SANDBOX_FOLDER);
  transferFile(projectsXmlFile.getAbsolutePath(),SANDBOX_FOLDER + "/" + DEMO_PROJECTS);
  transferFile(sandboxSplashFile.getAbsolutePath(),SANDBOX_FOLDER);
  executeSudoSsh("chmod +x " + SANDBOX_FOLDER + "/"+ CHANGE_KAA_HOST);
  executeSudoSsh("chmod +x " + SANDBOX_FOLDER + "/"+ SANDBOX_SPLASH_PY);
  String startAdminCommand=osType.getStartServiceTemplate().replaceAll(SERVICE_NAME_VAR,KaaPackage.ADMIN.getServiceName());
  executeSudoSsh(startAdminCommand);
  LOG.info("Sleeping 50 sec.");
  Thread.sleep(50000);
  LOG.info("Building demo applications...");
  SandboxClient sandboxClient=new SandboxClient(DEFAULT_HOST,webAdminForwardPort);
  List<Project> sandboxProjects=sandboxClient.getDemoProjects();
  if (projects.size() != sandboxProjects.size()) {
    LOG.error("Demo projects count mismatch, expected {}, actual {}",projects.size(),sandboxProjects.size());
    throw new RuntimeException("Demo projects count mismatch!");
  }
  for (  Project sandboxProject : sandboxProjects) {
    LOG.info("[{}] Building Demo Project...",sandboxProject.getName());
    String output=sandboxClient.buildProjectBinary(sandboxProject.getId());
    LOG.info("[{}] Build output:\n{}",sandboxProject.getName(),output);
    if (!sandboxClient.isProjectBinaryDataExists(sandboxProject.getId())) {
      LOG.error("Failed to build demo project '{}'",sandboxProject.getName());
      throw new RuntimeException("Failed to build demo project '" + sandboxProject.getName() + "'!");
    }
  }
  LOG.info("Finished building demo applications!");
}
