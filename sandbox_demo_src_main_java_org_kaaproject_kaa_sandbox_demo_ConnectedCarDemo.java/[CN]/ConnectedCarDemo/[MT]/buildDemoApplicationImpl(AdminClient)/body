{
  logger.info("Loading 'Connected Car Demo Application' data...");
  loginTenantAdmin(client);
  EventClassFamilyDto geoFencingEventClassFamily=client.getEventClassFamily("GeoFencingEventClassFamily");
  ApplicationDto connectedCarApplication=new ApplicationDto();
  connectedCarApplication.setName("Connected Car demo");
  connectedCarApplication=client.editApplication(connectedCarApplication);
  sdkKey.setApplicationId(connectedCarApplication.getId());
  sdkKey.setProfileSchemaVersion(1);
  sdkKey.setNotificationSchemaVersion(1);
  loginTenantDeveloper(client);
  ApplicationEventFamilyMapDto thermoAefMap=mapEventClassFamily(client,connectedCarApplication,geoFencingEventClassFamily);
  List<String> aefMapIds=new ArrayList<>();
  aefMapIds.add(thermoAefMap.getId());
  sdkKey.setAefMapIds(aefMapIds);
  TrustfulVerifierConfig trustfulVerifierConfig=new TrustfulVerifierConfig();
  UserVerifierDto trustfulUserVerifier=new UserVerifierDto();
  trustfulUserVerifier.setApplicationId(connectedCarApplication.getId());
  trustfulUserVerifier.setName("Trustful verifier");
  trustfulUserVerifier.setPluginClassName(trustfulVerifierConfig.getPluginClassName());
  trustfulUserVerifier.setPluginTypeName(trustfulVerifierConfig.getPluginTypeName());
  RawSchema rawSchema=new RawSchema(trustfulVerifierConfig.getPluginConfigSchema().toString());
  DefaultRecordGenerationAlgorithm<RawData> algotithm=new DefaultRecordGenerationAlgorithmImpl<>(rawSchema,new RawDataFactory());
  RawData rawData=algotithm.getRootData();
  trustfulUserVerifier.setJsonConfiguration(rawData.getRawData());
  trustfulUserVerifier=client.editUserVerifierDto(trustfulUserVerifier);
  sdkKey.setDefaultVerifierToken(trustfulUserVerifier.getVerifierToken());
  LogSchemaDto logSchemaDto=new LogSchemaDto();
  logSchemaDto.setApplicationId(connectedCarApplication.getId());
  logSchemaDto.setName("Connected Car log schema");
  logSchemaDto.setDescription("Log schema describes incoming RFID reports");
  logSchemaDto=client.createLogSchema(logSchemaDto,getResourcePath("logSchema.json"));
  sdkKey.setLogSchemaVersion(logSchemaDto.getMajorVersion());
  LogAppenderDto connectedCarLogAppender=new LogAppenderDto();
  connectedCarLogAppender.setName("Connected Car log appender");
  connectedCarLogAppender.setDescription("Log appender used to deliver RFID reports from connected car application to the REST server");
  connectedCarLogAppender.setApplicationId(connectedCarApplication.getId());
  connectedCarLogAppender.setApplicationToken(connectedCarApplication.getApplicationToken());
  connectedCarLogAppender.setTenantId(connectedCarApplication.getTenantId());
  connectedCarLogAppender.setMinLogSchemaVersion(1);
  connectedCarLogAppender.setMaxLogSchemaVersion(Integer.MAX_VALUE);
  connectedCarLogAppender.setConfirmDelivery(true);
  connectedCarLogAppender.setHeaderStructure(Arrays.asList(LogHeaderStructureDto.KEYHASH,LogHeaderStructureDto.TIMESTAMP,LogHeaderStructureDto.TOKEN,LogHeaderStructureDto.VERSION));
  connectedCarLogAppender.setPluginTypeName("REST");
  connectedCarLogAppender.setPluginClassName("org.kaaproject.kaa.server.appenders.rest.appender.RestLogAppender");
  connectedCarLogAppender.setJsonConfiguration(FileUtils.readResource(getResourcePath("restAppender.json")));
  connectedCarLogAppender=client.editLogAppenderDto(connectedCarLogAppender);
  ConfigurationSchemaDto configurationSchema=new ConfigurationSchemaDto();
  configurationSchema.setApplicationId(connectedCarApplication.getId());
  configurationSchema.setName("Connected car configuration schema");
  configurationSchema.setDescription("Default configuration schema for the connected car application");
  configurationSchema=client.createConfigurationSchema(configurationSchema,getResourcePath("configurationSchema.json"));
  sdkKey.setConfigurationSchemaVersion(configurationSchema.getMajorVersion());
  EndpointGroupDto baseEndpointGroup=null;
  List<EndpointGroupDto> endpointGroups=client.getEndpointGroups(connectedCarApplication.getId());
  if (endpointGroups.size() == 1 && endpointGroups.get(0).getWeight() == 0) {
    baseEndpointGroup=endpointGroups.get(0);
  }
  if (baseEndpointGroup == null) {
    throw new RuntimeException("Can't get default endpoint group for the connected car application!");
  }
  ConfigurationDto baseConfiguration=new ConfigurationDto();
  baseConfiguration.setApplicationId(connectedCarApplication.getId());
  baseConfiguration.setEndpointGroupId(baseEndpointGroup.getId());
  baseConfiguration.setSchemaId(configurationSchema.getId());
  baseConfiguration.setMajorVersion(configurationSchema.getMajorVersion());
  baseConfiguration.setMinorVersion(configurationSchema.getMinorVersion());
  baseConfiguration.setDescription("Base configuration for the connected car demo ");
  String body=FileUtils.readResource(getResourcePath("configurationBody.json"));
  baseConfiguration.setBody(body);
  baseConfiguration.setStatus(UpdateStatus.INACTIVE);
  baseConfiguration=client.editConfiguration(baseConfiguration);
  client.activateConfiguration(baseConfiguration.getId());
  logger.info("Finished loading 'Connected Car Demo Application' data.");
}
