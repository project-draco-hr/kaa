{
  String sdkToken=sdkProperties.getToken();
  Integer configurationSchemaVersion=sdkProperties.getConfigurationSchemaVersion();
  Integer profileSchemaVersion=sdkProperties.getProfileSchemaVersion();
  Integer notificationSchemaVersion=sdkProperties.getNotificationSchemaVersion();
  Integer logSchemaVersion=sdkProperties.getLogSchemaVersion();
  String defaultVerifierToken=sdkProperties.getDefaultVerifierToken();
  String sdkTemplateLocation=System.getProperty("server_home_dir") + "/" + SDK_TEMPLATE_DIR+ SDK_PREFIX+ buildVersion+ ".tar.gz";
  LOG.debug("Lookup Objective C SDK template: {}",sdkTemplateLocation);
  CompressorStreamFactory csf=new CompressorStreamFactory();
  ArchiveStreamFactory asf=new ArchiveStreamFactory();
  CompressorInputStream cis=csf.createCompressorInputStream(CompressorStreamFactory.GZIP,new FileInputStream(sdkTemplateLocation));
  ArchiveInputStream templateArchive=asf.createArchiveInputStream(ArchiveStreamFactory.TAR,cis);
  ByteArrayOutputStream sdkOutput=new ByteArrayOutputStream();
  CompressorOutputStream cos=csf.createCompressorOutputStream(CompressorStreamFactory.GZIP,sdkOutput);
  ArchiveOutputStream sdkFile=asf.createArchiveOutputStream(ArchiveStreamFactory.TAR,cos);
  Map<String,TarEntryData> replacementData=new HashMap<>();
  List<TarEntryData> objcSources=new ArrayList<>();
  if (StringUtils.isNotBlank(profileSchemaBody)) {
    LOG.debug("Generating profile schema");
    Schema profileSchema=new Schema.Parser().parse(profileSchemaBody);
    String profileClassName=KAA_SOURCE_PREFIX + profileSchema.getName();
    String profileCommonHeader=readResource(PROFILE_TEMPLATE_DIR + PROFILE_COMMON + _H+ TEMPLATE_SUFFIX).replaceAll(PROFILE_CLASS_VAR,profileClassName);
    objcSources.add(CommonSdkUtil.tarEntryForSources(profileCommonHeader,KAA_ROOT + PROFILE_DIR + PROFILE_COMMON+ _H));
    String profileCommonSource=readResource(PROFILE_TEMPLATE_DIR + PROFILE_COMMON + _M+ TEMPLATE_SUFFIX).replaceAll(PROFILE_CLASS_VAR,profileClassName);
    objcSources.add(CommonSdkUtil.tarEntryForSources(profileCommonSource,KAA_ROOT + PROFILE_DIR + PROFILE_COMMON+ _M));
    objcSources.addAll(generateSourcesFromSchema(profileSchema,PROFILE_GEN));
  }
  String logClassName="";
  if (StringUtils.isNotBlank(logSchemaBody)) {
    LOG.debug("Generating log schema");
    Schema logSchema=new Schema.Parser().parse(logSchemaBody);
    logClassName=KAA_SOURCE_PREFIX + logSchema.getName();
    String logRecordHeader=readResource(LOG_TEMPLATE_DIR + LOG_RECORD + _H+ TEMPLATE_SUFFIX).replaceAll(LOG_RECORD_CLASS_VAR,logClassName);
    objcSources.add(CommonSdkUtil.tarEntryForSources(logRecordHeader,KAA_ROOT + LOG_DIR + LOG_RECORD+ _H));
    String logRecordSource=readResource(LOG_TEMPLATE_DIR + LOG_RECORD + _M+ TEMPLATE_SUFFIX).replaceAll(LOG_RECORD_CLASS_VAR,logClassName);
    objcSources.add(CommonSdkUtil.tarEntryForSources(logRecordSource,KAA_ROOT + LOG_DIR + LOG_RECORD+ _M));
    String logCollector=readResource(LOG_TEMPLATE_DIR + LOG_COLLECTOR_INTERFACE + TEMPLATE_SUFFIX).replaceAll(LOG_RECORD_CLASS_VAR,logClassName);
    objcSources.add(CommonSdkUtil.tarEntryForSources(logCollector,KAA_ROOT + LOG_DIR + LOG_COLLECTOR_INTERFACE));
    String logCollectorImplHeader=readResource(LOG_TEMPLATE_DIR + LOG_COLLECTOR_SOURCE + _H+ TEMPLATE_SUFFIX).replaceAll(LOG_RECORD_CLASS_VAR,logClassName);
    objcSources.add(CommonSdkUtil.tarEntryForSources(logCollectorImplHeader,KAA_ROOT + LOG_DIR + LOG_COLLECTOR_SOURCE+ _H));
    String logCollectorImplSource=readResource(LOG_TEMPLATE_DIR + LOG_COLLECTOR_SOURCE + _M+ TEMPLATE_SUFFIX).replaceAll(LOG_RECORD_CLASS_VAR,logClassName);
    objcSources.add(CommonSdkUtil.tarEntryForSources(logCollectorImplSource,KAA_ROOT + LOG_DIR + LOG_COLLECTOR_SOURCE+ _M));
    objcSources.addAll(generateSourcesFromSchema(logSchema,LOG_GEN));
  }
  String configurationClassName="";
  if (StringUtils.isNotBlank(configurationBaseSchemaBody)) {
    LOG.debug("Generating configuration schema");
    Schema configurationSchema=new Schema.Parser().parse(configurationBaseSchemaBody);
    configurationClassName=KAA_SOURCE_PREFIX + configurationSchema.getName();
    String configurationCommon=readResource(CONFIGURATION_TEMPLATE_DIR + CONFIGURATION_COMMON + TEMPLATE_SUFFIX).replaceAll(CONFIGURATION_CLASS_VAR,configurationClassName);
    objcSources.add(CommonSdkUtil.tarEntryForSources(configurationCommon,KAA_ROOT + CONFIGURATION_DIR + CONFIGURATION_COMMON));
    String cfManagerImplHeader=readResource(CONFIGURATION_TEMPLATE_DIR + CONFIGURATION_MANAGER_IMPL + _H+ TEMPLATE_SUFFIX).replaceAll(CONFIGURATION_CLASS_VAR,configurationClassName);
    objcSources.add(CommonSdkUtil.tarEntryForSources(cfManagerImplHeader,KAA_ROOT + CONFIGURATION_DIR + CONFIGURATION_MANAGER_IMPL+ _H));
    String cfManagerImplSource=readResource(CONFIGURATION_TEMPLATE_DIR + CONFIGURATION_MANAGER_IMPL + _M+ TEMPLATE_SUFFIX).replaceAll(CONFIGURATION_CLASS_VAR,configurationClassName);
    objcSources.add(CommonSdkUtil.tarEntryForSources(cfManagerImplSource,KAA_ROOT + CONFIGURATION_DIR + CONFIGURATION_MANAGER_IMPL+ _M));
    String cfDeserializerHeader=readResource(CONFIGURATION_TEMPLATE_DIR + CONFIGURATION_DESERIALIZER + _H+ TEMPLATE_SUFFIX).replaceAll(CONFIGURATION_CLASS_VAR,configurationClassName);
    objcSources.add(CommonSdkUtil.tarEntryForSources(cfDeserializerHeader,KAA_ROOT + CONFIGURATION_DIR + CONFIGURATION_DESERIALIZER+ _H));
    String cfDeserializerSource=readResource(CONFIGURATION_TEMPLATE_DIR + CONFIGURATION_DESERIALIZER + _M+ TEMPLATE_SUFFIX).replaceAll(CONFIGURATION_CLASS_VAR,configurationClassName);
    objcSources.add(CommonSdkUtil.tarEntryForSources(cfDeserializerSource,KAA_ROOT + CONFIGURATION_DIR + CONFIGURATION_DESERIALIZER+ _M));
    objcSources.addAll(generateSourcesFromSchema(configurationSchema,CONFIGURATION_GEN));
  }
  if (StringUtils.isNotBlank(notificationSchemaBody)) {
    LOG.debug("Generating notification schema");
    Schema notificationSchema=new Schema.Parser().parse(notificationSchemaBody);
    String notificationClassName=KAA_SOURCE_PREFIX + notificationSchema.getName();
    String nfCommonHeader=readResource(NOTIFICATION_TEMPLATE_DIR + NOTIFICATION_COMMON + _H+ TEMPLATE_SUFFIX).replaceAll(NOTIFICATION_CLASS_VAR,notificationClassName);
    objcSources.add(CommonSdkUtil.tarEntryForSources(nfCommonHeader,KAA_ROOT + NOTIFICATION_DIR + NOTIFICATION_COMMON+ _H));
    String nfCommonSource=readResource(NOTIFICATION_TEMPLATE_DIR + NOTIFICATION_COMMON + _M+ TEMPLATE_SUFFIX).replaceAll(NOTIFICATION_CLASS_VAR,notificationClassName);
    objcSources.add(CommonSdkUtil.tarEntryForSources(nfCommonSource,KAA_ROOT + NOTIFICATION_DIR + NOTIFICATION_COMMON+ _M));
    objcSources.addAll(generateSourcesFromSchema(notificationSchema,NOTIFICATION_GEN));
  }
  if (eventFamilies != null && !eventFamilies.isEmpty()) {
    objcSources.addAll(ObjCEventClassesGenerator.generateEventSources(eventFamilies));
  }
  String kaaClient=readResource(SDK_TEMPLATE_DIR + KAA_CLIENT + TEMPLATE_SUFFIX).replaceAll(LOG_RECORD_CLASS_VAR,logClassName).replaceAll(CONFIGURATION_CLASS_VAR,configurationClassName);
  objcSources.add(CommonSdkUtil.tarEntryForSources(kaaClient,KAA_ROOT + KAA_CLIENT));
  String baseKaaClientHeader=readResource(SDK_TEMPLATE_DIR + BASE_KAA_CLIENT + _H+ TEMPLATE_SUFFIX).replaceAll(LOG_RECORD_CLASS_VAR,logClassName).replaceAll(CONFIGURATION_CLASS_VAR,configurationClassName);
  objcSources.add(CommonSdkUtil.tarEntryForSources(baseKaaClientHeader,KAA_ROOT + BASE_KAA_CLIENT + _H));
  String baseKaaClientSource=readResource(SDK_TEMPLATE_DIR + BASE_KAA_CLIENT + _M+ TEMPLATE_SUFFIX).replaceAll(LOG_RECORD_CLASS_VAR,logClassName).replaceAll(CONFIGURATION_CLASS_VAR,configurationClassName);
  objcSources.add(CommonSdkUtil.tarEntryForSources(baseKaaClientSource,KAA_ROOT + BASE_KAA_CLIENT + _M));
  String tokenVerifier=defaultVerifierToken == null ? "nil" : "@\"" + defaultVerifierToken + "\"";
  String tokenVerifierSource=readResource(EVENT_TEMPLATE_DIR + USER_VERIFIER_CONSTANTS + TEMPLATE_SUFFIX).replaceAll(DEFAULT_USER_VERIFIER_TOKEN_VAR,tokenVerifier);
  objcSources.add(CommonSdkUtil.tarEntryForSources(tokenVerifierSource,KAA_ROOT + EVENT_DIR + USER_VERIFIER_CONSTANTS));
  String kaaDefaultsTemplate=readResource(SDK_TEMPLATE_DIR + KAA_DEFAULTS + TEMPLATE_SUFFIX);
  objcSources.add(generateKaaDefaults(kaaDefaultsTemplate,bootstrapNodes,sdkToken,configurationProtocolSchemaBody,defaultConfigurationData));
  for (  TarEntryData entryData : objcSources) {
    replacementData.put(entryData.getEntry().getName(),entryData);
  }
  ArchiveEntry e;
  while ((e=templateArchive.getNextEntry()) != null) {
    if (!e.isDirectory()) {
      if (replacementData.containsKey(e.getName())) {
        TarEntryData entryData=replacementData.remove(e.getName());
        sdkFile.putArchiveEntry(entryData.getEntry());
        sdkFile.write(entryData.getData());
      }
 else {
        sdkFile.putArchiveEntry(e);
        IOUtils.copy(templateArchive,sdkFile);
      }
    }
 else {
      sdkFile.putArchiveEntry(e);
    }
    sdkFile.closeArchiveEntry();
  }
  templateArchive.close();
  for (  String entryName : replacementData.keySet()) {
    TarEntryData entryData=replacementData.get(entryName);
    sdkFile.putArchiveEntry(entryData.getEntry());
    sdkFile.write(entryData.getData());
    sdkFile.closeArchiveEntry();
  }
  sdkFile.finish();
  sdkFile.close();
  String sdkFileName=MessageFormatter.arrayFormat(SDK_NAME_PATTERN,new Object[]{profileSchemaVersion,configurationSchemaVersion,notificationSchemaVersion,logSchemaVersion}).getMessage();
  byte[] sdkData=sdkOutput.toByteArray();
  FileData sdk=new FileData();
  sdk.setFileName(sdkFileName);
  sdk.setFileData(sdkData);
  return sdk;
}
