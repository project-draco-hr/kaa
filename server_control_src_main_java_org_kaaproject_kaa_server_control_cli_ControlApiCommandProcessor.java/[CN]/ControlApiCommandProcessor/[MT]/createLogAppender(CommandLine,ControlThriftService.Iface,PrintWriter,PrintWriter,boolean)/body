{
  try {
    LogAppenderDto logAppender=null;
    if (edit) {
      String logAppenderId=line.getOptionValue("i");
      logAppender=toDto(client.getLogSchema(logAppenderId));
      if (logAppender == null) {
        writer.println("Log Appender with id " + logAppenderId + NOT_FOUND);
        return;
      }
    }
 else {
      logAppender=new LogAppenderDto();
    }
    if (line.hasOption("a")) {
      String appId=line.getOptionValue("a");
      ApplicationDto app=toDto(client.getApplication(appId));
      if (app != null) {
        logAppender.setApplicationId(appId);
        logAppender.setApplicationToken(app.getApplicationToken());
        logAppender.setTenantId(app.getTenantId());
      }
 else {
        writer.println("Application with id " + appId + NOT_FOUND);
        return;
      }
    }
    if (line.hasOption("s")) {
      String schemaId=line.getOptionValue("s");
      if (StringUtils.isNotBlank(schemaId)) {
        SchemaDto schema=new SchemaDto();
        schema.setId(schemaId);
        logAppender.setSchema(schema);
      }
 else {
        writer.println("Incorrect schema id " + schemaId);
        return;
      }
    }
    if (line.hasOption("n")) {
      String name=line.getOptionValue("n");
      if (StringUtils.isNotBlank(name)) {
        logAppender.setName(name);
      }
 else {
        writer.println("Empty name of log appender" + name);
        return;
      }
    }
    if (line.hasOption("t")) {
      String type=line.getOptionValue("t");
      if (StringUtils.isNotBlank(type)) {
        for (        LogAppenderTypeDto current : LogAppenderTypeDto.values()) {
          if (current.name().equalsIgnoreCase(type)) {
            logAppender.setType(current);
            logAppender.setProperties(new LogAppenderParametersDto());
          }
        }
        if (logAppender.getType() == null) {
          writer.println("Incorrect appender type " + type);
          return;
        }
      }
    }
    if (line.hasOption("hs")) {
      if (logAppender.getType() == LogAppenderTypeDto.FLUME) {
        String hosts=line.getOptionValue("hs");
        List<HostInfoDto> list=getHostInfo(hosts.trim());
        if (!list.isEmpty()) {
          FlumeAppenderParametersDto parameters=new FlumeAppenderParametersDto(list);
          parameters.setBalancingType(FlumeBalancingTypeDto.PRIORITIZED);
          logAppender.setProperties(new LogAppenderParametersDto(parameters));
        }
 else {
          writer.println("Incorrect hosts format.");
          return;
        }
      }
 else {
        writer.println("Please, use parameter -hs only with FLUME type.");
        return;
      }
    }
    if (logAppender.getType() == LogAppenderTypeDto.FLUME && logAppender.getProperties() == null) {
      writer.println("With FLUME type parameter -hs is required.");
      return;
    }
    logAppender.setStatus(LogAppenderStatusDto.REGISTERED);
    LogAppenderDto savedLogAppender=toDto(client.editLogAppender(toDataStruct(logAppender)));
    if (edit) {
      writer.println("Log Appender updated.");
    }
 else {
      writer.println("Created new Log Appender with id: " + savedLogAppender.getId());
      if (line.hasOption("o")) {
        String outFileName=line.getOptionValue("o");
        storeInfo(outFileName,savedLogAppender.getId(),errorWriter);
      }
    }
  }
 catch (  TException e) {
    handleException(UNABLE_TO + (edit ? UPDATE : CREATE) + LOG_APPENDER,e,errorWriter);
  }
}
